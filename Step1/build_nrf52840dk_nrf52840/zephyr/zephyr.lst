
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002260 	.word	0x20002260
}
   4:	00002481 	.word	0x00002481
   8:	000081c3 	.word	0x000081c3
   c:	0000246d 	.word	0x0000246d
  10:	0000246d 	.word	0x0000246d
  14:	0000246d 	.word	0x0000246d
  18:	0000246d 	.word	0x0000246d
	...
  2c:	00002289 	.word	0x00002289
  30:	0000246d 	.word	0x0000246d
  34:	00000000 	.word	0x00000000
  38:	00002235 	.word	0x00002235
  3c:	0000246d 	.word	0x0000246d

00000040 <_irq_vector_table>:
  40:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  50:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  60:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  70:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  80:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  90:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  a0:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  b0:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  c0:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  d0:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  e0:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..
  f0:	000021ed 000021ed 000021ed 000021ed     .!...!...!...!..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0x126>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0x112>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <__data_size+0x8>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <__data_size+0x1e>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <__data_size+0x5c>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <__data_size+0x44>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x178>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <__data_size+0x44>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0xa6>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0xa2>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0xbc>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0x10a>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0xf2>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x186>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0x14a>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x168>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <__data_size+0x70>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <__data_size+0x70>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <__data_size+0x70>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <__data_size+0x1e>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <__data_size+0x1e>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2uiz>:
     89c:	004a      	lsls	r2, r1, #1
     89e:	d211      	bcs.n	8c4 <__aeabi_d2uiz+0x28>
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d211      	bcs.n	8ca <__aeabi_d2uiz+0x2e>
     8a6:	d50d      	bpl.n	8c4 <__aeabi_d2uiz+0x28>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d40e      	bmi.n	8d0 <__aeabi_d2uiz+0x34>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	fa23 f002 	lsr.w	r0, r3, r2
     8c2:	4770      	bx	lr
     8c4:	f04f 0000 	mov.w	r0, #0
     8c8:	4770      	bx	lr
     8ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8ce:	d102      	bne.n	8d6 <__aeabi_d2uiz+0x3a>
     8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8d4:	4770      	bx	lr
     8d6:	f04f 0000 	mov.w	r0, #0
     8da:	4770      	bx	lr

000008dc <__aeabi_uldivmod>:
     8dc:	b953      	cbnz	r3, 8f4 <__aeabi_uldivmod+0x18>
     8de:	b94a      	cbnz	r2, 8f4 <__aeabi_uldivmod+0x18>
     8e0:	2900      	cmp	r1, #0
     8e2:	bf08      	it	eq
     8e4:	2800      	cmpeq	r0, #0
     8e6:	bf1c      	itt	ne
     8e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     8ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     8f0:	f000 b96c 	b.w	bcc <__aeabi_idiv0>
     8f4:	f1ad 0c08 	sub.w	ip, sp, #8
     8f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8fc:	f000 f806 	bl	90c <__udivmoddi4>
     900:	f8dd e004 	ldr.w	lr, [sp, #4]
     904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     908:	b004      	add	sp, #16
     90a:	4770      	bx	lr

0000090c <__udivmoddi4>:
     90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     910:	9e08      	ldr	r6, [sp, #32]
     912:	460d      	mov	r5, r1
     914:	4604      	mov	r4, r0
     916:	468e      	mov	lr, r1
     918:	2b00      	cmp	r3, #0
     91a:	f040 8082 	bne.w	a22 <__udivmoddi4+0x116>
     91e:	428a      	cmp	r2, r1
     920:	4617      	mov	r7, r2
     922:	d946      	bls.n	9b2 <__udivmoddi4+0xa6>
     924:	fab2 f282 	clz	r2, r2
     928:	b14a      	cbz	r2, 93e <__udivmoddi4+0x32>
     92a:	f1c2 0120 	rsb	r1, r2, #32
     92e:	fa05 f302 	lsl.w	r3, r5, r2
     932:	fa20 f101 	lsr.w	r1, r0, r1
     936:	4097      	lsls	r7, r2
     938:	ea41 0e03 	orr.w	lr, r1, r3
     93c:	4094      	lsls	r4, r2
     93e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     942:	0c23      	lsrs	r3, r4, #16
     944:	fbbe fcf8 	udiv	ip, lr, r8
     948:	b2b9      	uxth	r1, r7
     94a:	fb08 ee1c 	mls	lr, r8, ip, lr
     94e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     952:	fb0c f001 	mul.w	r0, ip, r1
     956:	4298      	cmp	r0, r3
     958:	d90a      	bls.n	970 <__udivmoddi4+0x64>
     95a:	18fb      	adds	r3, r7, r3
     95c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     960:	f080 8116 	bcs.w	b90 <__udivmoddi4+0x284>
     964:	4298      	cmp	r0, r3
     966:	f240 8113 	bls.w	b90 <__udivmoddi4+0x284>
     96a:	f1ac 0c02 	sub.w	ip, ip, #2
     96e:	443b      	add	r3, r7
     970:	1a1b      	subs	r3, r3, r0
     972:	b2a4      	uxth	r4, r4
     974:	fbb3 f0f8 	udiv	r0, r3, r8
     978:	fb08 3310 	mls	r3, r8, r0, r3
     97c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     980:	fb00 f101 	mul.w	r1, r0, r1
     984:	42a1      	cmp	r1, r4
     986:	d909      	bls.n	99c <__udivmoddi4+0x90>
     988:	193c      	adds	r4, r7, r4
     98a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     98e:	f080 8101 	bcs.w	b94 <__udivmoddi4+0x288>
     992:	42a1      	cmp	r1, r4
     994:	f240 80fe 	bls.w	b94 <__udivmoddi4+0x288>
     998:	3802      	subs	r0, #2
     99a:	443c      	add	r4, r7
     99c:	1a64      	subs	r4, r4, r1
     99e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     9a2:	2100      	movs	r1, #0
     9a4:	b11e      	cbz	r6, 9ae <__udivmoddi4+0xa2>
     9a6:	40d4      	lsrs	r4, r2
     9a8:	2300      	movs	r3, #0
     9aa:	e9c6 4300 	strd	r4, r3, [r6]
     9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9b2:	b902      	cbnz	r2, 9b6 <__udivmoddi4+0xaa>
     9b4:	deff      	udf	#255	; 0xff
     9b6:	fab2 f282 	clz	r2, r2
     9ba:	2a00      	cmp	r2, #0
     9bc:	d14f      	bne.n	a5e <__udivmoddi4+0x152>
     9be:	1bcb      	subs	r3, r1, r7
     9c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     9c4:	fa1f f887 	uxth.w	r8, r7
     9c8:	2101      	movs	r1, #1
     9ca:	fbb3 fcfe 	udiv	ip, r3, lr
     9ce:	0c25      	lsrs	r5, r4, #16
     9d0:	fb0e 331c 	mls	r3, lr, ip, r3
     9d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9d8:	fb08 f30c 	mul.w	r3, r8, ip
     9dc:	42ab      	cmp	r3, r5
     9de:	d907      	bls.n	9f0 <__udivmoddi4+0xe4>
     9e0:	197d      	adds	r5, r7, r5
     9e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     9e6:	d202      	bcs.n	9ee <__udivmoddi4+0xe2>
     9e8:	42ab      	cmp	r3, r5
     9ea:	f200 80e7 	bhi.w	bbc <__udivmoddi4+0x2b0>
     9ee:	4684      	mov	ip, r0
     9f0:	1aed      	subs	r5, r5, r3
     9f2:	b2a3      	uxth	r3, r4
     9f4:	fbb5 f0fe 	udiv	r0, r5, lr
     9f8:	fb0e 5510 	mls	r5, lr, r0, r5
     9fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a00:	fb08 f800 	mul.w	r8, r8, r0
     a04:	45a0      	cmp	r8, r4
     a06:	d907      	bls.n	a18 <__udivmoddi4+0x10c>
     a08:	193c      	adds	r4, r7, r4
     a0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     a0e:	d202      	bcs.n	a16 <__udivmoddi4+0x10a>
     a10:	45a0      	cmp	r8, r4
     a12:	f200 80d7 	bhi.w	bc4 <__udivmoddi4+0x2b8>
     a16:	4618      	mov	r0, r3
     a18:	eba4 0408 	sub.w	r4, r4, r8
     a1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a20:	e7c0      	b.n	9a4 <__udivmoddi4+0x98>
     a22:	428b      	cmp	r3, r1
     a24:	d908      	bls.n	a38 <__udivmoddi4+0x12c>
     a26:	2e00      	cmp	r6, #0
     a28:	f000 80af 	beq.w	b8a <__udivmoddi4+0x27e>
     a2c:	2100      	movs	r1, #0
     a2e:	e9c6 0500 	strd	r0, r5, [r6]
     a32:	4608      	mov	r0, r1
     a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a38:	fab3 f183 	clz	r1, r3
     a3c:	2900      	cmp	r1, #0
     a3e:	d14b      	bne.n	ad8 <__udivmoddi4+0x1cc>
     a40:	42ab      	cmp	r3, r5
     a42:	d302      	bcc.n	a4a <__udivmoddi4+0x13e>
     a44:	4282      	cmp	r2, r0
     a46:	f200 80b7 	bhi.w	bb8 <__udivmoddi4+0x2ac>
     a4a:	1a84      	subs	r4, r0, r2
     a4c:	eb65 0303 	sbc.w	r3, r5, r3
     a50:	2001      	movs	r0, #1
     a52:	469e      	mov	lr, r3
     a54:	2e00      	cmp	r6, #0
     a56:	d0aa      	beq.n	9ae <__udivmoddi4+0xa2>
     a58:	e9c6 4e00 	strd	r4, lr, [r6]
     a5c:	e7a7      	b.n	9ae <__udivmoddi4+0xa2>
     a5e:	f1c2 0c20 	rsb	ip, r2, #32
     a62:	fa01 f302 	lsl.w	r3, r1, r2
     a66:	4097      	lsls	r7, r2
     a68:	fa20 f00c 	lsr.w	r0, r0, ip
     a6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a70:	fa21 fc0c 	lsr.w	ip, r1, ip
     a74:	4318      	orrs	r0, r3
     a76:	fbbc f1fe 	udiv	r1, ip, lr
     a7a:	0c05      	lsrs	r5, r0, #16
     a7c:	fb0e cc11 	mls	ip, lr, r1, ip
     a80:	fa1f f887 	uxth.w	r8, r7
     a84:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     a88:	fb01 f308 	mul.w	r3, r1, r8
     a8c:	42ab      	cmp	r3, r5
     a8e:	fa04 f402 	lsl.w	r4, r4, r2
     a92:	d909      	bls.n	aa8 <__udivmoddi4+0x19c>
     a94:	197d      	adds	r5, r7, r5
     a96:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     a9a:	f080 808b 	bcs.w	bb4 <__udivmoddi4+0x2a8>
     a9e:	42ab      	cmp	r3, r5
     aa0:	f240 8088 	bls.w	bb4 <__udivmoddi4+0x2a8>
     aa4:	3902      	subs	r1, #2
     aa6:	443d      	add	r5, r7
     aa8:	1aeb      	subs	r3, r5, r3
     aaa:	b285      	uxth	r5, r0
     aac:	fbb3 f0fe 	udiv	r0, r3, lr
     ab0:	fb0e 3310 	mls	r3, lr, r0, r3
     ab4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     ab8:	fb00 f308 	mul.w	r3, r0, r8
     abc:	42ab      	cmp	r3, r5
     abe:	d907      	bls.n	ad0 <__udivmoddi4+0x1c4>
     ac0:	197d      	adds	r5, r7, r5
     ac2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     ac6:	d271      	bcs.n	bac <__udivmoddi4+0x2a0>
     ac8:	42ab      	cmp	r3, r5
     aca:	d96f      	bls.n	bac <__udivmoddi4+0x2a0>
     acc:	3802      	subs	r0, #2
     ace:	443d      	add	r5, r7
     ad0:	1aeb      	subs	r3, r5, r3
     ad2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     ad6:	e778      	b.n	9ca <__udivmoddi4+0xbe>
     ad8:	f1c1 0c20 	rsb	ip, r1, #32
     adc:	408b      	lsls	r3, r1
     ade:	fa22 f70c 	lsr.w	r7, r2, ip
     ae2:	431f      	orrs	r7, r3
     ae4:	fa20 f40c 	lsr.w	r4, r0, ip
     ae8:	fa05 f301 	lsl.w	r3, r5, r1
     aec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     af0:	fa25 f50c 	lsr.w	r5, r5, ip
     af4:	431c      	orrs	r4, r3
     af6:	0c23      	lsrs	r3, r4, #16
     af8:	fbb5 f9fe 	udiv	r9, r5, lr
     afc:	fa1f f887 	uxth.w	r8, r7
     b00:	fb0e 5519 	mls	r5, lr, r9, r5
     b04:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b08:	fb09 fa08 	mul.w	sl, r9, r8
     b0c:	45aa      	cmp	sl, r5
     b0e:	fa02 f201 	lsl.w	r2, r2, r1
     b12:	fa00 f301 	lsl.w	r3, r0, r1
     b16:	d908      	bls.n	b2a <__udivmoddi4+0x21e>
     b18:	197d      	adds	r5, r7, r5
     b1a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     b1e:	d247      	bcs.n	bb0 <__udivmoddi4+0x2a4>
     b20:	45aa      	cmp	sl, r5
     b22:	d945      	bls.n	bb0 <__udivmoddi4+0x2a4>
     b24:	f1a9 0902 	sub.w	r9, r9, #2
     b28:	443d      	add	r5, r7
     b2a:	eba5 050a 	sub.w	r5, r5, sl
     b2e:	b2a4      	uxth	r4, r4
     b30:	fbb5 f0fe 	udiv	r0, r5, lr
     b34:	fb0e 5510 	mls	r5, lr, r0, r5
     b38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b3c:	fb00 f808 	mul.w	r8, r0, r8
     b40:	45a0      	cmp	r8, r4
     b42:	d907      	bls.n	b54 <__udivmoddi4+0x248>
     b44:	193c      	adds	r4, r7, r4
     b46:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     b4a:	d22d      	bcs.n	ba8 <__udivmoddi4+0x29c>
     b4c:	45a0      	cmp	r8, r4
     b4e:	d92b      	bls.n	ba8 <__udivmoddi4+0x29c>
     b50:	3802      	subs	r0, #2
     b52:	443c      	add	r4, r7
     b54:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b58:	eba4 0408 	sub.w	r4, r4, r8
     b5c:	fba0 8902 	umull	r8, r9, r0, r2
     b60:	454c      	cmp	r4, r9
     b62:	46c6      	mov	lr, r8
     b64:	464d      	mov	r5, r9
     b66:	d319      	bcc.n	b9c <__udivmoddi4+0x290>
     b68:	d016      	beq.n	b98 <__udivmoddi4+0x28c>
     b6a:	b15e      	cbz	r6, b84 <__udivmoddi4+0x278>
     b6c:	ebb3 020e 	subs.w	r2, r3, lr
     b70:	eb64 0405 	sbc.w	r4, r4, r5
     b74:	fa04 fc0c 	lsl.w	ip, r4, ip
     b78:	40ca      	lsrs	r2, r1
     b7a:	ea4c 0202 	orr.w	r2, ip, r2
     b7e:	40cc      	lsrs	r4, r1
     b80:	e9c6 2400 	strd	r2, r4, [r6]
     b84:	2100      	movs	r1, #0
     b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b8a:	4631      	mov	r1, r6
     b8c:	4630      	mov	r0, r6
     b8e:	e70e      	b.n	9ae <__udivmoddi4+0xa2>
     b90:	46ac      	mov	ip, r5
     b92:	e6ed      	b.n	970 <__udivmoddi4+0x64>
     b94:	4618      	mov	r0, r3
     b96:	e701      	b.n	99c <__udivmoddi4+0x90>
     b98:	4543      	cmp	r3, r8
     b9a:	d2e6      	bcs.n	b6a <__udivmoddi4+0x25e>
     b9c:	ebb8 0e02 	subs.w	lr, r8, r2
     ba0:	eb69 0507 	sbc.w	r5, r9, r7
     ba4:	3801      	subs	r0, #1
     ba6:	e7e0      	b.n	b6a <__udivmoddi4+0x25e>
     ba8:	4628      	mov	r0, r5
     baa:	e7d3      	b.n	b54 <__udivmoddi4+0x248>
     bac:	4660      	mov	r0, ip
     bae:	e78f      	b.n	ad0 <__udivmoddi4+0x1c4>
     bb0:	4681      	mov	r9, r0
     bb2:	e7ba      	b.n	b2a <__udivmoddi4+0x21e>
     bb4:	4661      	mov	r1, ip
     bb6:	e777      	b.n	aa8 <__udivmoddi4+0x19c>
     bb8:	4608      	mov	r0, r1
     bba:	e74b      	b.n	a54 <__udivmoddi4+0x148>
     bbc:	f1ac 0c02 	sub.w	ip, ip, #2
     bc0:	443d      	add	r5, r7
     bc2:	e715      	b.n	9f0 <__udivmoddi4+0xe4>
     bc4:	3802      	subs	r0, #2
     bc6:	443c      	add	r4, r7
     bc8:	e726      	b.n	a18 <__udivmoddi4+0x10c>
     bca:	bf00      	nop

00000bcc <__aeabi_idiv0>:
     bcc:	4770      	bx	lr
     bce:	bf00      	nop

00000bd0 <thread_B_code>:
    } 

}

void thread_B_code(void *argA , void *argB, void *argC)
{
     bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bd4:	b08d      	sub	sp, #52	; 0x34
    uint16_t samples[SIZE]={0,0,0,0,0,0,0,0,0,0};
     bd6:	2214      	movs	r2, #20
     bd8:	2100      	movs	r1, #0
     bda:	a802      	add	r0, sp, #8
    uint16_t filteredSamples[SIZE]={0,0,0,0,0,0,0,0,0,0};
     bdc:	f10d 081c 	add.w	r8, sp, #28
    uint16_t samples[SIZE]={0,0,0,0,0,0,0,0,0,0};
     be0:	f007 fb2a 	bl	8238 <memset>
    uint16_t filteredSamples[SIZE]={0,0,0,0,0,0,0,0,0,0};
     be4:	2214      	movs	r2, #20
     be6:	2100      	movs	r1, #0
     be8:	4640      	mov	r0, r8
     bea:	f007 fb25 	bl	8238 <memset>
		 sum+=samples[i];
	 }
	 average=sum/10;
	
	 /* Samples value limits */
	 upperLevel=average*1.1;
     bee:	f20f 0bd8 	addw	fp, pc, #216	; 0xd8
     bf2:	e9db ab00 	ldrd	sl, fp, [fp]
    int8_t index=-1; /* From 1 to 10*/
     bf6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c02:	4835      	ldr	r0, [pc, #212]	; (cd8 <thread_B_code+0x108>)
     c04:	f006 f9a2 	bl	6f4c <z_impl_k_sem_take>
        printk("\nTask B at time: %lld ms",k_uptime_get());
     c08:	f007 f9d3 	bl	7fb2 <k_uptime_get>
     c0c:	4602      	mov	r2, r0
     c0e:	460b      	mov	r3, r1
     c10:	4832      	ldr	r0, [pc, #200]	; (cdc <thread_B_code+0x10c>)
     c12:	f007 fab0 	bl	8176 <printk>
         if(index<SIZE-1){
     c16:	2e08      	cmp	r6, #8
		index++;
     c18:	bfd8      	it	le
     c1a:	3601      	addle	r6, #1
	 samples[index]=sample;
     c1c:	4a30      	ldr	r2, [pc, #192]	; (ce0 <thread_B_code+0x110>)
		index++;
     c1e:	bfd4      	ite	le
     c20:	b276      	sxtble	r6, r6
		index=0;
     c22:	2600      	movgt	r6, #0
	 samples[index]=sample;
     c24:	ab0c      	add	r3, sp, #48	; 0x30
     c26:	eb03 0346 	add.w	r3, r3, r6, lsl #1
     c2a:	8812      	ldrh	r2, [r2, #0]
     c2c:	f823 2c28 	strh.w	r2, [r3, #-40]
	 for(int8_t i=0;i<10;i++){
     c30:	f10d 0908 	add.w	r9, sp, #8
	 samples[index]=sample;
     c34:	464b      	mov	r3, r9
     c36:	240a      	movs	r4, #10
	 int32_t sum=0;
     c38:	2000      	movs	r0, #0
		 sum+=samples[i];
     c3a:	f833 2b02 	ldrh.w	r2, [r3], #2
     c3e:	3c01      	subs	r4, #1
	 for(int8_t i=0;i<10;i++){
     c40:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		 sum+=samples[i];
     c44:	4410      	add	r0, r2
	 for(int8_t i=0;i<10;i++){
     c46:	d1f8      	bne.n	c3a <thread_B_code+0x6a>
	 average=sum/10;
     c48:	250a      	movs	r5, #10
     c4a:	fb90 f0f5 	sdiv	r0, r0, r5
	 upperLevel=average*1.1;
     c4e:	b280      	uxth	r0, r0
     c50:	f7ff fba8 	bl	3a4 <__aeabi_i2d>
     c54:	4602      	mov	r2, r0
     c56:	460b      	mov	r3, r1
     c58:	e9cd 2300 	strd	r2, r3, [sp]
     c5c:	4652      	mov	r2, sl
     c5e:	465b      	mov	r3, fp
     c60:	f7ff fc0a 	bl	478 <__aeabi_dmul>
     c64:	f7ff fe1a 	bl	89c <__aeabi_d2uiz>
	 lowerLevel=average*0.9;
     c68:	a319      	add	r3, pc, #100	; (adr r3, cd0 <thread_B_code+0x100>)
     c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
	 upperLevel=average*1.1;
     c6e:	b287      	uxth	r7, r0
	 lowerLevel=average*0.9;
     c70:	e9dd 0100 	ldrd	r0, r1, [sp]
     c74:	f7ff fc00 	bl	478 <__aeabi_dmul>
     c78:	f7ff fe10 	bl	89c <__aeabi_d2uiz>
     c7c:	b280      	uxth	r0, r0

         uint16_t j=0;
	
	 for(uint8_t i=0;i<10;i++){
		 if(samples[i]>=lowerLevel && samples[i]<=upperLevel){
     c7e:	f839 3b02 	ldrh.w	r3, [r9], #2
     c82:	4283      	cmp	r3, r0
     c84:	d308      	bcc.n	c98 <thread_B_code+0xc8>
     c86:	42bb      	cmp	r3, r7
     c88:	d806      	bhi.n	c98 <thread_B_code+0xc8>
		 	filteredSamples[j]=samples[i];
     c8a:	aa0c      	add	r2, sp, #48	; 0x30
     c8c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		 	j++;
     c90:	3401      	adds	r4, #1
		 	filteredSamples[j]=samples[i];
     c92:	f822 3c14 	strh.w	r3, [r2, #-20]
		 	j++;
     c96:	b2a4      	uxth	r4, r4
	 for(uint8_t i=0;i<10;i++){
     c98:	3d01      	subs	r5, #1
     c9a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
     c9e:	d1ee      	bne.n	c7e <thread_B_code+0xae>
		 }
	 }
         

	 uint16_t sum2=0;
     ca0:	462b      	mov	r3, r5
	
	 for(uint16_t a=0;a<j;a++){
     ca2:	b2aa      	uxth	r2, r5
     ca4:	4294      	cmp	r4, r2
     ca6:	d808      	bhi.n	cba <thread_B_code+0xea>
	 	sum2+=filteredSamples[a];
	 }
          
         if(j>0){
     ca8:	b11c      	cbz	r4, cb2 <thread_B_code+0xe2>
            output=sum2/j;
     caa:	fbb3 f4f4 	udiv	r4, r3, r4
     cae:	4b0d      	ldr	r3, [pc, #52]	; (ce4 <thread_B_code+0x114>)
     cb0:	801c      	strh	r4, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     cb2:	480d      	ldr	r0, [pc, #52]	; (ce8 <thread_B_code+0x118>)
     cb4:	f006 f90c 	bl	6ed0 <z_impl_k_sem_give>
    while(1) {
     cb8:	e79f      	b.n	bfa <thread_B_code+0x2a>
	 	sum2+=filteredSamples[a];
     cba:	f838 2015 	ldrh.w	r2, [r8, r5, lsl #1]
     cbe:	4413      	add	r3, r2
     cc0:	b29b      	uxth	r3, r3
	 for(uint16_t a=0;a<j;a++){
     cc2:	3501      	adds	r5, #1
     cc4:	e7ed      	b.n	ca2 <thread_B_code+0xd2>
     cc6:	bf00      	nop
     cc8:	9999999a 	.word	0x9999999a
     ccc:	3ff19999 	.word	0x3ff19999
     cd0:	cccccccd 	.word	0xcccccccd
     cd4:	3feccccc 	.word	0x3feccccc
     cd8:	200004ec 	.word	0x200004ec
     cdc:	00008e99 	.word	0x00008e99
     ce0:	20000c2c 	.word	0x20000c2c
     ce4:	20000c2a 	.word	0x20000c2a
     ce8:	200004fc 	.word	0x200004fc

00000cec <thread_A_code>:
{
     cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printk("Thread A init (periodic)\n");
     cf0:	4833      	ldr	r0, [pc, #204]	; (dc0 <thread_A_code+0xd4>)
        printk("\n\nTask A at time: %lld ms" ,k_uptime_get());
     cf2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; de8 <thread_A_code+0xfc>
	const struct adc_sequence sequence = {
     cf6:	4e33      	ldr	r6, [pc, #204]	; (dc4 <thread_A_code+0xd8>)
	if (adc_dev == NULL) {
     cf8:	4f33      	ldr	r7, [pc, #204]	; (dc8 <thread_A_code+0xdc>)
{
     cfa:	b087      	sub	sp, #28
    printk("Thread A init (periodic)\n");
     cfc:	f007 fa3b 	bl	8176 <printk>
    release_time = k_uptime_get() + thread_A_period;
     d00:	f007 f957 	bl	7fb2 <k_uptime_get>
     d04:	f110 040a 	adds.w	r4, r0, #10
     d08:	f141 0500 	adc.w	r5, r1, #0
        printk("\n\nTask A at time: %lld ms" ,k_uptime_get());
     d0c:	f007 f951 	bl	7fb2 <k_uptime_get>
     d10:	460b      	mov	r3, r1
     d12:	4602      	mov	r2, r0
     d14:	4640      	mov	r0, r8
     d16:	f007 fa2e 	bl	8176 <printk>
	const struct adc_sequence sequence = {
     d1a:	2214      	movs	r2, #20
     d1c:	2100      	movs	r1, #0
     d1e:	a801      	add	r0, sp, #4
     d20:	f007 fa8a 	bl	8238 <memset>
     d24:	2302      	movs	r3, #2
	if (adc_dev == NULL) {
     d26:	6838      	ldr	r0, [r7, #0]
	const struct adc_sequence sequence = {
     d28:	9304      	str	r3, [sp, #16]
     d2a:	e9cd 3602 	strd	r3, r6, [sp, #8]
     d2e:	230a      	movs	r3, #10
     d30:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
     d34:	b948      	cbnz	r0, d4a <thread_A_code+0x5e>
            printk("adc_sample(): error, must bind to adc first \n\r");
     d36:	4825      	ldr	r0, [pc, #148]	; (dcc <thread_A_code+0xe0>)
     d38:	f007 fa1d 	bl	8176 <printk>
            return -1;
     d3c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
            printk("adc_sample() failed with error code %d\n\r",err);
     d40:	4823      	ldr	r0, [pc, #140]	; (dd0 <thread_A_code+0xe4>)
     d42:	4649      	mov	r1, r9
                printk(": sample is : %4u",sample);
     d44:	f007 fa17 	bl	8176 <printk>
     d48:	e010      	b.n	d6c <thread_A_code+0x80>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     d4a:	6883      	ldr	r3, [r0, #8]
     d4c:	a901      	add	r1, sp, #4
     d4e:	685b      	ldr	r3, [r3, #4]
     d50:	4798      	blx	r3
	if (ret) {
     d52:	4681      	mov	r9, r0
     d54:	b358      	cbz	r0, dae <thread_A_code+0xc2>
            printk("adc_read() failed with code %d\n", ret);
     d56:	4601      	mov	r1, r0
     d58:	481e      	ldr	r0, [pc, #120]	; (dd4 <thread_A_code+0xe8>)
     d5a:	f007 fa0c 	bl	8176 <printk>
        if(err) {
     d5e:	e7ef      	b.n	d40 <thread_A_code+0x54>
                printk("adc reading out of range\n\r");
     d60:	481d      	ldr	r0, [pc, #116]	; (dd8 <thread_A_code+0xec>)
     d62:	f007 fa08 	bl	8176 <printk>
                sample=0;  /* Safety value */
     d66:	4b1d      	ldr	r3, [pc, #116]	; (ddc <thread_A_code+0xf0>)
     d68:	f8a3 9000 	strh.w	r9, [r3]
     d6c:	481c      	ldr	r0, [pc, #112]	; (de0 <thread_A_code+0xf4>)
     d6e:	f006 f8af 	bl	6ed0 <z_impl_k_sem_give>
        fin_time = k_uptime_get();
     d72:	f007 f91e 	bl	7fb2 <k_uptime_get>
     d76:	460b      	mov	r3, r1
        if( fin_time < release_time) {
     d78:	42a0      	cmp	r0, r4
     d7a:	eb73 0105 	sbcs.w	r1, r3, r5
        fin_time = k_uptime_get();
     d7e:	4602      	mov	r2, r0
        if( fin_time < release_time) {
     d80:	dac4      	bge.n	d0c <thread_A_code+0x20>
            k_msleep(release_time - fin_time);
     d82:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     d86:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     d8a:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
     d8e:	f240 30e7 	movw	r0, #999	; 0x3e7
     d92:	2100      	movs	r1, #0
     d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d98:	2300      	movs	r3, #0
     d9a:	fbce 010c 	smlal	r0, r1, lr, ip
     d9e:	f7ff fd9d 	bl	8dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     da2:	f005 ffa3 	bl	6cec <z_impl_k_sleep>
            release_time += thread_A_period;
     da6:	340a      	adds	r4, #10
     da8:	f145 0500 	adc.w	r5, r5, #0
     dac:	e7ae      	b.n	d0c <thread_A_code+0x20>
            if(adc_sample_buffer[0] > 1023) {
     dae:	8831      	ldrh	r1, [r6, #0]
     db0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     db4:	d2d4      	bcs.n	d60 <thread_A_code+0x74>
                sample=adc_sample_buffer[0];
     db6:	4b09      	ldr	r3, [pc, #36]	; (ddc <thread_A_code+0xf0>)
                printk(": sample is : %4u",sample);
     db8:	480a      	ldr	r0, [pc, #40]	; (de4 <thread_A_code+0xf8>)
                sample=adc_sample_buffer[0];
     dba:	8019      	strh	r1, [r3, #0]
                printk(": sample is : %4u",sample);
     dbc:	e7c2      	b.n	d44 <thread_A_code+0x58>
     dbe:	bf00      	nop
     dc0:	00008dc0 	.word	0x00008dc0
     dc4:	20000c28 	.word	0x20000c28
     dc8:	200004e8 	.word	0x200004e8
     dcc:	00008df4 	.word	0x00008df4
     dd0:	00008e43 	.word	0x00008e43
     dd4:	00008e23 	.word	0x00008e23
     dd8:	00008e6c 	.word	0x00008e6c
     ddc:	20000c2c 	.word	0x20000c2c
     de0:	200004ec 	.word	0x200004ec
     de4:	00008e87 	.word	0x00008e87
     de8:	00008dda 	.word	0x00008dda

00000dec <thread_C_code>:

  }
}

void thread_C_code(void *argA , void *argB, void *argC)
{
     dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     df0:	b087      	sub	sp, #28
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     df2:	4835      	ldr	r0, [pc, #212]	; (ec8 <thread_C_code+0xdc>)
     df4:	f004 fae4 	bl	53c0 <z_impl_device_get_binding>
    unsigned int pwmPeriod_us = 1000;       /* PWM priod in us */
    int ret=0;                              /* Generic return value variable */

    /* Return pointer to device structure with the given name */
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
     df8:	4604      	mov	r4, r0
     dfa:	b928      	cbnz	r0, e08 <thread_C_code+0x1c>
	printk("\nError: Failed to bind to PWM0 r");
     dfc:	4833      	ldr	r0, [pc, #204]	; (ecc <thread_C_code+0xe0>)
     dfe:	f007 f9ba 	bl	8176 <printk>
          printk("Error %d: failed to set pulse width\n", ret);
            return;
         }

  }
}
     e02:	b007      	add	sp, #28
     e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    printk("\nThread C init");
     e08:	4831      	ldr	r0, [pc, #196]	; (ed0 <thread_C_code+0xe4>)
     e0a:	f007 f9b4 	bl	8176 <printk>
	return z_impl_k_sem_take(sem, timeout);
     e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     e16:	482f      	ldr	r0, [pc, #188]	; (ed4 <thread_C_code+0xe8>)
     e18:	f006 f898 	bl	6f4c <z_impl_k_sem_take>
        printk("\nTask C at time: %lld ms",k_uptime_get());
     e1c:	f007 f8c9 	bl	7fb2 <k_uptime_get>
     e20:	4602      	mov	r2, r0
     e22:	460b      	mov	r3, r1
     e24:	482c      	ldr	r0, [pc, #176]	; (ed8 <thread_C_code+0xec>)
     e26:	f007 f9a6 	bl	8176 <printk>
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*output)/1023), PWM_POLARITY_NORMAL);
     e2a:	4b2c      	ldr	r3, [pc, #176]	; (edc <thread_C_code+0xf0>)
     e2c:	881d      	ldrh	r5, [r3, #0]
     e2e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
     e32:	437d      	muls	r5, r7
         ret = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN,
     e34:	f240 33ff 	movw	r3, #1023	; 0x3ff
     e38:	fbb5 f5f3 	udiv	r5, r5, r3
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     e3c:	68a3      	ldr	r3, [r4, #8]
     e3e:	aa04      	add	r2, sp, #16
     e40:	685b      	ldr	r3, [r3, #4]
     e42:	210d      	movs	r1, #13
     e44:	4620      	mov	r0, r4
     e46:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     e48:	4680      	mov	r8, r0
     e4a:	b128      	cbz	r0, e58 <thread_C_code+0x6c>
		return -EIO;
     e4c:	f06f 0104 	mvn.w	r1, #4
          printk("Error %d: failed to set pulse width\n", ret);
     e50:	4823      	ldr	r0, [pc, #140]	; (ee0 <thread_C_code+0xf4>)
     e52:	f007 f990 	bl	8176 <printk>
            return;
     e56:	e7d4      	b.n	e02 <thread_C_code+0x16>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     e58:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
     e5c:	fba6 ab07 	umull	sl, fp, r6, r7
     e60:	fb07 bb03 	mla	fp, r7, r3, fp
     e64:	4a1f      	ldr	r2, [pc, #124]	; (ee4 <thread_C_code+0xf8>)
     e66:	9303      	str	r3, [sp, #12]
     e68:	4650      	mov	r0, sl
     e6a:	2300      	movs	r3, #0
     e6c:	4659      	mov	r1, fp
     e6e:	f7ff fd35 	bl	8dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     e72:	4b1d      	ldr	r3, [pc, #116]	; (ee8 <thread_C_code+0xfc>)
     e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e78:	455b      	cmp	r3, fp
     e7a:	bf08      	it	eq
     e7c:	4552      	cmpeq	r2, sl
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     e7e:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     e80:	d202      	bcs.n	e88 <thread_C_code+0x9c>
		return -ENOTSUP;
     e82:	f06f 0185 	mvn.w	r1, #133	; 0x85
     e86:	e7e3      	b.n	e50 <thread_C_code+0x64>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     e88:	9b03      	ldr	r3, [sp, #12]
     e8a:	4a16      	ldr	r2, [pc, #88]	; (ee4 <thread_C_code+0xf8>)
     e8c:	fba5 6706 	umull	r6, r7, r5, r6
     e90:	fb05 7703 	mla	r7, r5, r3, r7
     e94:	4630      	mov	r0, r6
     e96:	2300      	movs	r3, #0
     e98:	4639      	mov	r1, r7
     e9a:	f7ff fd1f 	bl	8dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     e9e:	4a12      	ldr	r2, [pc, #72]	; (ee8 <thread_C_code+0xfc>)
     ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     ea4:	42ba      	cmp	r2, r7
     ea6:	bf08      	it	eq
     ea8:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     eaa:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     eac:	d3e9      	bcc.n	e82 <thread_C_code+0x96>
	return api->pin_set(dev, pwm, period, pulse, flags);
     eae:	68a2      	ldr	r2, [r4, #8]
     eb0:	f8cd 8000 	str.w	r8, [sp]
     eb4:	6815      	ldr	r5, [r2, #0]
     eb6:	210d      	movs	r1, #13
     eb8:	464a      	mov	r2, r9
     eba:	4620      	mov	r0, r4
     ebc:	47a8      	blx	r5
         if (ret) {
     ebe:	4601      	mov	r1, r0
     ec0:	2800      	cmp	r0, #0
     ec2:	d0a4      	beq.n	e0e <thread_C_code+0x22>
     ec4:	e7c4      	b.n	e50 <thread_C_code+0x64>
     ec6:	bf00      	nop
     ec8:	00008eb2 	.word	0x00008eb2
     ecc:	00008eb8 	.word	0x00008eb8
     ed0:	00008ed9 	.word	0x00008ed9
     ed4:	200004fc 	.word	0x200004fc
     ed8:	00008ee8 	.word	0x00008ee8
     edc:	20000c2a 	.word	0x20000c2a
     ee0:	00008f01 	.word	0x00008f01
     ee4:	000f4240 	.word	0x000f4240
     ee8:	000f423f 	.word	0x000f423f

00000eec <main>:
void main(void) {
     eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ef0:	b088      	sub	sp, #32
     ef2:	482b      	ldr	r0, [pc, #172]	; (fa0 <main+0xb4>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     ef4:	4c2b      	ldr	r4, [pc, #172]	; (fa4 <main+0xb8>)
     ef6:	f004 fa63 	bl	53c0 <z_impl_device_get_binding>
     efa:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     efc:	b910      	cbnz	r0, f04 <main+0x18>
        printk("ADC device_get_binding() failed\n");
     efe:	482a      	ldr	r0, [pc, #168]	; (fa8 <main+0xbc>)
     f00:	f007 f939 	bl	8176 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     f04:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     f06:	6883      	ldr	r3, [r0, #8]
     f08:	4928      	ldr	r1, [pc, #160]	; (fac <main+0xc0>)
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	4798      	blx	r3
    if (err) {
     f0e:	4601      	mov	r1, r0
     f10:	b110      	cbz	r0, f18 <main+0x2c>
        printk("adc_channel_setup() failed with error code %d\n", err);
     f12:	4827      	ldr	r0, [pc, #156]	; (fb0 <main+0xc4>)
     f14:	f007 f92f 	bl	8176 <printk>
	return z_impl_k_sem_init(sem, initial_count, limit);
     f18:	2201      	movs	r2, #1
     f1a:	2100      	movs	r1, #0
     f1c:	4825      	ldr	r0, [pc, #148]	; (fb4 <main+0xc8>)
     f1e:	f007 fca6 	bl	886e <z_impl_k_sem_init>
     f22:	2201      	movs	r2, #1
     f24:	2100      	movs	r1, #0
     f26:	4824      	ldr	r0, [pc, #144]	; (fb8 <main+0xcc>)
     f28:	f007 fca1 	bl	886e <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     f2c:	2600      	movs	r6, #0
     f2e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     f30:	2400      	movs	r4, #0
     f32:	2501      	movs	r5, #1
     f34:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f38:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f3c:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f40:	4b1e      	ldr	r3, [pc, #120]	; (fbc <main+0xd0>)
     f42:	491f      	ldr	r1, [pc, #124]	; (fc0 <main+0xd4>)
     f44:	9400      	str	r4, [sp, #0]
     f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f4a:	481e      	ldr	r0, [pc, #120]	; (fc4 <main+0xd8>)
     f4c:	f006 f8ec 	bl	7128 <z_impl_k_thread_create>
     f50:	4b1d      	ldr	r3, [pc, #116]	; (fc8 <main+0xdc>)
     f52:	6018      	str	r0, [r3, #0]
     f54:	4b1d      	ldr	r3, [pc, #116]	; (fcc <main+0xe0>)
     f56:	491e      	ldr	r1, [pc, #120]	; (fd0 <main+0xe4>)
     f58:	9400      	str	r4, [sp, #0]
     f5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f5e:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f62:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f6a:	481a      	ldr	r0, [pc, #104]	; (fd4 <main+0xe8>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     f6c:	f8df 8074 	ldr.w	r8, [pc, #116]	; fe4 <main+0xf8>
     f70:	f006 f8da 	bl	7128 <z_impl_k_thread_create>
     f74:	f8c8 0000 	str.w	r0, [r8]
     f78:	4b17      	ldr	r3, [pc, #92]	; (fd8 <main+0xec>)
     f7a:	4918      	ldr	r1, [pc, #96]	; (fdc <main+0xf0>)
     f7c:	9400      	str	r4, [sp, #0]
     f7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f82:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f86:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f8e:	4814      	ldr	r0, [pc, #80]	; (fe0 <main+0xf4>)
     f90:	f006 f8ca 	bl	7128 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     f94:	f8c8 0000 	str.w	r0, [r8]
} 
     f98:	b008      	add	sp, #32
     f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f9e:	bf00      	nop
     fa0:	00008f26 	.word	0x00008f26
     fa4:	200004e8 	.word	0x200004e8
     fa8:	00008f2c 	.word	0x00008f2c
     fac:	00008db8 	.word	0x00008db8
     fb0:	00008f4d 	.word	0x00008f4d
     fb4:	200004ec 	.word	0x200004ec
     fb8:	200004fc 	.word	0x200004fc
     fbc:	00000ced 	.word	0x00000ced
     fc0:	20001200 	.word	0x20001200
     fc4:	20000240 	.word	0x20000240
     fc8:	2000050c 	.word	0x2000050c
     fcc:	00000bd1 	.word	0x00000bd1
     fd0:	20001620 	.word	0x20001620
     fd4:	200002c0 	.word	0x200002c0
     fd8:	00000ded 	.word	0x00000ded
     fdc:	20001a40 	.word	0x20001a40
     fe0:	20000340 	.word	0x20000340
     fe4:	20000510 	.word	0x20000510

00000fe8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fec:	b091      	sub	sp, #68	; 0x44
     fee:	468b      	mov	fp, r1
     ff0:	9002      	str	r0, [sp, #8]
     ff2:	4692      	mov	sl, r2
     ff4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     ff6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     ff8:	f89a 0000 	ldrb.w	r0, [sl]
     ffc:	b908      	cbnz	r0, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
			OUTC(' ');
			--width;
		}
	}

	return count;
     ffe:	4628      	mov	r0, r5
    1000:	e35e      	b.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
		if (*fp != '%') {
    1002:	2825      	cmp	r0, #37	; 0x25
    1004:	f10a 0701 	add.w	r7, sl, #1
    1008:	d007      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
			OUTC('%');
    100a:	9b02      	ldr	r3, [sp, #8]
    100c:	4659      	mov	r1, fp
    100e:	4798      	blx	r3
    1010:	2800      	cmp	r0, #0
    1012:	f2c0 8355 	blt.w	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    1016:	3501      	adds	r5, #1
			break;
    1018:	e210      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
		} state = {
    101a:	2218      	movs	r2, #24
    101c:	2100      	movs	r1, #0
    101e:	a80a      	add	r0, sp, #40	; 0x28
    1020:	f007 f90a 	bl	8238 <memset>
	if (*sp == '%') {
    1024:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1028:	2b25      	cmp	r3, #37	; 0x25
    102a:	d078      	beq.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
    102c:	2200      	movs	r2, #0
    102e:	4694      	mov	ip, r2
    1030:	4616      	mov	r6, r2
    1032:	4696      	mov	lr, r2
    1034:	4610      	mov	r0, r2
    1036:	4639      	mov	r1, r7
		switch (*sp) {
    1038:	f817 3b01 	ldrb.w	r3, [r7], #1
    103c:	2b2b      	cmp	r3, #43	; 0x2b
    103e:	f000 809d 	beq.w	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
    1042:	f200 8094 	bhi.w	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1046:	2b20      	cmp	r3, #32
    1048:	f000 809b 	beq.w	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    104c:	2b23      	cmp	r3, #35	; 0x23
    104e:	f000 809a 	beq.w	1186 <CONFIG_FPROTECT_BLOCK_SIZE+0x186>
    1052:	b128      	cbz	r0, 1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    1054:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1058:	f040 0004 	orr.w	r0, r0, #4
    105c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1060:	f1be 0f00 	cmp.w	lr, #0
    1064:	d005      	beq.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
    1066:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    106a:	f040 0008 	orr.w	r0, r0, #8
    106e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1072:	b12e      	cbz	r6, 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    1074:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1078:	f040 0010 	orr.w	r0, r0, #16
    107c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1080:	f1bc 0f00 	cmp.w	ip, #0
    1084:	d005      	beq.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
    1086:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    108a:	f040 0020 	orr.w	r0, r0, #32
    108e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1092:	b12a      	cbz	r2, 10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
    1094:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    109c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    10a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    10a4:	f002 0044 	and.w	r0, r2, #68	; 0x44
    10a8:	2844      	cmp	r0, #68	; 0x44
    10aa:	d103      	bne.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
		conv->flag_zero = false;
    10ac:	f36f 1286 	bfc	r2, #6, #1
    10b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    10b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    10b8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    10ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    10be:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    10c2:	d17b      	bne.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
		conv->width_star = true;
    10c4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    10c8:	f042 0201 	orr.w	r2, r2, #1
    10cc:	1c4b      	adds	r3, r1, #1
    10ce:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    10d2:	781a      	ldrb	r2, [r3, #0]
    10d4:	2a2e      	cmp	r2, #46	; 0x2e
    10d6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    10da:	bf0c      	ite	eq
    10dc:	2101      	moveq	r1, #1
    10de:	2100      	movne	r1, #0
    10e0:	f361 0241 	bfi	r2, r1, #1, #1
    10e4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    10e8:	d174      	bne.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
	if (*sp == '*') {
    10ea:	785a      	ldrb	r2, [r3, #1]
    10ec:	2a2a      	cmp	r2, #42	; 0x2a
    10ee:	d06a      	beq.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
    10f0:	3301      	adds	r3, #1
	size_t val = 0;
    10f2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    10f4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    10f6:	4618      	mov	r0, r3
    10f8:	f810 2b01 	ldrb.w	r2, [r0], #1
    10fc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1100:	2f09      	cmp	r7, #9
    1102:	f240 808e 	bls.w	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
	conv->unsupported |= ((conv->prec_value < 0)
    1106:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    110a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    110c:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1110:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1114:	f361 0241 	bfi	r2, r1, #1, #1
    1118:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    111c:	e05a      	b.n	11d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d4>
		conv->specifier = *sp++;
    111e:	f10a 0702 	add.w	r7, sl, #2
    1122:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1126:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    112a:	07d9      	lsls	r1, r3, #31
    112c:	f140 8149 	bpl.w	13c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c2>
			width = va_arg(ap, int);
    1130:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1134:	f1b9 0f00 	cmp.w	r9, #0
    1138:	da07      	bge.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
				conv->flag_dash = true;
    113a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    113e:	f042 0204 	orr.w	r2, r2, #4
    1142:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1146:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    114a:	075a      	lsls	r2, r3, #29
    114c:	f140 8142 	bpl.w	13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>
			int arg = va_arg(ap, int);
    1150:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1154:	f1b8 0f00 	cmp.w	r8, #0
    1158:	f280 8141 	bge.w	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
				conv->prec_present = false;
    115c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1160:	f36f 0341 	bfc	r3, #1, #1
    1164:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1168:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    116c:	e137      	b.n	13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
		switch (*sp) {
    116e:	2b2d      	cmp	r3, #45	; 0x2d
    1170:	d00c      	beq.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    1172:	2b30      	cmp	r3, #48	; 0x30
    1174:	f47f af6d 	bne.w	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
			conv->flag_zero = true;
    1178:	2201      	movs	r2, #1
	} while (loop);
    117a:	e75c      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
			conv->flag_plus = true;
    117c:	f04f 0e01 	mov.w	lr, #1
    1180:	e759      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
			conv->flag_space = true;
    1182:	2601      	movs	r6, #1
    1184:	e757      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
			conv->flag_hash = true;
    1186:	f04f 0c01 	mov.w	ip, #1
    118a:	e754      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
		switch (*sp) {
    118c:	2001      	movs	r0, #1
    118e:	e752      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
		val = 10U * val + *sp++ - '0';
    1190:	fb0c 0202 	mla	r2, ip, r2, r0
    1194:	3a30      	subs	r2, #48	; 0x30
    1196:	4633      	mov	r3, r6
    1198:	461e      	mov	r6, r3
    119a:	f816 0b01 	ldrb.w	r0, [r6], #1
    119e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    11a2:	2f09      	cmp	r7, #9
    11a4:	d9f4      	bls.n	1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
	if (sp != wp) {
    11a6:	4299      	cmp	r1, r3
    11a8:	d093      	beq.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
		conv->unsupported |= ((conv->width_value < 0)
    11aa:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    11ae:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    11b0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    11b2:	f362 0141 	bfi	r1, r2, #1, #1
    11b6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    11ba:	e78a      	b.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    11bc:	460b      	mov	r3, r1
	size_t val = 0;
    11be:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    11c0:	f04f 0c0a 	mov.w	ip, #10
    11c4:	e7e8      	b.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
		conv->prec_star = true;
    11c6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    11ca:	f042 0204 	orr.w	r2, r2, #4
    11ce:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    11d2:	3302      	adds	r3, #2
	switch (*sp) {
    11d4:	461f      	mov	r7, r3
    11d6:	f817 2b01 	ldrb.w	r2, [r7], #1
    11da:	2a6c      	cmp	r2, #108	; 0x6c
    11dc:	d041      	beq.n	1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
    11de:	d825      	bhi.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
    11e0:	2a68      	cmp	r2, #104	; 0x68
    11e2:	d02b      	beq.n	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    11e4:	2a6a      	cmp	r2, #106	; 0x6a
    11e6:	d046      	beq.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
    11e8:	2a4c      	cmp	r2, #76	; 0x4c
    11ea:	d04c      	beq.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
    11ec:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    11ee:	f817 2b01 	ldrb.w	r2, [r7], #1
    11f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11f6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    11fa:	2a78      	cmp	r2, #120	; 0x78
    11fc:	f200 80d9 	bhi.w	13b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b2>
    1200:	2a57      	cmp	r2, #87	; 0x57
    1202:	d84d      	bhi.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    1204:	2a41      	cmp	r2, #65	; 0x41
    1206:	d003      	beq.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
    1208:	3a45      	subs	r2, #69	; 0x45
    120a:	2a02      	cmp	r2, #2
    120c:	f200 80d1 	bhi.w	13b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b2>
		conv->specifier_cat = SPECIFIER_FP;
    1210:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1214:	2204      	movs	r2, #4
    1216:	f362 0302 	bfi	r3, r2, #0, #3
    121a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    121e:	2301      	movs	r3, #1
			break;
    1220:	e09e      	b.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
		val = 10U * val + *sp++ - '0';
    1222:	fb06 2101 	mla	r1, r6, r1, r2
    1226:	3930      	subs	r1, #48	; 0x30
    1228:	4603      	mov	r3, r0
    122a:	e764      	b.n	10f6 <CONFIG_FPROTECT_BLOCK_SIZE+0xf6>
	switch (*sp) {
    122c:	2a74      	cmp	r2, #116	; 0x74
    122e:	d026      	beq.n	127e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
    1230:	2a7a      	cmp	r2, #122	; 0x7a
    1232:	d1db      	bne.n	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
		conv->length_mod = LENGTH_Z;
    1234:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1238:	2206      	movs	r2, #6
    123a:	e00d      	b.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
		if (*++sp == 'h') {
    123c:	785a      	ldrb	r2, [r3, #1]
    123e:	2a68      	cmp	r2, #104	; 0x68
    1240:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1244:	d106      	bne.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
			conv->length_mod = LENGTH_HH;
    1246:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1248:	f361 02c6 	bfi	r2, r1, #3, #4
    124c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1250:	1c9f      	adds	r7, r3, #2
    1252:	e7cc      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
			conv->length_mod = LENGTH_H;
    1254:	4613      	mov	r3, r2
    1256:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1258:	f362 03c6 	bfi	r3, r2, #3, #4
    125c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1260:	e7c5      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
		if (*++sp == 'l') {
    1262:	785a      	ldrb	r2, [r3, #1]
    1264:	2a6c      	cmp	r2, #108	; 0x6c
    1266:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    126a:	d101      	bne.n	1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>
			conv->length_mod = LENGTH_LL;
    126c:	2104      	movs	r1, #4
    126e:	e7eb      	b.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
			conv->length_mod = LENGTH_L;
    1270:	4613      	mov	r3, r2
    1272:	2203      	movs	r2, #3
    1274:	e7f0      	b.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
		conv->length_mod = LENGTH_J;
    1276:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    127a:	2205      	movs	r2, #5
    127c:	e7ec      	b.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
		conv->length_mod = LENGTH_T;
    127e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1282:	2207      	movs	r2, #7
    1284:	e7e8      	b.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
		conv->unsupported = true;
    1286:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    128a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    128e:	f023 0302 	bic.w	r3, r3, #2
    1292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1296:	f043 0302 	orr.w	r3, r3, #2
    129a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    129e:	e7a6      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    12a0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    12a4:	2920      	cmp	r1, #32
    12a6:	f200 8084 	bhi.w	13b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b2>
    12aa:	a001      	add	r0, pc, #4	; (adr r0, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    12ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    12b0:	00001375 	.word	0x00001375
    12b4:	000013b3 	.word	0x000013b3
    12b8:	000013b3 	.word	0x000013b3
    12bc:	000013b3 	.word	0x000013b3
    12c0:	000013b3 	.word	0x000013b3
    12c4:	000013b3 	.word	0x000013b3
    12c8:	000013b3 	.word	0x000013b3
    12cc:	000013b3 	.word	0x000013b3
    12d0:	000013b3 	.word	0x000013b3
    12d4:	00001211 	.word	0x00001211
    12d8:	000013b3 	.word	0x000013b3
    12dc:	00001375 	.word	0x00001375
    12e0:	00001335 	.word	0x00001335
    12e4:	00001211 	.word	0x00001211
    12e8:	00001211 	.word	0x00001211
    12ec:	00001211 	.word	0x00001211
    12f0:	000013b3 	.word	0x000013b3
    12f4:	00001335 	.word	0x00001335
    12f8:	000013b3 	.word	0x000013b3
    12fc:	000013b3 	.word	0x000013b3
    1300:	000013b3 	.word	0x000013b3
    1304:	000013b3 	.word	0x000013b3
    1308:	0000137d 	.word	0x0000137d
    130c:	00001375 	.word	0x00001375
    1310:	00001399 	.word	0x00001399
    1314:	000013b3 	.word	0x000013b3
    1318:	000013b3 	.word	0x000013b3
    131c:	00001399 	.word	0x00001399
    1320:	000013b3 	.word	0x000013b3
    1324:	00001375 	.word	0x00001375
    1328:	000013b3 	.word	0x000013b3
    132c:	000013b3 	.word	0x000013b3
    1330:	00001375 	.word	0x00001375
		conv->specifier_cat = SPECIFIER_SINT;
    1334:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1338:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    133a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    133e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1342:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1344:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1348:	bf02      	ittt	eq
    134a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    134e:	f041 0101 	orreq.w	r1, r1, #1
    1352:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1356:	2a63      	cmp	r2, #99	; 0x63
    1358:	d131      	bne.n	13be <CONFIG_FPROTECT_BLOCK_SIZE+0x3be>
			unsupported = (conv->length_mod != LENGTH_NONE);
    135a:	3b00      	subs	r3, #0
    135c:	bf18      	it	ne
    135e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1360:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1364:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1368:	430b      	orrs	r3, r1
    136a:	f363 0241 	bfi	r2, r3, #1, #1
    136e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1372:	e6d8      	b.n	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
		conv->specifier_cat = SPECIFIER_UINT;
    1374:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1378:	2002      	movs	r0, #2
    137a:	e7de      	b.n	133a <CONFIG_FPROTECT_BLOCK_SIZE+0x33a>
		conv->specifier_cat = SPECIFIER_PTR;
    137c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1380:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1384:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1388:	2103      	movs	r1, #3
    138a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    138e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1390:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1394:	4143      	adcs	r3, r0
    1396:	e7e3      	b.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
		conv->specifier_cat = SPECIFIER_PTR;
    1398:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    139c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    139e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    13a2:	f361 0202 	bfi	r2, r1, #0, #3
    13a6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    13aa:	bf14      	ite	ne
    13ac:	2301      	movne	r3, #1
    13ae:	2300      	moveq	r3, #0
    13b0:	e7d6      	b.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
		conv->invalid = true;
    13b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    13b6:	f043 0301 	orr.w	r3, r3, #1
    13ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    13be:	2300      	movs	r3, #0
    13c0:	e7ce      	b.n	1360 <CONFIG_FPROTECT_BLOCK_SIZE+0x360>
		} else if (conv->width_present) {
    13c2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    13c6:	2a00      	cmp	r2, #0
			width = conv->width_value;
    13c8:	bfb4      	ite	lt
    13ca:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    13ce:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    13d2:	e6ba      	b.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
		} else if (conv->prec_present) {
    13d4:	079b      	lsls	r3, r3, #30
    13d6:	f57f aec7 	bpl.w	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
			precision = conv->prec_value;
    13da:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    13de:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    13e2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    13e4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    13e8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    13ec:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    13f0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    13f2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    13f6:	d136      	bne.n	1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
			switch (length_mod) {
    13f8:	1ed3      	subs	r3, r2, #3
    13fa:	2b04      	cmp	r3, #4
    13fc:	d820      	bhi.n	1440 <CONFIG_FPROTECT_BLOCK_SIZE+0x440>
    13fe:	e8df f003 	tbb	[pc, r3]
    1402:	0703      	.short	0x0703
    1404:	1f07      	.short	0x1f07
    1406:	1f          	.byte	0x1f
    1407:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1408:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    140c:	17c1      	asrs	r1, r0, #31
    140e:	e004      	b.n	141a <CONFIG_FPROTECT_BLOCK_SIZE+0x41a>
					(sint_value_type)va_arg(ap, intmax_t);
    1410:	3407      	adds	r4, #7
    1412:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1416:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    141a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    141e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1422:	f013 0603 	ands.w	r6, r3, #3
    1426:	d054      	beq.n	14d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d2>
			OUTS(sp, fp);
    1428:	9802      	ldr	r0, [sp, #8]
    142a:	463b      	mov	r3, r7
    142c:	4652      	mov	r2, sl
    142e:	4659      	mov	r1, fp
    1430:	f006 fe1f 	bl	8072 <outs>
    1434:	2800      	cmp	r0, #0
    1436:	f2c0 8143 	blt.w	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    143a:	4405      	add	r5, r0
			continue;
    143c:	46ba      	mov	sl, r7
    143e:	e5db      	b.n	ff8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1440:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1444:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1446:	ea4f 71e0 	mov.w	r1, r0, asr #31
    144a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    144e:	d105      	bne.n	145c <CONFIG_FPROTECT_BLOCK_SIZE+0x45c>
				value->uint = (unsigned char)value->uint;
    1450:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1454:	930a      	str	r3, [sp, #40]	; 0x28
    1456:	2300      	movs	r3, #0
    1458:	930b      	str	r3, [sp, #44]	; 0x2c
    145a:	e7e0      	b.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
			} else if (length_mod == LENGTH_H) {
    145c:	2a02      	cmp	r2, #2
    145e:	d1de      	bne.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
				value->sint = (short)value->sint;
    1460:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1464:	e7d2      	b.n	140c <CONFIG_FPROTECT_BLOCK_SIZE+0x40c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1466:	2b02      	cmp	r3, #2
    1468:	d123      	bne.n	14b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b2>
			switch (length_mod) {
    146a:	1ed3      	subs	r3, r2, #3
    146c:	2b04      	cmp	r3, #4
    146e:	d813      	bhi.n	1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
    1470:	e8df f003 	tbb	[pc, r3]
    1474:	120a0a03 	.word	0x120a0a03
    1478:	12          	.byte	0x12
    1479:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    147a:	6820      	ldr	r0, [r4, #0]
    147c:	900a      	str	r0, [sp, #40]	; 0x28
    147e:	2100      	movs	r1, #0
    1480:	1d23      	adds	r3, r4, #4
    1482:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1484:	461c      	mov	r4, r3
    1486:	e7ca      	b.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
					(uint_value_type)va_arg(ap,
    1488:	3407      	adds	r4, #7
    148a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    148e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    1492:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1496:	e7f5      	b.n	1484 <CONFIG_FPROTECT_BLOCK_SIZE+0x484>
					(uint_value_type)va_arg(ap, size_t);
    1498:	f854 3b04 	ldr.w	r3, [r4], #4
    149c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    149e:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    14a0:	f04f 0300 	mov.w	r3, #0
    14a4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    14a6:	d0d3      	beq.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
			} else if (length_mod == LENGTH_H) {
    14a8:	2a02      	cmp	r2, #2
    14aa:	d1b8      	bne.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
				value->uint = (unsigned short)value->uint;
    14ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    14b0:	e7d0      	b.n	1454 <CONFIG_FPROTECT_BLOCK_SIZE+0x454>
		} else if (specifier_cat == SPECIFIER_FP) {
    14b2:	2b04      	cmp	r3, #4
    14b4:	d107      	bne.n	14c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c6>
			if (length_mod == LENGTH_UPPER_L) {
    14b6:	3407      	adds	r4, #7
    14b8:	f024 0407 	bic.w	r4, r4, #7
    14bc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    14c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    14c4:	e7ab      	b.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
		} else if (specifier_cat == SPECIFIER_PTR) {
    14c6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    14c8:	bf04      	itt	eq
    14ca:	f854 3b04 	ldreq.w	r3, [r4], #4
    14ce:	930a      	streq	r3, [sp, #40]	; 0x28
    14d0:	e7a5      	b.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
		switch (conv->specifier) {
    14d2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    14d6:	2878      	cmp	r0, #120	; 0x78
    14d8:	d8b0      	bhi.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    14da:	2862      	cmp	r0, #98	; 0x62
    14dc:	d822      	bhi.n	1524 <CONFIG_FPROTECT_BLOCK_SIZE+0x524>
    14de:	2825      	cmp	r0, #37	; 0x25
    14e0:	f43f ad93 	beq.w	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
    14e4:	2858      	cmp	r0, #88	; 0x58
    14e6:	d1a9      	bne.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
			bps = encode_uint(value->uint, conv, buf, bpe);
    14e8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    14ec:	9300      	str	r3, [sp, #0]
    14ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    14f2:	ab04      	add	r3, sp, #16
    14f4:	aa0c      	add	r2, sp, #48	; 0x30
    14f6:	f006 fd71 	bl	7fdc <encode_uint>
    14fa:	4682      	mov	sl, r0
			if (precision >= 0) {
    14fc:	f1b8 0f00 	cmp.w	r8, #0
    1500:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1504:	db0c      	blt.n	1520 <CONFIG_FPROTECT_BLOCK_SIZE+0x520>
				conv->flag_zero = false;
    1506:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    150a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    150e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1512:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1514:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1518:	d902      	bls.n	1520 <CONFIG_FPROTECT_BLOCK_SIZE+0x520>
					conv->pad0_value = precision - (int)len;
    151a:	eba8 0303 	sub.w	r3, r8, r3
    151e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1520:	4680      	mov	r8, r0
    1522:	e03d      	b.n	15a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a0>
    1524:	3863      	subs	r0, #99	; 0x63
    1526:	2815      	cmp	r0, #21
    1528:	d888      	bhi.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    152a:	a101      	add	r1, pc, #4	; (adr r1, 1530 <CONFIG_FPROTECT_BLOCK_SIZE+0x530>)
    152c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1530:	000015b1 	.word	0x000015b1
    1534:	00001615 	.word	0x00001615
    1538:	0000143d 	.word	0x0000143d
    153c:	0000143d 	.word	0x0000143d
    1540:	0000143d 	.word	0x0000143d
    1544:	0000143d 	.word	0x0000143d
    1548:	00001615 	.word	0x00001615
    154c:	0000143d 	.word	0x0000143d
    1550:	0000143d 	.word	0x0000143d
    1554:	0000143d 	.word	0x0000143d
    1558:	0000143d 	.word	0x0000143d
    155c:	00001673 	.word	0x00001673
    1560:	00001641 	.word	0x00001641
    1564:	00001645 	.word	0x00001645
    1568:	0000143d 	.word	0x0000143d
    156c:	0000143d 	.word	0x0000143d
    1570:	00001589 	.word	0x00001589
    1574:	0000143d 	.word	0x0000143d
    1578:	00001641 	.word	0x00001641
    157c:	0000143d 	.word	0x0000143d
    1580:	0000143d 	.word	0x0000143d
    1584:	00001641 	.word	0x00001641
			if (precision >= 0) {
    1588:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    158c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1590:	db0a      	blt.n	15a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a8>
				len = strnlen(bps, precision);
    1592:	4641      	mov	r1, r8
    1594:	4650      	mov	r0, sl
    1596:	f006 fe2f 	bl	81f8 <strnlen>
			bpe = bps + len;
    159a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    159e:	2600      	movs	r6, #0
		if (bps == NULL) {
    15a0:	f1ba 0f00 	cmp.w	sl, #0
    15a4:	d10c      	bne.n	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
    15a6:	e749      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
				len = strlen(bps);
    15a8:	4650      	mov	r0, sl
    15aa:	f006 fe1e 	bl	81ea <strlen>
    15ae:	e7f4      	b.n	159a <CONFIG_FPROTECT_BLOCK_SIZE+0x59a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    15b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    15b2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    15b6:	2600      	movs	r6, #0
			bpe = buf + 1;
    15b8:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    15bc:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    15c0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    15c4:	b106      	cbz	r6, 15c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c8>
			nj_len += 1U;
    15c6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    15c8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    15cc:	06d0      	lsls	r0, r2, #27
    15ce:	d56b      	bpl.n	16a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a8>
			nj_len += 2U;
    15d0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    15d2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    15d4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    15d6:	bf48      	it	mi
    15d8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    15da:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    15dc:	bf48      	it	mi
    15de:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    15e0:	f1b9 0f00 	cmp.w	r9, #0
    15e4:	dd79      	ble.n	16da <CONFIG_FPROTECT_BLOCK_SIZE+0x6da>
			if (!conv->flag_dash) {
    15e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    15ea:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    15ee:	f3c2 0380 	ubfx	r3, r2, #2, #1
    15f2:	9303      	str	r3, [sp, #12]
    15f4:	0753      	lsls	r3, r2, #29
    15f6:	d470      	bmi.n	16da <CONFIG_FPROTECT_BLOCK_SIZE+0x6da>
				if (conv->flag_zero) {
    15f8:	0650      	lsls	r0, r2, #25
    15fa:	d564      	bpl.n	16c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c6>
					if (sign != 0) {
    15fc:	b146      	cbz	r6, 1610 <CONFIG_FPROTECT_BLOCK_SIZE+0x610>
						OUTC(sign);
    15fe:	9b02      	ldr	r3, [sp, #8]
    1600:	4659      	mov	r1, fp
    1602:	4630      	mov	r0, r6
    1604:	4798      	blx	r3
    1606:	2800      	cmp	r0, #0
    1608:	db5a      	blt.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
						sign = 0;
    160a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    160c:	3501      	adds	r5, #1
						sign = 0;
    160e:	461e      	mov	r6, r3
					pad = '0';
    1610:	2330      	movs	r3, #48	; 0x30
    1612:	e059      	b.n	16c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c8>
			if (conv->flag_plus) {
    1614:	071e      	lsls	r6, r3, #28
    1616:	d411      	bmi.n	163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>
				sign = ' ';
    1618:	f013 0610 	ands.w	r6, r3, #16
    161c:	bf18      	it	ne
    161e:	2620      	movne	r6, #32
			sint = value->sint;
    1620:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1624:	2a00      	cmp	r2, #0
    1626:	f173 0100 	sbcs.w	r1, r3, #0
    162a:	f6bf af5d 	bge.w	14e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e8>
				value->uint = (uint_value_type)-sint;
    162e:	4252      	negs	r2, r2
    1630:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1634:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1638:	262d      	movs	r6, #45	; 0x2d
    163a:	e755      	b.n	14e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e8>
				sign = '+';
    163c:	262b      	movs	r6, #43	; 0x2b
    163e:	e7ef      	b.n	1620 <CONFIG_FPROTECT_BLOCK_SIZE+0x620>
		switch (conv->specifier) {
    1640:	2600      	movs	r6, #0
    1642:	e751      	b.n	14e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e8>
			if (value->ptr != NULL) {
    1644:	980a      	ldr	r0, [sp, #40]	; 0x28
    1646:	b348      	cbz	r0, 169c <CONFIG_FPROTECT_BLOCK_SIZE+0x69c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1648:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    164c:	9300      	str	r3, [sp, #0]
    164e:	aa0c      	add	r2, sp, #48	; 0x30
    1650:	ab04      	add	r3, sp, #16
    1652:	2100      	movs	r1, #0
    1654:	f006 fcc2 	bl	7fdc <encode_uint>
				conv->altform_0c = true;
    1658:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    165c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1660:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1664:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1668:	4682      	mov	sl, r0
				conv->altform_0c = true;
    166a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    166e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1670:	e744      	b.n	14fc <CONFIG_FPROTECT_BLOCK_SIZE+0x4fc>
				store_count(conv, value->ptr, count);
    1672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1674:	2a07      	cmp	r2, #7
    1676:	f63f aee1 	bhi.w	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    167a:	e8df f002 	tbb	[pc, r2]
    167e:	040d      	.short	0x040d
    1680:	08080d06 	.word	0x08080d06
    1684:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1686:	701d      	strb	r5, [r3, #0]
		break;
    1688:	e6d8      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
		*(short *)dp = (short)count;
    168a:	801d      	strh	r5, [r3, #0]
		break;
    168c:	e6d6      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
		*(intmax_t *)dp = (intmax_t)count;
    168e:	4628      	mov	r0, r5
    1690:	17e9      	asrs	r1, r5, #31
    1692:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1696:	e6d1      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1698:	601d      	str	r5, [r3, #0]
		break;
    169a:	e6cf      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
			bpe = bps + 5;
    169c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1764 <CONFIG_FPROTECT_BLOCK_SIZE+0x764>
    16a0:	4606      	mov	r6, r0
			bps = "(nil)";
    16a2:	f1a8 0a05 	sub.w	sl, r8, #5
    16a6:	e78b      	b.n	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
		} else if (conv->altform_0) {
    16a8:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    16aa:	bf48      	it	mi
    16ac:	3301      	addmi	r3, #1
    16ae:	e790      	b.n	15d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d2>
					OUTC(pad);
    16b0:	4618      	mov	r0, r3
    16b2:	9303      	str	r3, [sp, #12]
    16b4:	4659      	mov	r1, fp
    16b6:	9b02      	ldr	r3, [sp, #8]
    16b8:	4798      	blx	r3
    16ba:	2800      	cmp	r0, #0
    16bc:	9b03      	ldr	r3, [sp, #12]
    16be:	da04      	bge.n	16ca <CONFIG_FPROTECT_BLOCK_SIZE+0x6ca>
#undef OUTS
#undef OUTC
}
    16c0:	b011      	add	sp, #68	; 0x44
    16c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    16c6:	2320      	movs	r3, #32
    16c8:	444d      	add	r5, r9
    16ca:	464a      	mov	r2, r9
				while (width-- > 0) {
    16cc:	2a00      	cmp	r2, #0
    16ce:	eba5 0109 	sub.w	r1, r5, r9
    16d2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    16d6:	dceb      	bgt.n	16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>
    16d8:	460d      	mov	r5, r1
		if (sign != 0) {
    16da:	b136      	cbz	r6, 16ea <CONFIG_FPROTECT_BLOCK_SIZE+0x6ea>
			OUTC(sign);
    16dc:	9b02      	ldr	r3, [sp, #8]
    16de:	4659      	mov	r1, fp
    16e0:	4630      	mov	r0, r6
    16e2:	4798      	blx	r3
    16e4:	2800      	cmp	r0, #0
    16e6:	dbeb      	blt.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    16e8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    16ea:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    16ee:	06d9      	lsls	r1, r3, #27
    16f0:	d401      	bmi.n	16f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f6>
    16f2:	071a      	lsls	r2, r3, #28
    16f4:	d506      	bpl.n	1704 <CONFIG_FPROTECT_BLOCK_SIZE+0x704>
				OUTC('0');
    16f6:	9b02      	ldr	r3, [sp, #8]
    16f8:	4659      	mov	r1, fp
    16fa:	2030      	movs	r0, #48	; 0x30
    16fc:	4798      	blx	r3
    16fe:	2800      	cmp	r0, #0
    1700:	dbde      	blt.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    1702:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1704:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1708:	06db      	lsls	r3, r3, #27
    170a:	d507      	bpl.n	171c <CONFIG_FPROTECT_BLOCK_SIZE+0x71c>
				OUTC(conv->specifier);
    170c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1710:	9b02      	ldr	r3, [sp, #8]
    1712:	4659      	mov	r1, fp
    1714:	4798      	blx	r3
    1716:	2800      	cmp	r0, #0
    1718:	dbd2      	blt.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    171a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    171c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    171e:	442e      	add	r6, r5
    1720:	1b73      	subs	r3, r6, r5
    1722:	2b00      	cmp	r3, #0
    1724:	dc16      	bgt.n	1754 <CONFIG_FPROTECT_BLOCK_SIZE+0x754>
			OUTS(bps, bpe);
    1726:	9802      	ldr	r0, [sp, #8]
    1728:	4643      	mov	r3, r8
    172a:	4652      	mov	r2, sl
    172c:	4659      	mov	r1, fp
    172e:	f006 fca0 	bl	8072 <outs>
    1732:	2800      	cmp	r0, #0
    1734:	dbc4      	blt.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    1736:	4405      	add	r5, r0
		while (width > 0) {
    1738:	44a9      	add	r9, r5
    173a:	eba9 0305 	sub.w	r3, r9, r5
    173e:	2b00      	cmp	r3, #0
    1740:	f77f ae7c 	ble.w	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
			OUTC(' ');
    1744:	9b02      	ldr	r3, [sp, #8]
    1746:	4659      	mov	r1, fp
    1748:	2020      	movs	r0, #32
    174a:	4798      	blx	r3
    174c:	2800      	cmp	r0, #0
    174e:	dbb7      	blt.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    1750:	3501      	adds	r5, #1
			--width;
    1752:	e7f2      	b.n	173a <CONFIG_FPROTECT_BLOCK_SIZE+0x73a>
				OUTC('0');
    1754:	9b02      	ldr	r3, [sp, #8]
    1756:	4659      	mov	r1, fp
    1758:	2030      	movs	r0, #48	; 0x30
    175a:	4798      	blx	r3
    175c:	2800      	cmp	r0, #0
    175e:	dbaf      	blt.n	16c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c0>
    1760:	3501      	adds	r5, #1
    1762:	e7dd      	b.n	1720 <CONFIG_FPROTECT_BLOCK_SIZE+0x720>
    1764:	00008f81 	.word	0x00008f81

00001768 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1768:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    176a:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    176c:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    176e:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    1772:	2c03      	cmp	r4, #3
{
    1774:	4605      	mov	r5, r0
	switch (method) {
    1776:	d002      	beq.n	177e <sys_notify_finalize+0x16>
    1778:	b12c      	cbz	r4, 1786 <sys_notify_finalize+0x1e>
    177a:	2000      	movs	r0, #0
    177c:	e000      	b.n	1780 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    177e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1780:	2300      	movs	r3, #0
    1782:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1784:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    1786:	4a05      	ldr	r2, [pc, #20]	; (179c <sys_notify_finalize+0x34>)
    1788:	4905      	ldr	r1, [pc, #20]	; (17a0 <sys_notify_finalize+0x38>)
    178a:	4806      	ldr	r0, [pc, #24]	; (17a4 <sys_notify_finalize+0x3c>)
    178c:	2345      	movs	r3, #69	; 0x45
    178e:	f006 fcf2 	bl	8176 <printk>
    1792:	4802      	ldr	r0, [pc, #8]	; (179c <sys_notify_finalize+0x34>)
    1794:	2145      	movs	r1, #69	; 0x45
    1796:	f006 fc1a 	bl	7fce <assert_post_action>
    179a:	e7ee      	b.n	177a <sys_notify_finalize+0x12>
    179c:	00008f82 	.word	0x00008f82
    17a0:	0000978b 	.word	0x0000978b
    17a4:	00008fa5 	.word	0x00008fa5

000017a8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    17a8:	4801      	ldr	r0, [pc, #4]	; (17b0 <nrf_cc3xx_platform_abort_init+0x8>)
    17aa:	f006 ba6f 	b.w	7c8c <nrf_cc3xx_platform_set_abort>
    17ae:	bf00      	nop
    17b0:	00008bb8 	.word	0x00008bb8

000017b4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17b4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    17b6:	b1d0      	cbz	r0, 17ee <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    17b8:	6843      	ldr	r3, [r0, #4]
    17ba:	2b04      	cmp	r3, #4
    17bc:	d111      	bne.n	17e2 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    17be:	2200      	movs	r2, #0
    17c0:	6803      	ldr	r3, [r0, #0]
    17c2:	f3bf 8f5b 	dmb	ish
    17c6:	e853 1f00 	ldrex	r1, [r3]
    17ca:	2901      	cmp	r1, #1
    17cc:	d103      	bne.n	17d6 <mutex_unlock_platform+0x22>
    17ce:	e843 2000 	strex	r0, r2, [r3]
    17d2:	2800      	cmp	r0, #0
    17d4:	d1f7      	bne.n	17c6 <mutex_unlock_platform+0x12>
    17d6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    17da:	4807      	ldr	r0, [pc, #28]	; (17f8 <mutex_unlock_platform+0x44>)
    17dc:	bf08      	it	eq
    17de:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    17e0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    17e2:	b13b      	cbz	r3, 17f4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    17e4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    17e6:	f004 f943 	bl	5a70 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    17ea:	2000      	movs	r0, #0
    17ec:	e7f8      	b.n	17e0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    17ee:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    17f2:	e7f5      	b.n	17e0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    17f4:	4801      	ldr	r0, [pc, #4]	; (17fc <mutex_unlock_platform+0x48>)
    17f6:	e7f3      	b.n	17e0 <mutex_unlock_platform+0x2c>
    17f8:	ffff8fe9 	.word	0xffff8fe9
    17fc:	ffff8fea 	.word	0xffff8fea

00001800 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1800:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1802:	4604      	mov	r4, r0
    1804:	b918      	cbnz	r0, 180e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1806:	4b0d      	ldr	r3, [pc, #52]	; (183c <mutex_free_platform+0x3c>)
    1808:	480d      	ldr	r0, [pc, #52]	; (1840 <mutex_free_platform+0x40>)
    180a:	685b      	ldr	r3, [r3, #4]
    180c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    180e:	6861      	ldr	r1, [r4, #4]
    1810:	2908      	cmp	r1, #8
    1812:	d00d      	beq.n	1830 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1814:	f031 0304 	bics.w	r3, r1, #4
    1818:	d00a      	beq.n	1830 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    181a:	f011 0102 	ands.w	r1, r1, #2
    181e:	d008      	beq.n	1832 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1820:	4808      	ldr	r0, [pc, #32]	; (1844 <mutex_free_platform+0x44>)
    1822:	4621      	mov	r1, r4
    1824:	f003 ffc0 	bl	57a8 <k_mem_slab_free>
        mutex->mutex = NULL;
    1828:	2300      	movs	r3, #0
    182a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    182c:	2300      	movs	r3, #0
    182e:	6063      	str	r3, [r4, #4]
}
    1830:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1832:	6820      	ldr	r0, [r4, #0]
    1834:	2214      	movs	r2, #20
    1836:	f006 fcff 	bl	8238 <memset>
    183a:	e7f7      	b.n	182c <mutex_free_platform+0x2c>
    183c:	20000174 	.word	0x20000174
    1840:	00008fc2 	.word	0x00008fc2
    1844:	20000514 	.word	0x20000514

00001848 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1848:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    184a:	4604      	mov	r4, r0
    184c:	b918      	cbnz	r0, 1856 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    184e:	4b16      	ldr	r3, [pc, #88]	; (18a8 <mutex_init_platform+0x60>)
    1850:	4816      	ldr	r0, [pc, #88]	; (18ac <mutex_init_platform+0x64>)
    1852:	685b      	ldr	r3, [r3, #4]
    1854:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1856:	6863      	ldr	r3, [r4, #4]
    1858:	2b04      	cmp	r3, #4
    185a:	d023      	beq.n	18a4 <mutex_init_platform+0x5c>
    185c:	2b08      	cmp	r3, #8
    185e:	d021      	beq.n	18a4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1860:	b9cb      	cbnz	r3, 1896 <mutex_init_platform+0x4e>
    1862:	6823      	ldr	r3, [r4, #0]
    1864:	b9bb      	cbnz	r3, 1896 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1866:	4812      	ldr	r0, [pc, #72]	; (18b0 <mutex_init_platform+0x68>)
    1868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    186c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1870:	4621      	mov	r1, r4
    1872:	f003 ff2d 	bl	56d0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1876:	b908      	cbnz	r0, 187c <mutex_init_platform+0x34>
    1878:	6823      	ldr	r3, [r4, #0]
    187a:	b91b      	cbnz	r3, 1884 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    187c:	4b0a      	ldr	r3, [pc, #40]	; (18a8 <mutex_init_platform+0x60>)
    187e:	480d      	ldr	r0, [pc, #52]	; (18b4 <mutex_init_platform+0x6c>)
    1880:	685b      	ldr	r3, [r3, #4]
    1882:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1884:	6820      	ldr	r0, [r4, #0]
    1886:	2214      	movs	r2, #20
    1888:	2100      	movs	r1, #0
    188a:	f006 fcd5 	bl	8238 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    188e:	6863      	ldr	r3, [r4, #4]
    1890:	f043 0302 	orr.w	r3, r3, #2
    1894:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1896:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1898:	f006 ffc2 	bl	8820 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    189c:	6863      	ldr	r3, [r4, #4]
    189e:	f043 0301 	orr.w	r3, r3, #1
    18a2:	6063      	str	r3, [r4, #4]
}
    18a4:	bd10      	pop	{r4, pc}
    18a6:	bf00      	nop
    18a8:	20000174 	.word	0x20000174
    18ac:	00008fc2 	.word	0x00008fc2
    18b0:	20000514 	.word	0x20000514
    18b4:	00008fe8 	.word	0x00008fe8

000018b8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    18b8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    18ba:	b308      	cbz	r0, 1900 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    18bc:	6843      	ldr	r3, [r0, #4]
    18be:	2b04      	cmp	r3, #4
    18c0:	d110      	bne.n	18e4 <mutex_lock_platform+0x2c>
    18c2:	2201      	movs	r2, #1
    18c4:	6803      	ldr	r3, [r0, #0]
    18c6:	f3bf 8f5b 	dmb	ish
    18ca:	e853 1f00 	ldrex	r1, [r3]
    18ce:	2900      	cmp	r1, #0
    18d0:	d103      	bne.n	18da <mutex_lock_platform+0x22>
    18d2:	e843 2000 	strex	r0, r2, [r3]
    18d6:	2800      	cmp	r0, #0
    18d8:	d1f7      	bne.n	18ca <mutex_lock_platform+0x12>
    18da:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18de:	d10b      	bne.n	18f8 <mutex_lock_platform+0x40>
    18e0:	2000      	movs	r0, #0
}
    18e2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    18e4:	b153      	cbz	r3, 18fc <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    18e6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    18e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    18ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    18f0:	f003 ffbe 	bl	5870 <z_impl_k_mutex_lock>
        if (ret == 0) {
    18f4:	2800      	cmp	r0, #0
    18f6:	d0f3      	beq.n	18e0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18f8:	4803      	ldr	r0, [pc, #12]	; (1908 <mutex_lock_platform+0x50>)
    18fa:	e7f2      	b.n	18e2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    18fc:	4803      	ldr	r0, [pc, #12]	; (190c <mutex_lock_platform+0x54>)
    18fe:	e7f0      	b.n	18e2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1900:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1904:	e7ed      	b.n	18e2 <mutex_lock_platform+0x2a>
    1906:	bf00      	nop
    1908:	ffff8fe9 	.word	0xffff8fe9
    190c:	ffff8fea 	.word	0xffff8fea

00001910 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1910:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1912:	4906      	ldr	r1, [pc, #24]	; (192c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1914:	4806      	ldr	r0, [pc, #24]	; (1930 <nrf_cc3xx_platform_mutex_init+0x20>)
    1916:	2340      	movs	r3, #64	; 0x40
    1918:	2214      	movs	r2, #20
    191a:	f006 ff65 	bl	87e8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    191e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1922:	4904      	ldr	r1, [pc, #16]	; (1934 <nrf_cc3xx_platform_mutex_init+0x24>)
    1924:	4804      	ldr	r0, [pc, #16]	; (1938 <nrf_cc3xx_platform_mutex_init+0x28>)
    1926:	f006 ba13 	b.w	7d50 <nrf_cc3xx_platform_set_mutexes>
    192a:	bf00      	nop
    192c:	20000534 	.word	0x20000534
    1930:	20000514 	.word	0x20000514
    1934:	00008bd0 	.word	0x00008bd0
    1938:	00008bc0 	.word	0x00008bc0

0000193c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1940:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1944:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1946:	f019 0f08 	tst.w	r9, #8
{
    194a:	4604      	mov	r4, r0
    194c:	9203      	str	r2, [sp, #12]
	if (processing) {
    194e:	d022      	beq.n	1996 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1950:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1952:	bf0c      	ite	eq
    1954:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1958:	f049 0920 	orrne.w	r9, r9, #32
    195c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1960:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1962:	4620      	mov	r0, r4
    1964:	f005 fccc 	bl	7300 <z_spin_unlock_valid>
    1968:	b968      	cbnz	r0, 1986 <process_event+0x4a>
    196a:	4a9f      	ldr	r2, [pc, #636]	; (1be8 <process_event+0x2ac>)
    196c:	499f      	ldr	r1, [pc, #636]	; (1bec <process_event+0x2b0>)
    196e:	48a0      	ldr	r0, [pc, #640]	; (1bf0 <process_event+0x2b4>)
    1970:	23ac      	movs	r3, #172	; 0xac
    1972:	f006 fc00 	bl	8176 <printk>
    1976:	489f      	ldr	r0, [pc, #636]	; (1bf4 <process_event+0x2b8>)
    1978:	4621      	mov	r1, r4
    197a:	f006 fbfc 	bl	8176 <printk>
    197e:	489a      	ldr	r0, [pc, #616]	; (1be8 <process_event+0x2ac>)
    1980:	21ac      	movs	r1, #172	; 0xac
    1982:	f006 fb24 	bl	7fce <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1986:	9b03      	ldr	r3, [sp, #12]
    1988:	f383 8811 	msr	BASEPRI, r3
    198c:	f3bf 8f6f 	isb	sy
}
    1990:	b005      	add	sp, #20
    1992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    1996:	4f98      	ldr	r7, [pc, #608]	; (1bf8 <process_event+0x2bc>)
    1998:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1bf0 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    199c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    19a0:	2902      	cmp	r1, #2
    19a2:	d106      	bne.n	19b2 <process_event+0x76>
			evt = process_recheck(mgr);
    19a4:	4620      	mov	r0, r4
    19a6:	f006 fb90 	bl	80ca <process_recheck>
		if (evt == EVT_NOP) {
    19aa:	2800      	cmp	r0, #0
    19ac:	d0d8      	beq.n	1960 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    19ae:	2801      	cmp	r0, #1
    19b0:	d168      	bne.n	1a84 <process_event+0x148>
			res = mgr->last_res;
    19b2:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    19b6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    19b8:	f1bb 0f00 	cmp.w	fp, #0
    19bc:	da0a      	bge.n	19d4 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    19be:	2600      	movs	r6, #0
		*clients = mgr->clients;
    19c0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19c2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    19c6:	e9c4 6600 	strd	r6, r6, [r4]
    19ca:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    19ce:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    19d0:	9601      	str	r6, [sp, #4]
    19d2:	e027      	b.n	1a24 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    19d4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    19d8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    19da:	2901      	cmp	r1, #1
    19dc:	d834      	bhi.n	1a48 <process_event+0x10c>
	list->head = NULL;
    19de:	2100      	movs	r1, #0
    19e0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    19e4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    19e6:	6825      	ldr	r5, [r4, #0]
    19e8:	b29b      	uxth	r3, r3
	list->tail = NULL;
    19ea:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    19ee:	d10c      	bne.n	1a0a <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    19f0:	428d      	cmp	r5, r1
    19f2:	462a      	mov	r2, r5
    19f4:	bf38      	it	cc
    19f6:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    19f8:	b12a      	cbz	r2, 1a06 <process_event+0xca>
				mgr->refs += 1U;
    19fa:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    19fc:	6812      	ldr	r2, [r2, #0]
    19fe:	3101      	adds	r1, #1
    1a00:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1a02:	2a00      	cmp	r2, #0
    1a04:	d1f8      	bne.n	19f8 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a06:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a0a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1a0c:	4620      	mov	r0, r4
    1a0e:	f006 fb5c 	bl	80ca <process_recheck>
    1a12:	4606      	mov	r6, r0
    1a14:	2800      	cmp	r0, #0
    1a16:	d0db      	beq.n	19d0 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a18:	8ba3      	ldrh	r3, [r4, #28]
    1a1a:	f043 0320 	orr.w	r3, r3, #32
    1a1e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1a20:	2300      	movs	r3, #0
    1a22:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a24:	8ba3      	ldrh	r3, [r4, #28]
    1a26:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1a2a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a2c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1a2e:	d003      	beq.n	1a38 <process_event+0xfc>
		if (do_monitors
    1a30:	68a2      	ldr	r2, [r4, #8]
    1a32:	2a00      	cmp	r2, #0
    1a34:	f040 80f0 	bne.w	1c18 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    1a38:	b91d      	cbnz	r5, 1a42 <process_event+0x106>
		    || (transit != NULL)) {
    1a3a:	9a01      	ldr	r2, [sp, #4]
    1a3c:	2a00      	cmp	r2, #0
    1a3e:	f000 8136 	beq.w	1cae <process_event+0x372>
    1a42:	f04f 0900 	mov.w	r9, #0
    1a46:	e0e9      	b.n	1c1c <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1a48:	2a04      	cmp	r2, #4
    1a4a:	d10e      	bne.n	1a6a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a4c:	f023 0307 	bic.w	r3, r3, #7
    1a50:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a52:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1a54:	4620      	mov	r0, r4
    1a56:	f006 fb38 	bl	80ca <process_recheck>
    1a5a:	4605      	mov	r5, r0
    1a5c:	b118      	cbz	r0, 1a66 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a5e:	f042 0220 	orr.w	r2, r2, #32
    1a62:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1a64:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1a66:	9501      	str	r5, [sp, #4]
    1a68:	e7dc      	b.n	1a24 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    1a6a:	4640      	mov	r0, r8
    1a6c:	4963      	ldr	r1, [pc, #396]	; (1bfc <process_event+0x2c0>)
    1a6e:	f240 131b 	movw	r3, #283	; 0x11b
    1a72:	463a      	mov	r2, r7
    1a74:	f006 fb7f 	bl	8176 <printk>
    1a78:	f240 111b 	movw	r1, #283	; 0x11b
    1a7c:	4638      	mov	r0, r7
    1a7e:	f006 faa6 	bl	7fce <assert_post_action>
    1a82:	e7ef      	b.n	1a64 <process_event+0x128>
		} else if (evt == EVT_START) {
    1a84:	2803      	cmp	r0, #3
    1a86:	d135      	bne.n	1af4 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1a88:	f1b9 0f00 	cmp.w	r9, #0
    1a8c:	d00b      	beq.n	1aa6 <process_event+0x16a>
    1a8e:	495c      	ldr	r1, [pc, #368]	; (1c00 <process_event+0x2c4>)
    1a90:	4640      	mov	r0, r8
    1a92:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1a96:	463a      	mov	r2, r7
    1a98:	f006 fb6d 	bl	8176 <printk>
    1a9c:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1aa0:	4638      	mov	r0, r7
    1aa2:	f006 fa94 	bl	7fce <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1aa6:	6823      	ldr	r3, [r4, #0]
    1aa8:	b95b      	cbnz	r3, 1ac2 <process_event+0x186>
    1aaa:	4956      	ldr	r1, [pc, #344]	; (1c04 <process_event+0x2c8>)
    1aac:	4640      	mov	r0, r8
    1aae:	f240 1357 	movw	r3, #343	; 0x157
    1ab2:	463a      	mov	r2, r7
    1ab4:	f006 fb5f 	bl	8176 <printk>
    1ab8:	f240 1157 	movw	r1, #343	; 0x157
    1abc:	4638      	mov	r0, r7
    1abe:	f006 fa86 	bl	7fce <assert_post_action>
			transit = mgr->transitions->start;
    1ac2:	6923      	ldr	r3, [r4, #16]
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1ac8:	b95b      	cbnz	r3, 1ae2 <process_event+0x1a6>
    1aca:	494f      	ldr	r1, [pc, #316]	; (1c08 <process_event+0x2cc>)
    1acc:	4640      	mov	r0, r8
    1ace:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1ad2:	463a      	mov	r2, r7
    1ad4:	f006 fb4f 	bl	8176 <printk>
    1ad8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1adc:	4638      	mov	r0, r7
    1ade:	f006 fa76 	bl	7fce <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ae2:	8ba3      	ldrh	r3, [r4, #28]
    1ae4:	f023 0307 	bic.w	r3, r3, #7
    1ae8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1aec:	83a3      	strh	r3, [r4, #28]
}
    1aee:	2500      	movs	r5, #0
		res = 0;
    1af0:	46ab      	mov	fp, r5
}
    1af2:	e797      	b.n	1a24 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1af4:	2804      	cmp	r0, #4
    1af6:	d132      	bne.n	1b5e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1af8:	f1b9 0f02 	cmp.w	r9, #2
    1afc:	d00b      	beq.n	1b16 <process_event+0x1da>
    1afe:	4943      	ldr	r1, [pc, #268]	; (1c0c <process_event+0x2d0>)
    1b00:	4640      	mov	r0, r8
    1b02:	f240 135d 	movw	r3, #349	; 0x15d
    1b06:	463a      	mov	r2, r7
    1b08:	f006 fb35 	bl	8176 <printk>
    1b0c:	f240 115d 	movw	r1, #349	; 0x15d
    1b10:	4638      	mov	r0, r7
    1b12:	f006 fa5c 	bl	7fce <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1b16:	8be3      	ldrh	r3, [r4, #30]
    1b18:	b15b      	cbz	r3, 1b32 <process_event+0x1f6>
    1b1a:	493d      	ldr	r1, [pc, #244]	; (1c10 <process_event+0x2d4>)
    1b1c:	4640      	mov	r0, r8
    1b1e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1b22:	463a      	mov	r2, r7
    1b24:	f006 fb27 	bl	8176 <printk>
    1b28:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1b2c:	4638      	mov	r0, r7
    1b2e:	f006 fa4e 	bl	7fce <assert_post_action>
			transit = mgr->transitions->stop;
    1b32:	6923      	ldr	r3, [r4, #16]
    1b34:	685b      	ldr	r3, [r3, #4]
    1b36:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1b38:	b95b      	cbnz	r3, 1b52 <process_event+0x216>
    1b3a:	4933      	ldr	r1, [pc, #204]	; (1c08 <process_event+0x2cc>)
    1b3c:	4640      	mov	r0, r8
    1b3e:	f240 1361 	movw	r3, #353	; 0x161
    1b42:	463a      	mov	r2, r7
    1b44:	f006 fb17 	bl	8176 <printk>
    1b48:	f240 1161 	movw	r1, #353	; 0x161
    1b4c:	4638      	mov	r0, r7
    1b4e:	f006 fa3e 	bl	7fce <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b52:	8ba3      	ldrh	r3, [r4, #28]
    1b54:	f023 0307 	bic.w	r3, r3, #7
    1b58:	f043 0304 	orr.w	r3, r3, #4
    1b5c:	e7c6      	b.n	1aec <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    1b5e:	2805      	cmp	r0, #5
    1b60:	d132      	bne.n	1bc8 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1b62:	f1b9 0f01 	cmp.w	r9, #1
    1b66:	d00b      	beq.n	1b80 <process_event+0x244>
    1b68:	492a      	ldr	r1, [pc, #168]	; (1c14 <process_event+0x2d8>)
    1b6a:	4640      	mov	r0, r8
    1b6c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1b70:	463a      	mov	r2, r7
    1b72:	f006 fb00 	bl	8176 <printk>
    1b76:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1b7a:	4638      	mov	r0, r7
    1b7c:	f006 fa27 	bl	7fce <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1b80:	6823      	ldr	r3, [r4, #0]
    1b82:	b95b      	cbnz	r3, 1b9c <process_event+0x260>
    1b84:	491f      	ldr	r1, [pc, #124]	; (1c04 <process_event+0x2c8>)
    1b86:	4640      	mov	r0, r8
    1b88:	f240 1365 	movw	r3, #357	; 0x165
    1b8c:	463a      	mov	r2, r7
    1b8e:	f006 faf2 	bl	8176 <printk>
    1b92:	f240 1165 	movw	r1, #357	; 0x165
    1b96:	4638      	mov	r0, r7
    1b98:	f006 fa19 	bl	7fce <assert_post_action>
			transit = mgr->transitions->reset;
    1b9c:	6923      	ldr	r3, [r4, #16]
    1b9e:	689b      	ldr	r3, [r3, #8]
    1ba0:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1ba2:	b95b      	cbnz	r3, 1bbc <process_event+0x280>
    1ba4:	4918      	ldr	r1, [pc, #96]	; (1c08 <process_event+0x2cc>)
    1ba6:	4640      	mov	r0, r8
    1ba8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1bac:	463a      	mov	r2, r7
    1bae:	f006 fae2 	bl	8176 <printk>
    1bb2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1bb6:	4638      	mov	r0, r7
    1bb8:	f006 fa09 	bl	7fce <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bbc:	8ba3      	ldrh	r3, [r4, #28]
    1bbe:	f023 0307 	bic.w	r3, r3, #7
    1bc2:	f043 0305 	orr.w	r3, r3, #5
    1bc6:	e791      	b.n	1aec <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    1bc8:	490c      	ldr	r1, [pc, #48]	; (1bfc <process_event+0x2c0>)
    1bca:	f240 136b 	movw	r3, #363	; 0x16b
    1bce:	463a      	mov	r2, r7
    1bd0:	4640      	mov	r0, r8
    1bd2:	f006 fad0 	bl	8176 <printk>
    1bd6:	2500      	movs	r5, #0
    1bd8:	f240 116b 	movw	r1, #363	; 0x16b
    1bdc:	4638      	mov	r0, r7
    1bde:	f006 f9f6 	bl	7fce <assert_post_action>
		onoff_transition_fn transit = NULL;
    1be2:	9501      	str	r5, [sp, #4]
    1be4:	e784      	b.n	1af0 <process_event+0x1b4>
    1be6:	bf00      	nop
    1be8:	000090b8 	.word	0x000090b8
    1bec:	000090de 	.word	0x000090de
    1bf0:	00008fa5 	.word	0x00008fa5
    1bf4:	000090f5 	.word	0x000090f5
    1bf8:	00009015 	.word	0x00009015
    1bfc:	0000978b 	.word	0x0000978b
    1c00:	00009037 	.word	0x00009037
    1c04:	00009043 	.word	0x00009043
    1c08:	00009066 	.word	0x00009066
    1c0c:	0000907d 	.word	0x0000907d
    1c10:	00009093 	.word	0x00009093
    1c14:	000090a2 	.word	0x000090a2
				   && !sys_slist_is_empty(&mgr->monitors);
    1c18:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1c1c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1c20:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1c24:	83a3      	strh	r3, [r4, #28]
    1c26:	4650      	mov	r0, sl
    1c28:	f005 fb6a 	bl	7300 <z_spin_unlock_valid>
    1c2c:	b968      	cbnz	r0, 1c4a <process_event+0x30e>
    1c2e:	4a3a      	ldr	r2, [pc, #232]	; (1d18 <process_event+0x3dc>)
    1c30:	493a      	ldr	r1, [pc, #232]	; (1d1c <process_event+0x3e0>)
    1c32:	23ac      	movs	r3, #172	; 0xac
    1c34:	4640      	mov	r0, r8
    1c36:	f006 fa9e 	bl	8176 <printk>
    1c3a:	4839      	ldr	r0, [pc, #228]	; (1d20 <process_event+0x3e4>)
    1c3c:	4651      	mov	r1, sl
    1c3e:	f006 fa9a 	bl	8176 <printk>
    1c42:	4835      	ldr	r0, [pc, #212]	; (1d18 <process_event+0x3dc>)
    1c44:	21ac      	movs	r1, #172	; 0xac
    1c46:	f006 f9c2 	bl	7fce <assert_post_action>
    1c4a:	9b03      	ldr	r3, [sp, #12]
    1c4c:	f383 8811 	msr	BASEPRI, r3
    1c50:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1c54:	f1b9 0f00 	cmp.w	r9, #0
    1c58:	d138      	bne.n	1ccc <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    1c5a:	2d00      	cmp	r5, #0
    1c5c:	d14b      	bne.n	1cf6 <process_event+0x3ba>
			if (transit != NULL) {
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	b113      	cbz	r3, 1c68 <process_event+0x32c>
				transit(mgr, transition_complete);
    1c62:	4930      	ldr	r1, [pc, #192]	; (1d24 <process_event+0x3e8>)
    1c64:	4620      	mov	r0, r4
    1c66:	4798      	blx	r3
	__asm__ volatile(
    1c68:	f04f 0320 	mov.w	r3, #32
    1c6c:	f3ef 8b11 	mrs	fp, BASEPRI
    1c70:	f383 8812 	msr	BASEPRI_MAX, r3
    1c74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c78:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    1c7a:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c7e:	f005 fb31 	bl	72e4 <z_spin_lock_valid>
    1c82:	b968      	cbnz	r0, 1ca0 <process_event+0x364>
    1c84:	4a24      	ldr	r2, [pc, #144]	; (1d18 <process_event+0x3dc>)
    1c86:	4928      	ldr	r1, [pc, #160]	; (1d28 <process_event+0x3ec>)
    1c88:	2381      	movs	r3, #129	; 0x81
    1c8a:	4640      	mov	r0, r8
    1c8c:	f006 fa73 	bl	8176 <printk>
    1c90:	4826      	ldr	r0, [pc, #152]	; (1d2c <process_event+0x3f0>)
    1c92:	4651      	mov	r1, sl
    1c94:	f006 fa6f 	bl	8176 <printk>
    1c98:	481f      	ldr	r0, [pc, #124]	; (1d18 <process_event+0x3dc>)
    1c9a:	2181      	movs	r1, #129	; 0x81
    1c9c:	f006 f997 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    1ca0:	4650      	mov	r0, sl
    1ca2:	f005 fb3d 	bl	7320 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1ca6:	8ba3      	ldrh	r3, [r4, #28]
    1ca8:	f023 0308 	bic.w	r3, r3, #8
    1cac:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1cae:	8ba3      	ldrh	r3, [r4, #28]
    1cb0:	06da      	lsls	r2, r3, #27
    1cb2:	d528      	bpl.n	1d06 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1cb4:	f023 0310 	bic.w	r3, r3, #16
    1cb8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1cba:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1cbc:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1cc0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1cc4:	2900      	cmp	r1, #0
    1cc6:	f47f ae6b 	bne.w	19a0 <process_event+0x64>
out:
    1cca:	e649      	b.n	1960 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1ccc:	68a1      	ldr	r1, [r4, #8]
    1cce:	2900      	cmp	r1, #0
    1cd0:	d0c3      	beq.n	1c5a <process_event+0x31e>
	return node->next;
    1cd2:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1cd4:	9a02      	ldr	r2, [sp, #8]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	bf38      	it	cc
    1cda:	2300      	movcc	r3, #0
    1cdc:	4699      	mov	r9, r3
    1cde:	684b      	ldr	r3, [r1, #4]
    1ce0:	4620      	mov	r0, r4
    1ce2:	461e      	mov	r6, r3
    1ce4:	465b      	mov	r3, fp
    1ce6:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1ce8:	f1b9 0f00 	cmp.w	r9, #0
    1cec:	d0b5      	beq.n	1c5a <process_event+0x31e>
    1cee:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1cf2:	4649      	mov	r1, r9
    1cf4:	e7ee      	b.n	1cd4 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1cf6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1cf8:	9a02      	ldr	r2, [sp, #8]
    1cfa:	682d      	ldr	r5, [r5, #0]
    1cfc:	465b      	mov	r3, fp
    1cfe:	4620      	mov	r0, r4
    1d00:	f006 f9ff 	bl	8102 <notify_one>
    1d04:	e7a9      	b.n	1c5a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1d06:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1d0a:	bf1e      	ittt	ne
    1d0c:	f023 0320 	bicne.w	r3, r3, #32
    1d10:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1d12:	2102      	movne	r1, #2
    1d14:	e7d2      	b.n	1cbc <process_event+0x380>
    1d16:	bf00      	nop
    1d18:	000090b8 	.word	0x000090b8
    1d1c:	000090de 	.word	0x000090de
    1d20:	000090f5 	.word	0x000090f5
    1d24:	00001d31 	.word	0x00001d31
    1d28:	0000910a 	.word	0x0000910a
    1d2c:	0000911f 	.word	0x0000911f

00001d30 <transition_complete>:
{
    1d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d32:	4604      	mov	r4, r0
    1d34:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1d36:	f100 0614 	add.w	r6, r0, #20
    1d3a:	f04f 0320 	mov.w	r3, #32
    1d3e:	f3ef 8711 	mrs	r7, BASEPRI
    1d42:	f383 8812 	msr	BASEPRI_MAX, r3
    1d46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1d4a:	4630      	mov	r0, r6
    1d4c:	f005 faca 	bl	72e4 <z_spin_lock_valid>
    1d50:	b968      	cbnz	r0, 1d6e <transition_complete+0x3e>
    1d52:	4a0c      	ldr	r2, [pc, #48]	; (1d84 <transition_complete+0x54>)
    1d54:	490c      	ldr	r1, [pc, #48]	; (1d88 <transition_complete+0x58>)
    1d56:	480d      	ldr	r0, [pc, #52]	; (1d8c <transition_complete+0x5c>)
    1d58:	2381      	movs	r3, #129	; 0x81
    1d5a:	f006 fa0c 	bl	8176 <printk>
    1d5e:	480c      	ldr	r0, [pc, #48]	; (1d90 <transition_complete+0x60>)
    1d60:	4631      	mov	r1, r6
    1d62:	f006 fa08 	bl	8176 <printk>
    1d66:	4807      	ldr	r0, [pc, #28]	; (1d84 <transition_complete+0x54>)
    1d68:	2181      	movs	r1, #129	; 0x81
    1d6a:	f006 f930 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    1d6e:	4630      	mov	r0, r6
    1d70:	f005 fad6 	bl	7320 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1d74:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1d76:	463a      	mov	r2, r7
    1d78:	4620      	mov	r0, r4
    1d7a:	2101      	movs	r1, #1
}
    1d7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1d80:	f7ff bddc 	b.w	193c <process_event>
    1d84:	000090b8 	.word	0x000090b8
    1d88:	0000910a 	.word	0x0000910a
    1d8c:	00008fa5 	.word	0x00008fa5
    1d90:	0000911f 	.word	0x0000911f

00001d94 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d98:	4604      	mov	r4, r0
    1d9a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1d9c:	f006 f9c7 	bl	812e <validate_args>

	if (rv < 0) {
    1da0:	1e05      	subs	r5, r0, #0
    1da2:	db5e      	blt.n	1e62 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1da4:	f104 0914 	add.w	r9, r4, #20
    1da8:	f04f 0320 	mov.w	r3, #32
    1dac:	f3ef 8a11 	mrs	sl, BASEPRI
    1db0:	f383 8812 	msr	BASEPRI_MAX, r3
    1db4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1db8:	4648      	mov	r0, r9
    1dba:	f005 fa93 	bl	72e4 <z_spin_lock_valid>
    1dbe:	b968      	cbnz	r0, 1ddc <onoff_request+0x48>
    1dc0:	4a38      	ldr	r2, [pc, #224]	; (1ea4 <onoff_request+0x110>)
    1dc2:	4939      	ldr	r1, [pc, #228]	; (1ea8 <onoff_request+0x114>)
    1dc4:	4839      	ldr	r0, [pc, #228]	; (1eac <onoff_request+0x118>)
    1dc6:	2381      	movs	r3, #129	; 0x81
    1dc8:	f006 f9d5 	bl	8176 <printk>
    1dcc:	4838      	ldr	r0, [pc, #224]	; (1eb0 <onoff_request+0x11c>)
    1dce:	4649      	mov	r1, r9
    1dd0:	f006 f9d1 	bl	8176 <printk>
    1dd4:	4833      	ldr	r0, [pc, #204]	; (1ea4 <onoff_request+0x110>)
    1dd6:	2181      	movs	r1, #129	; 0x81
    1dd8:	f006 f8f9 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    1ddc:	4648      	mov	r0, r9
    1dde:	f005 fa9f 	bl	7320 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1de2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1de4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    1de6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1dea:	428b      	cmp	r3, r1
    1dec:	f002 0607 	and.w	r6, r2, #7
    1df0:	d050      	beq.n	1e94 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1df2:	2e02      	cmp	r6, #2
    1df4:	d124      	bne.n	1e40 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1df6:	3301      	adds	r3, #1
    1df8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1dfa:	4635      	mov	r5, r6
		notify = true;
    1dfc:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1e00:	4648      	mov	r0, r9
    1e02:	f005 fa7d 	bl	7300 <z_spin_unlock_valid>
    1e06:	b968      	cbnz	r0, 1e24 <onoff_request+0x90>
    1e08:	4a26      	ldr	r2, [pc, #152]	; (1ea4 <onoff_request+0x110>)
    1e0a:	492a      	ldr	r1, [pc, #168]	; (1eb4 <onoff_request+0x120>)
    1e0c:	4827      	ldr	r0, [pc, #156]	; (1eac <onoff_request+0x118>)
    1e0e:	23ac      	movs	r3, #172	; 0xac
    1e10:	f006 f9b1 	bl	8176 <printk>
    1e14:	4828      	ldr	r0, [pc, #160]	; (1eb8 <onoff_request+0x124>)
    1e16:	4649      	mov	r1, r9
    1e18:	f006 f9ad 	bl	8176 <printk>
    1e1c:	4821      	ldr	r0, [pc, #132]	; (1ea4 <onoff_request+0x110>)
    1e1e:	21ac      	movs	r1, #172	; 0xac
    1e20:	f006 f8d5 	bl	7fce <assert_post_action>
	__asm__ volatile(
    1e24:	f38a 8811 	msr	BASEPRI, sl
    1e28:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1e2c:	f1b8 0f00 	cmp.w	r8, #0
    1e30:	d017      	beq.n	1e62 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1e32:	2300      	movs	r3, #0
    1e34:	4632      	mov	r2, r6
    1e36:	4639      	mov	r1, r7
    1e38:	4620      	mov	r0, r4
    1e3a:	f006 f962 	bl	8102 <notify_one>
    1e3e:	e010      	b.n	1e62 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1e40:	0793      	lsls	r3, r2, #30
    1e42:	d001      	beq.n	1e48 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1e44:	2e06      	cmp	r6, #6
    1e46:	d10f      	bne.n	1e68 <onoff_request+0xd4>
	parent->next = child;
    1e48:	2300      	movs	r3, #0
    1e4a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1e4c:	6863      	ldr	r3, [r4, #4]
    1e4e:	b9f3      	cbnz	r3, 1e8e <onoff_request+0xfa>
	list->head = node;
    1e50:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1e54:	4635      	mov	r5, r6
    1e56:	b9fe      	cbnz	r6, 1e98 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    1e58:	4652      	mov	r2, sl
    1e5a:	2102      	movs	r1, #2
    1e5c:	4620      	mov	r0, r4
    1e5e:	f7ff fd6d 	bl	193c <process_event>
		}
	}

	return rv;
}
    1e62:	4628      	mov	r0, r5
    1e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    1e68:	2e05      	cmp	r6, #5
    1e6a:	d018      	beq.n	1e9e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1e6c:	2e01      	cmp	r6, #1
    1e6e:	d00b      	beq.n	1e88 <onoff_request+0xf4>
    1e70:	4912      	ldr	r1, [pc, #72]	; (1ebc <onoff_request+0x128>)
    1e72:	480e      	ldr	r0, [pc, #56]	; (1eac <onoff_request+0x118>)
    1e74:	4a12      	ldr	r2, [pc, #72]	; (1ec0 <onoff_request+0x12c>)
    1e76:	f240 13c9 	movw	r3, #457	; 0x1c9
    1e7a:	f006 f97c 	bl	8176 <printk>
    1e7e:	4810      	ldr	r0, [pc, #64]	; (1ec0 <onoff_request+0x12c>)
    1e80:	f240 11c9 	movw	r1, #457	; 0x1c9
    1e84:	f006 f8a3 	bl	7fce <assert_post_action>
		rv = -EIO;
    1e88:	f06f 0504 	mvn.w	r5, #4
    1e8c:	e004      	b.n	1e98 <onoff_request+0x104>
	parent->next = child;
    1e8e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1e90:	6067      	str	r7, [r4, #4]
}
    1e92:	e7df      	b.n	1e54 <onoff_request+0xc0>
		rv = -EAGAIN;
    1e94:	f06f 050a 	mvn.w	r5, #10
    1e98:	f04f 0800 	mov.w	r8, #0
    1e9c:	e7b0      	b.n	1e00 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1e9e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1ea2:	e7f9      	b.n	1e98 <onoff_request+0x104>
    1ea4:	000090b8 	.word	0x000090b8
    1ea8:	0000910a 	.word	0x0000910a
    1eac:	00008fa5 	.word	0x00008fa5
    1eb0:	0000911f 	.word	0x0000911f
    1eb4:	000090de 	.word	0x000090de
    1eb8:	000090f5 	.word	0x000090f5
    1ebc:	000090a2 	.word	0x000090a2
    1ec0:	00009015 	.word	0x00009015

00001ec4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ec8:	4605      	mov	r5, r0
	__asm__ volatile(
    1eca:	f04f 0320 	mov.w	r3, #32
    1ece:	f3ef 8611 	mrs	r6, BASEPRI
    1ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    1ed6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1eda:	4823      	ldr	r0, [pc, #140]	; (1f68 <pm_state_notify+0xa4>)
    1edc:	f005 fa02 	bl	72e4 <z_spin_lock_valid>
    1ee0:	b968      	cbnz	r0, 1efe <pm_state_notify+0x3a>
    1ee2:	4a22      	ldr	r2, [pc, #136]	; (1f6c <pm_state_notify+0xa8>)
    1ee4:	4922      	ldr	r1, [pc, #136]	; (1f70 <pm_state_notify+0xac>)
    1ee6:	4823      	ldr	r0, [pc, #140]	; (1f74 <pm_state_notify+0xb0>)
    1ee8:	2381      	movs	r3, #129	; 0x81
    1eea:	f006 f944 	bl	8176 <printk>
    1eee:	491e      	ldr	r1, [pc, #120]	; (1f68 <pm_state_notify+0xa4>)
    1ef0:	4821      	ldr	r0, [pc, #132]	; (1f78 <pm_state_notify+0xb4>)
    1ef2:	f006 f940 	bl	8176 <printk>
    1ef6:	481d      	ldr	r0, [pc, #116]	; (1f6c <pm_state_notify+0xa8>)
    1ef8:	2181      	movs	r1, #129	; 0x81
    1efa:	f006 f868 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    1efe:	481a      	ldr	r0, [pc, #104]	; (1f68 <pm_state_notify+0xa4>)
    1f00:	f005 fa0e 	bl	7320 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1f04:	4b1d      	ldr	r3, [pc, #116]	; (1f7c <pm_state_notify+0xb8>)
    1f06:	681c      	ldr	r4, [r3, #0]
    1f08:	2c00      	cmp	r4, #0
    1f0a:	bf38      	it	cc
    1f0c:	2400      	movcc	r4, #0
    1f0e:	b19c      	cbz	r4, 1f38 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1f10:	4f1b      	ldr	r7, [pc, #108]	; (1f80 <pm_state_notify+0xbc>)
    1f12:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1f8c <pm_state_notify+0xc8>
    1f16:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1f1a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1f1e:	2d00      	cmp	r5, #0
    1f20:	bf08      	it	eq
    1f22:	4613      	moveq	r3, r2
		if (callback) {
    1f24:	b12b      	cbz	r3, 1f32 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    1f26:	f898 2014 	ldrb.w	r2, [r8, #20]
    1f2a:	fb09 f202 	mul.w	r2, r9, r2
    1f2e:	5cb8      	ldrb	r0, [r7, r2]
    1f30:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1f32:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1f34:	2c00      	cmp	r4, #0
    1f36:	d1f0      	bne.n	1f1a <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1f38:	480b      	ldr	r0, [pc, #44]	; (1f68 <pm_state_notify+0xa4>)
    1f3a:	f005 f9e1 	bl	7300 <z_spin_unlock_valid>
    1f3e:	b968      	cbnz	r0, 1f5c <pm_state_notify+0x98>
    1f40:	4a0a      	ldr	r2, [pc, #40]	; (1f6c <pm_state_notify+0xa8>)
    1f42:	4910      	ldr	r1, [pc, #64]	; (1f84 <pm_state_notify+0xc0>)
    1f44:	480b      	ldr	r0, [pc, #44]	; (1f74 <pm_state_notify+0xb0>)
    1f46:	23ac      	movs	r3, #172	; 0xac
    1f48:	f006 f915 	bl	8176 <printk>
    1f4c:	4906      	ldr	r1, [pc, #24]	; (1f68 <pm_state_notify+0xa4>)
    1f4e:	480e      	ldr	r0, [pc, #56]	; (1f88 <pm_state_notify+0xc4>)
    1f50:	f006 f911 	bl	8176 <printk>
    1f54:	4805      	ldr	r0, [pc, #20]	; (1f6c <pm_state_notify+0xa8>)
    1f56:	21ac      	movs	r1, #172	; 0xac
    1f58:	f006 f839 	bl	7fce <assert_post_action>
	__asm__ volatile(
    1f5c:	f386 8811 	msr	BASEPRI, r6
    1f60:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1f68:	20000a34 	.word	0x20000a34
    1f6c:	000090b8 	.word	0x000090b8
    1f70:	0000910a 	.word	0x0000910a
    1f74:	00008fa5 	.word	0x00008fa5
    1f78:	0000911f 	.word	0x0000911f
    1f7c:	20000a38 	.word	0x20000a38
    1f80:	20000a44 	.word	0x20000a44
    1f84:	000090de 	.word	0x000090de
    1f88:	000090f5 	.word	0x000090f5
    1f8c:	20000bc4 	.word	0x20000bc4

00001f90 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f90:	f000 031f 	and.w	r3, r0, #31
    1f94:	2201      	movs	r2, #1
    1f96:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f98:	4b0a      	ldr	r3, [pc, #40]	; (1fc4 <atomic_test_and_set_bit.constprop.0+0x34>)
    1f9a:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1f9e:	0940      	lsrs	r0, r0, #5
    1fa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1fa4:	e850 3f00 	ldrex	r3, [r0]
    1fa8:	ea43 0102 	orr.w	r1, r3, r2
    1fac:	e840 1c00 	strex	ip, r1, [r0]
    1fb0:	f1bc 0f00 	cmp.w	ip, #0
    1fb4:	d1f6      	bne.n	1fa4 <atomic_test_and_set_bit.constprop.0+0x14>
    1fb6:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1fba:	421a      	tst	r2, r3
}
    1fbc:	bf14      	ite	ne
    1fbe:	2001      	movne	r0, #1
    1fc0:	2000      	moveq	r0, #0
    1fc2:	4770      	bx	lr
    1fc4:	20000a50 	.word	0x20000a50

00001fc8 <pm_system_resume>:

void pm_system_resume(void)
{
    1fc8:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1fca:	4b1d      	ldr	r3, [pc, #116]	; (2040 <pm_system_resume+0x78>)
    1fcc:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1fce:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1fd2:	f005 031f 	and.w	r3, r5, #31
    1fd6:	2201      	movs	r2, #1
    1fd8:	409a      	lsls	r2, r3
    1fda:	4b1a      	ldr	r3, [pc, #104]	; (2044 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1fdc:	0969      	lsrs	r1, r5, #5
{
    1fde:	b085      	sub	sp, #20
    1fe0:	43d0      	mvns	r0, r2
    1fe2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1fe6:	e853 1f00 	ldrex	r1, [r3]
    1fea:	ea01 0400 	and.w	r4, r1, r0
    1fee:	e843 4c00 	strex	ip, r4, [r3]
    1ff2:	f1bc 0f00 	cmp.w	ip, #0
    1ff6:	d1f6      	bne.n	1fe6 <pm_system_resume+0x1e>
    1ff8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1ffc:	4211      	tst	r1, r2
    1ffe:	d017      	beq.n	2030 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    2000:	4c11      	ldr	r4, [pc, #68]	; (2048 <pm_system_resume+0x80>)
    2002:	220c      	movs	r2, #12
    2004:	fb02 4205 	mla	r2, r2, r5, r4
    2008:	ca07      	ldmia	r2, {r0, r1, r2}
    200a:	ab01      	add	r3, sp, #4
    200c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2010:	4a0e      	ldr	r2, [pc, #56]	; (204c <pm_system_resume+0x84>)
    2012:	b17a      	cbz	r2, 2034 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2014:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2018:	f006 f92a 	bl	8270 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    201c:	2000      	movs	r0, #0
    201e:	f7ff ff51 	bl	1ec4 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2022:	230c      	movs	r3, #12
    2024:	436b      	muls	r3, r5
    2026:	2200      	movs	r2, #0
    2028:	18e1      	adds	r1, r4, r3
    202a:	50e2      	str	r2, [r4, r3]
    202c:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    2030:	b005      	add	sp, #20
    2032:	bd30      	pop	{r4, r5, pc}
    2034:	f382 8811 	msr	BASEPRI, r2
    2038:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    203c:	e7ee      	b.n	201c <pm_system_resume+0x54>
    203e:	bf00      	nop
    2040:	20000bc4 	.word	0x20000bc4
    2044:	20000a40 	.word	0x20000a40
    2048:	20000a44 	.word	0x20000a44
    204c:	00008271 	.word	0x00008271

00002050 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2054:	4b37      	ldr	r3, [pc, #220]	; (2134 <pm_system_suspend+0xe4>)
    2056:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 214c <pm_system_suspend+0xfc>
    205a:	7d1c      	ldrb	r4, [r3, #20]
{
    205c:	b088      	sub	sp, #32
    205e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2060:	4620      	mov	r0, r4
    2062:	f7ff ff95 	bl	1f90 <atomic_test_and_set_bit.constprop.0>
    2066:	b960      	cbnz	r0, 2082 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2068:	466e      	mov	r6, sp
    206a:	463a      	mov	r2, r7
    206c:	4621      	mov	r1, r4
    206e:	4630      	mov	r0, r6
    2070:	f006 f88e 	bl	8190 <pm_policy_next_state>
    2074:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2078:	250c      	movs	r5, #12
    207a:	fb05 8504 	mla	r5, r5, r4, r8
    207e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    2082:	230c      	movs	r3, #12
    2084:	4363      	muls	r3, r4
    2086:	eb08 0203 	add.w	r2, r8, r3
    208a:	f818 0003 	ldrb.w	r0, [r8, r3]
    208e:	0965      	lsrs	r5, r4, #5
    2090:	f004 061f 	and.w	r6, r4, #31
    2094:	b3c8      	cbz	r0, 210a <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2096:	1c7b      	adds	r3, r7, #1
    2098:	d00f      	beq.n	20ba <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    209a:	f8d2 e008 	ldr.w	lr, [r2, #8]
    209e:	4826      	ldr	r0, [pc, #152]	; (2138 <pm_system_suspend+0xe8>)
    20a0:	4a26      	ldr	r2, [pc, #152]	; (213c <pm_system_suspend+0xec>)
    20a2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    20a6:	2100      	movs	r1, #0
    20a8:	2300      	movs	r3, #0
    20aa:	fbec 010e 	umlal	r0, r1, ip, lr
    20ae:	f7fe fc15 	bl	8dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    20b2:	2101      	movs	r1, #1
    20b4:	1a38      	subs	r0, r7, r0
    20b6:	f005 faf5 	bl	76a4 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    20ba:	f003 fea9 	bl	5e10 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    20be:	2001      	movs	r0, #1
    20c0:	f7ff ff00 	bl	1ec4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    20c4:	f3bf 8f5b 	dmb	ish
    20c8:	4b1d      	ldr	r3, [pc, #116]	; (2140 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    20ca:	2201      	movs	r2, #1
    20cc:	40b2      	lsls	r2, r6
    20ce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    20d2:	e853 1f00 	ldrex	r1, [r3]
    20d6:	4311      	orrs	r1, r2
    20d8:	e843 1000 	strex	r0, r1, [r3]
    20dc:	2800      	cmp	r0, #0
    20de:	d1f8      	bne.n	20d2 <pm_system_suspend+0x82>
    20e0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    20e4:	230c      	movs	r3, #12
    20e6:	fb03 8404 	mla	r4, r3, r4, r8
    20ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    20ee:	ab05      	add	r3, sp, #20
    20f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    20f4:	4a13      	ldr	r2, [pc, #76]	; (2144 <pm_system_suspend+0xf4>)
    20f6:	b11a      	cbz	r2, 2100 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    20f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    20fc:	f006 f8a5 	bl	824a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2100:	f7ff ff62 	bl	1fc8 <pm_system_resume>
	k_sched_unlock();
    2104:	f004 fb7c 	bl	6800 <k_sched_unlock>
	bool ret = true;
    2108:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    210a:	4a0f      	ldr	r2, [pc, #60]	; (2148 <pm_system_suspend+0xf8>)
    210c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2110:	2301      	movs	r3, #1
    2112:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2114:	43db      	mvns	r3, r3
    2116:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    211a:	e855 2f00 	ldrex	r2, [r5]
    211e:	401a      	ands	r2, r3
    2120:	e845 2100 	strex	r1, r2, [r5]
    2124:	2900      	cmp	r1, #0
    2126:	d1f8      	bne.n	211a <pm_system_suspend+0xca>
    2128:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    212c:	b008      	add	sp, #32
    212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2132:	bf00      	nop
    2134:	20000bc4 	.word	0x20000bc4
    2138:	000f423f 	.word	0x000f423f
    213c:	000f4240 	.word	0x000f4240
    2140:	20000a40 	.word	0x20000a40
    2144:	0000824b 	.word	0x0000824b
    2148:	20000a50 	.word	0x20000a50
    214c:	20000a44 	.word	0x20000a44

00002150 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2150:	680b      	ldr	r3, [r1, #0]
    2152:	3301      	adds	r3, #1
    2154:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2156:	4b01      	ldr	r3, [pc, #4]	; (215c <char_out+0xc>)
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	4718      	bx	r3
    215c:	200000b8 	.word	0x200000b8

00002160 <__printk_hook_install>:
	_char_out = fn;
    2160:	4b01      	ldr	r3, [pc, #4]	; (2168 <__printk_hook_install+0x8>)
    2162:	6018      	str	r0, [r3, #0]
}
    2164:	4770      	bx	lr
    2166:	bf00      	nop
    2168:	200000b8 	.word	0x200000b8

0000216c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    216c:	b507      	push	{r0, r1, r2, lr}
    216e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2170:	2100      	movs	r1, #0
{
    2172:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2174:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2176:	4803      	ldr	r0, [pc, #12]	; (2184 <vprintk+0x18>)
    2178:	a901      	add	r1, sp, #4
    217a:	f7fe ff35 	bl	fe8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    217e:	b003      	add	sp, #12
    2180:	f85d fb04 	ldr.w	pc, [sp], #4
    2184:	00002151 	.word	0x00002151

00002188 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2188:	b508      	push	{r3, lr}
	__asm__ volatile(
    218a:	f04f 0220 	mov.w	r2, #32
    218e:	f3ef 8311 	mrs	r3, BASEPRI
    2192:	f382 8812 	msr	BASEPRI_MAX, r2
    2196:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    219a:	f000 fca1 	bl	2ae0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    219e:	4803      	ldr	r0, [pc, #12]	; (21ac <sys_reboot+0x24>)
    21a0:	f005 ffe9 	bl	8176 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    21a4:	f000 f80a 	bl	21bc <arch_cpu_idle>
    21a8:	e7fc      	b.n	21a4 <sys_reboot+0x1c>
    21aa:	bf00      	nop
    21ac:	00009137 	.word	0x00009137

000021b0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    21b0:	4901      	ldr	r1, [pc, #4]	; (21b8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    21b2:	2210      	movs	r2, #16
	str	r2, [r1]
    21b4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    21b6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    21b8:	e000ed10 	.word	0xe000ed10

000021bc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    21bc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    21be:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    21c0:	f380 8811 	msr	BASEPRI, r0
	isb
    21c4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    21c8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    21cc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    21ce:	b662      	cpsie	i
	isb
    21d0:	f3bf 8f6f 	isb	sy

	bx	lr
    21d4:	4770      	bx	lr
    21d6:	bf00      	nop

000021d8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    21d8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    21da:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    21dc:	f381 8811 	msr	BASEPRI, r1

	wfe
    21e0:	bf20      	wfe

	msr	BASEPRI, r0
    21e2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    21e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    21e8:	4770      	bx	lr
    21ea:	bf00      	nop

000021ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    21ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    21ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    21f0:	4a0b      	ldr	r2, [pc, #44]	; (2220 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    21f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    21f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    21f6:	bf1e      	ittt	ne
	movne	r1, #0
    21f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    21fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    21fc:	f006 faed 	blne	87da <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2200:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2202:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2206:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    220a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    220e:	4905      	ldr	r1, [pc, #20]	; (2224 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2210:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2212:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2214:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2216:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    221a:	4903      	ldr	r1, [pc, #12]	; (2228 <_isr_wrapper+0x3c>)
	bx r1
    221c:	4708      	bx	r1
    221e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2220:	20000bc4 	.word	0x20000bc4
	ldr r1, =_sw_isr_table
    2224:	00008a04 	.word	0x00008a04
	ldr r1, =z_arm_int_exit
    2228:	00002451 	.word	0x00002451

0000222c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    222c:	bf30      	wfi
    b z_SysNmiOnReset
    222e:	f7ff bffd 	b.w	222c <z_SysNmiOnReset>
    2232:	bf00      	nop

00002234 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2234:	4912      	ldr	r1, [pc, #72]	; (2280 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2236:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2238:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    223c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    223e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2242:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2246:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2248:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    224c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2250:	4f0c      	ldr	r7, [pc, #48]	; (2284 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2252:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2256:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2258:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    225a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    225c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    225e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2260:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2262:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2266:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2268:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    226a:	f000 fae7 	bl	283c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    226e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2272:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2276:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    227a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    227e:	4770      	bx	lr
    ldr r1, =_kernel
    2280:	20000bc4 	.word	0x20000bc4
    ldr v4, =_SCS_ICSR
    2284:	e000ed04 	.word	0xe000ed04

00002288 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2288:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    228c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    228e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2292:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2296:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2298:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    229c:	2902      	cmp	r1, #2
    beq _oops
    229e:	d0ff      	beq.n	22a0 <_oops>

000022a0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    22a0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    22a2:	f005 ff86 	bl	81b2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    22a6:	bd01      	pop	{r0, pc}

000022a8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    22a8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    22aa:	2b00      	cmp	r3, #0
    22ac:	db08      	blt.n	22c0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22ae:	2201      	movs	r2, #1
    22b0:	f000 001f 	and.w	r0, r0, #31
    22b4:	fa02 f000 	lsl.w	r0, r2, r0
    22b8:	095b      	lsrs	r3, r3, #5
    22ba:	4a02      	ldr	r2, [pc, #8]	; (22c4 <arch_irq_enable+0x1c>)
    22bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    22c0:	4770      	bx	lr
    22c2:	bf00      	nop
    22c4:	e000e100 	.word	0xe000e100

000022c8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    22c8:	4b05      	ldr	r3, [pc, #20]	; (22e0 <arch_irq_is_enabled+0x18>)
    22ca:	0942      	lsrs	r2, r0, #5
    22cc:	f000 001f 	and.w	r0, r0, #31
    22d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22d4:	2301      	movs	r3, #1
    22d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    22da:	4010      	ands	r0, r2
    22dc:	4770      	bx	lr
    22de:	bf00      	nop
    22e0:	e000e100 	.word	0xe000e100

000022e4 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    22e4:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    22e6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    22e8:	2c07      	cmp	r4, #7
{
    22ea:	4605      	mov	r5, r0
    22ec:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    22ee:	d90f      	bls.n	2310 <z_arm_irq_priority_set+0x2c>
    22f0:	4a11      	ldr	r2, [pc, #68]	; (2338 <z_arm_irq_priority_set+0x54>)
    22f2:	4912      	ldr	r1, [pc, #72]	; (233c <z_arm_irq_priority_set+0x58>)
    22f4:	4812      	ldr	r0, [pc, #72]	; (2340 <z_arm_irq_priority_set+0x5c>)
    22f6:	2359      	movs	r3, #89	; 0x59
    22f8:	f005 ff3d 	bl	8176 <printk>
    22fc:	4811      	ldr	r0, [pc, #68]	; (2344 <z_arm_irq_priority_set+0x60>)
    22fe:	4631      	mov	r1, r6
    2300:	2307      	movs	r3, #7
    2302:	462a      	mov	r2, r5
    2304:	f005 ff37 	bl	8176 <printk>
    2308:	480b      	ldr	r0, [pc, #44]	; (2338 <z_arm_irq_priority_set+0x54>)
    230a:	2159      	movs	r1, #89	; 0x59
    230c:	f005 fe5f 	bl	7fce <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2310:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2312:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2314:	bfac      	ite	ge
    2316:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    231a:	4b0b      	ldrlt	r3, [pc, #44]	; (2348 <z_arm_irq_priority_set+0x64>)
    231c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    2320:	bfb8      	it	lt
    2322:	f005 050f 	andlt.w	r5, r5, #15
    2326:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2328:	bfaa      	itet	ge
    232a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    232e:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2330:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2334:	bd70      	pop	{r4, r5, r6, pc}
    2336:	bf00      	nop
    2338:	00009160 	.word	0x00009160
    233c:	00009196 	.word	0x00009196
    2340:	00008fa5 	.word	0x00008fa5
    2344:	000091b1 	.word	0x000091b1
    2348:	e000ed14 	.word	0xe000ed14

0000234c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    234c:	4a0b      	ldr	r2, [pc, #44]	; (237c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    234e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2350:	4b0b      	ldr	r3, [pc, #44]	; (2380 <z_arm_prep_c+0x34>)
    2352:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2356:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    235c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2360:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2364:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    236c:	f003 f8f8 	bl	5560 <z_bss_zero>
	z_data_copy();
    2370:	f005 fc18 	bl	7ba4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2374:	f000 f9f6 	bl	2764 <z_arm_interrupt_init>
	z_cstart();
    2378:	f003 f8fc 	bl	5574 <z_cstart>
    237c:	00000000 	.word	0x00000000
    2380:	e000ed00 	.word	0xe000ed00

00002384 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2384:	4a09      	ldr	r2, [pc, #36]	; (23ac <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2386:	490a      	ldr	r1, [pc, #40]	; (23b0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2388:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    238a:	6809      	ldr	r1, [r1, #0]
    238c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    238e:	4909      	ldr	r1, [pc, #36]	; (23b4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2390:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2392:	684b      	ldr	r3, [r1, #4]
    2394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2398:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    239a:	2300      	movs	r3, #0
    239c:	f383 8811 	msr	BASEPRI, r3
    23a0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    23a4:	6893      	ldr	r3, [r2, #8]
}
    23a6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    23a8:	4770      	bx	lr
    23aa:	bf00      	nop
    23ac:	20000bc4 	.word	0x20000bc4
    23b0:	00008d2c 	.word	0x00008d2c
    23b4:	e000ed00 	.word	0xe000ed00

000023b8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    23b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    23bc:	9b00      	ldr	r3, [sp, #0]
    23be:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    23c2:	490a      	ldr	r1, [pc, #40]	; (23ec <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    23c4:	9b01      	ldr	r3, [sp, #4]
    23c6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    23ca:	9b02      	ldr	r3, [sp, #8]
    23cc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    23d0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    23d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    23d8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    23dc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    23e0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    23e2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    23e4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    23e6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop
    23ec:	0000819b 	.word	0x0000819b

000023f0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    23f0:	4a0b      	ldr	r2, [pc, #44]	; (2420 <z_check_thread_stack_fail+0x30>)
{
    23f2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    23f4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    23f6:	b190      	cbz	r0, 241e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    23f8:	f113 0f16 	cmn.w	r3, #22
    23fc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    23fe:	d005      	beq.n	240c <z_check_thread_stack_fail+0x1c>
    2400:	f1a0 0220 	sub.w	r2, r0, #32
    2404:	429a      	cmp	r2, r3
    2406:	d806      	bhi.n	2416 <z_check_thread_stack_fail+0x26>
    2408:	4283      	cmp	r3, r0
    240a:	d204      	bcs.n	2416 <z_check_thread_stack_fail+0x26>
    240c:	4281      	cmp	r1, r0
    240e:	bf2c      	ite	cs
    2410:	2100      	movcs	r1, #0
    2412:	2101      	movcc	r1, #1
    2414:	e000      	b.n	2418 <z_check_thread_stack_fail+0x28>
    2416:	2100      	movs	r1, #0
    2418:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    241a:	bf08      	it	eq
    241c:	2000      	moveq	r0, #0
}
    241e:	4770      	bx	lr
    2420:	20000bc4 	.word	0x20000bc4

00002424 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2424:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2426:	4b09      	ldr	r3, [pc, #36]	; (244c <arch_switch_to_main_thread+0x28>)
    2428:	6098      	str	r0, [r3, #8]
{
    242a:	460d      	mov	r5, r1
    242c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    242e:	f000 fa05 	bl	283c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2432:	4620      	mov	r0, r4
    2434:	f385 8809 	msr	PSP, r5
    2438:	2100      	movs	r1, #0
    243a:	b663      	cpsie	if
    243c:	f381 8811 	msr	BASEPRI, r1
    2440:	f3bf 8f6f 	isb	sy
    2444:	2200      	movs	r2, #0
    2446:	2300      	movs	r3, #0
    2448:	f005 fea7 	bl	819a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    244c:	20000bc4 	.word	0x20000bc4

00002450 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2450:	4b04      	ldr	r3, [pc, #16]	; (2464 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2452:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2454:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2456:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2458:	d003      	beq.n	2462 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    245a:	4903      	ldr	r1, [pc, #12]	; (2468 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    245c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2460:	600a      	str	r2, [r1, #0]

00002462 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2462:	4770      	bx	lr
	ldr r3, =_kernel
    2464:	20000bc4 	.word	0x20000bc4
	ldr r1, =_SCS_ICSR
    2468:	e000ed04 	.word	0xe000ed04

0000246c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    246c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2470:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2474:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2476:	4672      	mov	r2, lr
	bl z_arm_fault
    2478:	f000 f8ae 	bl	25d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    247c:	bd01      	pop	{r0, pc}
    247e:	bf00      	nop

00002480 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2480:	2000      	movs	r0, #0
    msr CONTROL, r0
    2482:	f380 8814 	msr	CONTROL, r0
    isb
    2486:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    248a:	f006 fa29 	bl	88e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    248e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2490:	490d      	ldr	r1, [pc, #52]	; (24c8 <__start+0x48>)
    str r0, [r1]
    2492:	6008      	str	r0, [r1, #0]
    dsb
    2494:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2498:	480c      	ldr	r0, [pc, #48]	; (24cc <__start+0x4c>)
    msr msp, r0
    249a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    249e:	f000 f97d 	bl	279c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    24a2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    24a4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    24a8:	4809      	ldr	r0, [pc, #36]	; (24d0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    24aa:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    24ae:	1840      	adds	r0, r0, r1
    msr PSP, r0
    24b0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    24b4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    24b8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    24ba:	4308      	orrs	r0, r1
    msr CONTROL, r0
    24bc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    24c0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    24c4:	f7ff ff42 	bl	234c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    24c8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    24cc:	20002260 	.word	0x20002260
    ldr r0, =z_interrupt_stacks
    24d0:	200023e0 	.word	0x200023e0

000024d4 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    24d4:	4b23      	ldr	r3, [pc, #140]	; (2564 <mem_manage_fault+0x90>)
{
    24d6:	b570      	push	{r4, r5, r6, lr}
    24d8:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    24da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    24dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    24de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    24e0:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    24e2:	0790      	lsls	r0, r2, #30
    24e4:	d51a      	bpl.n	251c <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    24e6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    24e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24ea:	0612      	lsls	r2, r2, #24
    24ec:	d516      	bpl.n	251c <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    24ee:	b119      	cbz	r1, 24f8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    24f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    24f6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    24f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24fe:	06d6      	lsls	r6, r2, #27
    2500:	d40f      	bmi.n	2522 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2504:	0799      	lsls	r1, r3, #30
    2506:	d40c      	bmi.n	2522 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2508:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    250a:	4a16      	ldr	r2, [pc, #88]	; (2564 <mem_manage_fault+0x90>)
    250c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    250e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2512:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2514:	2300      	movs	r3, #0
    2516:	702b      	strb	r3, [r5, #0]

	return reason;
}
    2518:	4620      	mov	r0, r4
    251a:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    251c:	f06f 0015 	mvn.w	r0, #21
    2520:	e7ea      	b.n	24f8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2522:	4e10      	ldr	r6, [pc, #64]	; (2564 <mem_manage_fault+0x90>)
    2524:	6873      	ldr	r3, [r6, #4]
    2526:	051a      	lsls	r2, r3, #20
    2528:	d5ee      	bpl.n	2508 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    252a:	4621      	mov	r1, r4
    252c:	f7ff ff60 	bl	23f0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2530:	4604      	mov	r4, r0
    2532:	b118      	cbz	r0, 253c <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2534:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2538:	2402      	movs	r4, #2
    253a:	e7e6      	b.n	250a <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    253c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    253e:	06db      	lsls	r3, r3, #27
    2540:	d5e2      	bpl.n	2508 <mem_manage_fault+0x34>
    2542:	4a09      	ldr	r2, [pc, #36]	; (2568 <mem_manage_fault+0x94>)
    2544:	4909      	ldr	r1, [pc, #36]	; (256c <mem_manage_fault+0x98>)
    2546:	480a      	ldr	r0, [pc, #40]	; (2570 <mem_manage_fault+0x9c>)
    2548:	f240 1349 	movw	r3, #329	; 0x149
    254c:	f005 fe13 	bl	8176 <printk>
    2550:	4808      	ldr	r0, [pc, #32]	; (2574 <mem_manage_fault+0xa0>)
    2552:	f005 fe10 	bl	8176 <printk>
    2556:	4804      	ldr	r0, [pc, #16]	; (2568 <mem_manage_fault+0x94>)
    2558:	f240 1149 	movw	r1, #329	; 0x149
    255c:	f005 fd37 	bl	7fce <assert_post_action>
    2560:	e7d3      	b.n	250a <mem_manage_fault+0x36>
    2562:	bf00      	nop
    2564:	e000ed00 	.word	0xe000ed00
    2568:	000091f1 	.word	0x000091f1
    256c:	0000922b 	.word	0x0000922b
    2570:	00008fa5 	.word	0x00008fa5
    2574:	00009275 	.word	0x00009275

00002578 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2578:	4b0d      	ldr	r3, [pc, #52]	; (25b0 <bus_fault.isra.0+0x38>)
    257a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    257c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    257e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2580:	0592      	lsls	r2, r2, #22
    2582:	d508      	bpl.n	2596 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2584:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2588:	0412      	lsls	r2, r2, #16
    258a:	d504      	bpl.n	2596 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    258c:	b118      	cbz	r0, 2596 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    258e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2594:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2596:	4b06      	ldr	r3, [pc, #24]	; (25b0 <bus_fault.isra.0+0x38>)
    2598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    259a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    259c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    259e:	bf58      	it	pl
    25a0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    25a4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25a6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    25aa:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25ac:	7008      	strb	r0, [r1, #0]

	return reason;
}
    25ae:	4770      	bx	lr
    25b0:	e000ed00 	.word	0xe000ed00

000025b4 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25b4:	4b07      	ldr	r3, [pc, #28]	; (25d4 <usage_fault.isra.0+0x20>)
    25b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    25b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    25ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    25bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    25be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    25c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    25c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25c4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    25c8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    25cc:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    25ce:	2000      	movs	r0, #0
    25d0:	4770      	bx	lr
    25d2:	bf00      	nop
    25d4:	e000ed00 	.word	0xe000ed00

000025d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    25d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    25da:	4b54      	ldr	r3, [pc, #336]	; (272c <z_arm_fault+0x154>)
    25dc:	685c      	ldr	r4, [r3, #4]
{
    25de:	b08a      	sub	sp, #40	; 0x28
    25e0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    25e2:	f3c4 0408 	ubfx	r4, r4, #0, #9
    25e6:	2600      	movs	r6, #0
    25e8:	f386 8811 	msr	BASEPRI, r6
    25ec:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    25f0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    25f4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    25f8:	d108      	bne.n	260c <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    25fa:	f002 030c 	and.w	r3, r2, #12
    25fe:	2b08      	cmp	r3, #8
    2600:	d004      	beq.n	260c <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2602:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    2604:	bf5c      	itt	pl
    2606:	4605      	movpl	r5, r0
			*nested_exc = true;
    2608:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    260a:	b97d      	cbnz	r5, 262c <z_arm_fault+0x54>
    260c:	4a48      	ldr	r2, [pc, #288]	; (2730 <z_arm_fault+0x158>)
    260e:	4949      	ldr	r1, [pc, #292]	; (2734 <z_arm_fault+0x15c>)
    2610:	4849      	ldr	r0, [pc, #292]	; (2738 <z_arm_fault+0x160>)
    2612:	f240 33f2 	movw	r3, #1010	; 0x3f2
    2616:	f005 fdae 	bl	8176 <printk>
    261a:	4848      	ldr	r0, [pc, #288]	; (273c <z_arm_fault+0x164>)
    261c:	f005 fdab 	bl	8176 <printk>
    2620:	4843      	ldr	r0, [pc, #268]	; (2730 <z_arm_fault+0x158>)
    2622:	f240 31f2 	movw	r1, #1010	; 0x3f2
    2626:	f005 fcd2 	bl	7fce <assert_post_action>
    262a:	2500      	movs	r5, #0
	*recoverable = false;
    262c:	2300      	movs	r3, #0
    262e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2632:	1ee3      	subs	r3, r4, #3
    2634:	2b03      	cmp	r3, #3
    2636:	d872      	bhi.n	271e <z_arm_fault+0x146>
    2638:	e8df f003 	tbb	[pc, r3]
    263c:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2640:	4b3a      	ldr	r3, [pc, #232]	; (272c <z_arm_fault+0x154>)
    2642:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2644:	f014 0402 	ands.w	r4, r4, #2
    2648:	d169      	bne.n	271e <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    264a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    264c:	2a00      	cmp	r2, #0
    264e:	db18      	blt.n	2682 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2652:	005b      	lsls	r3, r3, #1
    2654:	d54e      	bpl.n	26f4 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    2656:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2658:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    265c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2660:	429a      	cmp	r2, r3
    2662:	d00d      	beq.n	2680 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    2664:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2668:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	b30b      	cbz	r3, 26b4 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2670:	f10d 0207 	add.w	r2, sp, #7
    2674:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2676:	4628      	mov	r0, r5
    2678:	f7ff ff2c 	bl	24d4 <mem_manage_fault>
		reason = usage_fault(esf);
    267c:	4604      	mov	r4, r0
		break;
    267e:	e000      	b.n	2682 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2680:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2682:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2686:	b99b      	cbnz	r3, 26b0 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2688:	2220      	movs	r2, #32
    268a:	4629      	mov	r1, r5
    268c:	a802      	add	r0, sp, #8
    268e:	f005 fdc8 	bl	8222 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2692:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2694:	2e00      	cmp	r6, #0
    2696:	d044      	beq.n	2722 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2698:	f3c3 0208 	ubfx	r2, r3, #0, #9
    269c:	b922      	cbnz	r2, 26a8 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    269e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    26a2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    26a6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    26a8:	a902      	add	r1, sp, #8
    26aa:	4620      	mov	r0, r4
    26ac:	f005 fd7f 	bl	81ae <z_arm_fatal_error>
}
    26b0:	b00a      	add	sp, #40	; 0x28
    26b2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    26b4:	4b22      	ldr	r3, [pc, #136]	; (2740 <z_arm_fault+0x168>)
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	b12b      	cbz	r3, 26c6 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    26ba:	f10d 0107 	add.w	r1, sp, #7
    26be:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    26c0:	f7ff ff5a 	bl	2578 <bus_fault.isra.0>
    26c4:	e7da      	b.n	267c <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    26c6:	4b1f      	ldr	r3, [pc, #124]	; (2744 <z_arm_fault+0x16c>)
    26c8:	881b      	ldrh	r3, [r3, #0]
    26ca:	b29b      	uxth	r3, r3
    26cc:	b113      	cbz	r3, 26d4 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    26ce:	f7ff ff71 	bl	25b4 <usage_fault.isra.0>
    26d2:	e7d3      	b.n	267c <z_arm_fault+0xa4>
			__ASSERT(0,
    26d4:	491c      	ldr	r1, [pc, #112]	; (2748 <z_arm_fault+0x170>)
    26d6:	4a16      	ldr	r2, [pc, #88]	; (2730 <z_arm_fault+0x158>)
    26d8:	4817      	ldr	r0, [pc, #92]	; (2738 <z_arm_fault+0x160>)
    26da:	f240 23c3 	movw	r3, #707	; 0x2c3
    26de:	f005 fd4a 	bl	8176 <printk>
    26e2:	481a      	ldr	r0, [pc, #104]	; (274c <z_arm_fault+0x174>)
    26e4:	f005 fd47 	bl	8176 <printk>
    26e8:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    26ec:	4810      	ldr	r0, [pc, #64]	; (2730 <z_arm_fault+0x158>)
    26ee:	f005 fc6e 	bl	7fce <assert_post_action>
    26f2:	e7c6      	b.n	2682 <z_arm_fault+0xaa>
    26f4:	4914      	ldr	r1, [pc, #80]	; (2748 <z_arm_fault+0x170>)
    26f6:	4a0e      	ldr	r2, [pc, #56]	; (2730 <z_arm_fault+0x158>)
    26f8:	480f      	ldr	r0, [pc, #60]	; (2738 <z_arm_fault+0x160>)
    26fa:	f240 23c7 	movw	r3, #711	; 0x2c7
    26fe:	f005 fd3a 	bl	8176 <printk>
    2702:	4813      	ldr	r0, [pc, #76]	; (2750 <z_arm_fault+0x178>)
    2704:	f005 fd37 	bl	8176 <printk>
    2708:	f240 21c7 	movw	r1, #711	; 0x2c7
    270c:	e7ee      	b.n	26ec <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    270e:	f10d 0207 	add.w	r2, sp, #7
    2712:	2100      	movs	r1, #0
    2714:	e7af      	b.n	2676 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    2716:	f10d 0107 	add.w	r1, sp, #7
    271a:	2000      	movs	r0, #0
    271c:	e7d0      	b.n	26c0 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    271e:	2400      	movs	r4, #0
    2720:	e7af      	b.n	2682 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2722:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2726:	f023 0301 	bic.w	r3, r3, #1
    272a:	e7bc      	b.n	26a6 <z_arm_fault+0xce>
    272c:	e000ed00 	.word	0xe000ed00
    2730:	000091f1 	.word	0x000091f1
    2734:	00009298 	.word	0x00009298
    2738:	00008fa5 	.word	0x00008fa5
    273c:	000092ab 	.word	0x000092ab
    2740:	e000ed29 	.word	0xe000ed29
    2744:	e000ed2a 	.word	0xe000ed2a
    2748:	0000978b 	.word	0x0000978b
    274c:	000092e9 	.word	0x000092e9
    2750:	0000930d 	.word	0x0000930d

00002754 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2754:	4a02      	ldr	r2, [pc, #8]	; (2760 <z_arm_fault_init+0xc>)
    2756:	6953      	ldr	r3, [r2, #20]
    2758:	f043 0310 	orr.w	r3, r3, #16
    275c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    275e:	4770      	bx	lr
    2760:	e000ed00 	.word	0xe000ed00

00002764 <z_arm_interrupt_init>:
    2764:	4804      	ldr	r0, [pc, #16]	; (2778 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2766:	2300      	movs	r3, #0
    2768:	2120      	movs	r1, #32
    276a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    276c:	3301      	adds	r3, #1
    276e:	2b30      	cmp	r3, #48	; 0x30
    2770:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2774:	d1f9      	bne.n	276a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2776:	4770      	bx	lr
    2778:	e000e100 	.word	0xe000e100

0000277c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    277c:	4a06      	ldr	r2, [pc, #24]	; (2798 <z_arm_clear_arm_mpu_config+0x1c>)
    277e:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2780:	2300      	movs	r3, #0
	int num_regions =
    2782:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2786:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2788:	428b      	cmp	r3, r1
    278a:	d100      	bne.n	278e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    278c:	4770      	bx	lr
  MPU->RNR = rnr;
    278e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2790:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2792:	3301      	adds	r3, #1
    2794:	e7f8      	b.n	2788 <z_arm_clear_arm_mpu_config+0xc>
    2796:	bf00      	nop
    2798:	e000ed90 	.word	0xe000ed90

0000279c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    279c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    279e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    27a0:	2300      	movs	r3, #0
    27a2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    27a6:	f7ff ffe9 	bl	277c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    27aa:	4b14      	ldr	r3, [pc, #80]	; (27fc <z_arm_init_arch_hw_at_boot+0x60>)
    27ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    27b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    27b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    27bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    27c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    27c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    27c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    27cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    27d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    27d4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    27d8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    27dc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    27e0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    27e4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    27e8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    27ec:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    27f0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    27f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27f6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    27fa:	bd08      	pop	{r3, pc}
    27fc:	e000e100 	.word	0xe000e100

00002800 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <z_impl_k_thread_abort+0x1c>)
    2802:	689b      	ldr	r3, [r3, #8]
    2804:	4283      	cmp	r3, r0
    2806:	d107      	bne.n	2818 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2808:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    280c:	b123      	cbz	r3, 2818 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    280e:	4a04      	ldr	r2, [pc, #16]	; (2820 <z_impl_k_thread_abort+0x20>)
    2810:	6853      	ldr	r3, [r2, #4]
    2812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2816:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2818:	f004 baa6 	b.w	6d68 <z_thread_abort>
    281c:	20000bc4 	.word	0x20000bc4
    2820:	e000ed00 	.word	0xe000ed00

00002824 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2824:	4b02      	ldr	r3, [pc, #8]	; (2830 <z_arm_configure_static_mpu_regions+0xc>)
    2826:	4a03      	ldr	r2, [pc, #12]	; (2834 <z_arm_configure_static_mpu_regions+0x10>)
    2828:	4803      	ldr	r0, [pc, #12]	; (2838 <z_arm_configure_static_mpu_regions+0x14>)
    282a:	2101      	movs	r1, #1
    282c:	f000 b868 	b.w	2900 <arm_core_mpu_configure_static_mpu_regions>
    2830:	20040000 	.word	0x20040000
    2834:	20000000 	.word	0x20000000
    2838:	00008be4 	.word	0x00008be4

0000283c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    283c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    283e:	4b05      	ldr	r3, [pc, #20]	; (2854 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2840:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2842:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2844:	4a04      	ldr	r2, [pc, #16]	; (2858 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2846:	2120      	movs	r1, #32
    2848:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    284c:	4618      	mov	r0, r3
    284e:	2101      	movs	r1, #1
    2850:	f000 b87e 	b.w	2950 <arm_core_mpu_configure_dynamic_mpu_regions>
    2854:	20000a54 	.word	0x20000a54
    2858:	150b0000 	.word	0x150b0000

0000285c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    285c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    285e:	4f1e      	ldr	r7, [pc, #120]	; (28d8 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2860:	2600      	movs	r6, #0
    2862:	428e      	cmp	r6, r1
    2864:	db01      	blt.n	286a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2866:	4610      	mov	r0, r2
    2868:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    286a:	6844      	ldr	r4, [r0, #4]
    286c:	b384      	cbz	r4, 28d0 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    286e:	b153      	cbz	r3, 2886 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2870:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2874:	ea14 0f0c 	tst.w	r4, ip
    2878:	d118      	bne.n	28ac <mpu_configure_regions+0x50>
		&&
    287a:	2c1f      	cmp	r4, #31
    287c:	d916      	bls.n	28ac <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    287e:	6805      	ldr	r5, [r0, #0]
		&&
    2880:	ea1c 0f05 	tst.w	ip, r5
    2884:	d112      	bne.n	28ac <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2886:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2888:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    288a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    288e:	b2d2      	uxtb	r2, r2
    2890:	d90f      	bls.n	28b2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2892:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2896:	d80e      	bhi.n	28b6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2898:	3c01      	subs	r4, #1
    289a:	fab4 f484 	clz	r4, r4
    289e:	f1c4 041f 	rsb	r4, r4, #31
    28a2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    28a4:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    28a6:	ea4c 0404 	orr.w	r4, ip, r4
    28aa:	d906      	bls.n	28ba <mpu_configure_regions+0x5e>
			return -EINVAL;
    28ac:	f06f 0215 	mvn.w	r2, #21
    28b0:	e7d9      	b.n	2866 <mpu_configure_regions+0xa>
		return REGION_32B;
    28b2:	2408      	movs	r4, #8
    28b4:	e7f6      	b.n	28a4 <mpu_configure_regions+0x48>
		return REGION_4G;
    28b6:	243e      	movs	r4, #62	; 0x3e
    28b8:	e7f4      	b.n	28a4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28ba:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    28be:	4315      	orrs	r5, r2
    28c0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28c4:	f044 0401 	orr.w	r4, r4, #1
    28c8:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28ca:	60fd      	str	r5, [r7, #12]
		reg_index++;
    28cc:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28ce:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    28d0:	3601      	adds	r6, #1
    28d2:	300c      	adds	r0, #12
    28d4:	e7c5      	b.n	2862 <mpu_configure_regions+0x6>
    28d6:	bf00      	nop
    28d8:	e000ed90 	.word	0xe000ed90

000028dc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    28dc:	4b03      	ldr	r3, [pc, #12]	; (28ec <arm_core_mpu_enable+0x10>)
    28de:	2205      	movs	r2, #5
    28e0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    28e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28e6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    28ea:	4770      	bx	lr
    28ec:	e000ed90 	.word	0xe000ed90

000028f0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    28f0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    28f4:	4b01      	ldr	r3, [pc, #4]	; (28fc <arm_core_mpu_disable+0xc>)
    28f6:	2200      	movs	r2, #0
    28f8:	605a      	str	r2, [r3, #4]
}
    28fa:	4770      	bx	lr
    28fc:	e000ed90 	.word	0xe000ed90

00002900 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2900:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2902:	4d0e      	ldr	r5, [pc, #56]	; (293c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2904:	2301      	movs	r3, #1
    2906:	782a      	ldrb	r2, [r5, #0]
    2908:	460c      	mov	r4, r1
    290a:	f7ff ffa7 	bl	285c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    290e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2910:	3016      	adds	r0, #22
    2912:	d111      	bne.n	2938 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2914:	f240 1311 	movw	r3, #273	; 0x111
    2918:	4a09      	ldr	r2, [pc, #36]	; (2940 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    291a:	490a      	ldr	r1, [pc, #40]	; (2944 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    291c:	480a      	ldr	r0, [pc, #40]	; (2948 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    291e:	f005 fc2a 	bl	8176 <printk>
    2922:	4621      	mov	r1, r4
    2924:	4809      	ldr	r0, [pc, #36]	; (294c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2926:	f005 fc26 	bl	8176 <printk>
			regions_num);
	}
}
    292a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    292e:	4804      	ldr	r0, [pc, #16]	; (2940 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2930:	f240 1111 	movw	r1, #273	; 0x111
    2934:	f005 bb4b 	b.w	7fce <assert_post_action>
}
    2938:	bd38      	pop	{r3, r4, r5, pc}
    293a:	bf00      	nop
    293c:	20000c2e 	.word	0x20000c2e
    2940:	0000933d 	.word	0x0000933d
    2944:	0000978b 	.word	0x0000978b
    2948:	00008fa5 	.word	0x00008fa5
    294c:	00009374 	.word	0x00009374

00002950 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2950:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2952:	4a12      	ldr	r2, [pc, #72]	; (299c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2954:	2300      	movs	r3, #0
    2956:	7812      	ldrb	r2, [r2, #0]
    2958:	460c      	mov	r4, r1
    295a:	f7ff ff7f 	bl	285c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    295e:	f110 0f16 	cmn.w	r0, #22
    2962:	d008      	beq.n	2976 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2964:	4b0e      	ldr	r3, [pc, #56]	; (29a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2966:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2968:	2807      	cmp	r0, #7
    296a:	dd00      	ble.n	296e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    296c:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    296e:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2970:	611a      	str	r2, [r3, #16]
    2972:	3001      	adds	r0, #1
    2974:	e7f8      	b.n	2968 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2976:	4a0b      	ldr	r2, [pc, #44]	; (29a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2978:	490b      	ldr	r1, [pc, #44]	; (29a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    297a:	480c      	ldr	r0, [pc, #48]	; (29ac <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    297c:	f44f 7398 	mov.w	r3, #304	; 0x130
    2980:	f005 fbf9 	bl	8176 <printk>
    2984:	4621      	mov	r1, r4
    2986:	480a      	ldr	r0, [pc, #40]	; (29b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2988:	f005 fbf5 	bl	8176 <printk>
}
    298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2990:	4804      	ldr	r0, [pc, #16]	; (29a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2992:	f44f 7198 	mov.w	r1, #304	; 0x130
    2996:	f005 bb1a 	b.w	7fce <assert_post_action>
    299a:	bf00      	nop
    299c:	20000c2e 	.word	0x20000c2e
    29a0:	e000ed90 	.word	0xe000ed90
    29a4:	0000933d 	.word	0x0000933d
    29a8:	0000978b 	.word	0x0000978b
    29ac:	00008fa5 	.word	0x00008fa5
    29b0:	000093a0 	.word	0x000093a0

000029b4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    29b4:	4925      	ldr	r1, [pc, #148]	; (2a4c <z_arm_mpu_init+0x98>)
{
    29b6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    29b8:	680c      	ldr	r4, [r1, #0]
    29ba:	2c08      	cmp	r4, #8
    29bc:	d913      	bls.n	29e6 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    29be:	f44f 73a4 	mov.w	r3, #328	; 0x148
    29c2:	4a23      	ldr	r2, [pc, #140]	; (2a50 <z_arm_mpu_init+0x9c>)
    29c4:	4923      	ldr	r1, [pc, #140]	; (2a54 <z_arm_mpu_init+0xa0>)
    29c6:	4824      	ldr	r0, [pc, #144]	; (2a58 <z_arm_mpu_init+0xa4>)
    29c8:	f005 fbd5 	bl	8176 <printk>
    29cc:	4823      	ldr	r0, [pc, #140]	; (2a5c <z_arm_mpu_init+0xa8>)
    29ce:	2208      	movs	r2, #8
    29d0:	4621      	mov	r1, r4
    29d2:	f005 fbd0 	bl	8176 <printk>
    29d6:	481e      	ldr	r0, [pc, #120]	; (2a50 <z_arm_mpu_init+0x9c>)
    29d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    29dc:	f005 faf7 	bl	7fce <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    29e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    29e4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    29e6:	f7ff ff83 	bl	28f0 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    29ea:	6848      	ldr	r0, [r1, #4]
    29ec:	491c      	ldr	r1, [pc, #112]	; (2a60 <z_arm_mpu_init+0xac>)
    29ee:	2200      	movs	r2, #0
    29f0:	4294      	cmp	r4, r2
    29f2:	f100 000c 	add.w	r0, r0, #12
    29f6:	d119      	bne.n	2a2c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    29f8:	4b1a      	ldr	r3, [pc, #104]	; (2a64 <z_arm_mpu_init+0xb0>)
    29fa:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    29fc:	f7ff ff6e 	bl	28dc <arm_core_mpu_enable>
	__ASSERT(
    2a00:	680b      	ldr	r3, [r1, #0]
    2a02:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2a06:	2b08      	cmp	r3, #8
    2a08:	d00e      	beq.n	2a28 <z_arm_mpu_init+0x74>
    2a0a:	4917      	ldr	r1, [pc, #92]	; (2a68 <z_arm_mpu_init+0xb4>)
    2a0c:	4a10      	ldr	r2, [pc, #64]	; (2a50 <z_arm_mpu_init+0x9c>)
    2a0e:	4812      	ldr	r0, [pc, #72]	; (2a58 <z_arm_mpu_init+0xa4>)
    2a10:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2a14:	f005 fbaf 	bl	8176 <printk>
    2a18:	4814      	ldr	r0, [pc, #80]	; (2a6c <z_arm_mpu_init+0xb8>)
    2a1a:	f005 fbac 	bl	8176 <printk>
    2a1e:	480c      	ldr	r0, [pc, #48]	; (2a50 <z_arm_mpu_init+0x9c>)
    2a20:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2a24:	f005 fad3 	bl	7fce <assert_post_action>
	return 0;
    2a28:	2000      	movs	r0, #0
    2a2a:	e7db      	b.n	29e4 <z_arm_mpu_init+0x30>
    2a2c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2a2e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2a32:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2a36:	4313      	orrs	r3, r2
    2a38:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2a3c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2a3e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2a42:	f043 0301 	orr.w	r3, r3, #1
    2a46:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2a48:	3201      	adds	r2, #1
    2a4a:	e7d1      	b.n	29f0 <z_arm_mpu_init+0x3c>
    2a4c:	00008bf0 	.word	0x00008bf0
    2a50:	0000933d 	.word	0x0000933d
    2a54:	0000978b 	.word	0x0000978b
    2a58:	00008fa5 	.word	0x00008fa5
    2a5c:	000093cd 	.word	0x000093cd
    2a60:	e000ed90 	.word	0xe000ed90
    2a64:	20000c2e 	.word	0x20000c2e
    2a68:	00009401 	.word	0x00009401
    2a6c:	00009451 	.word	0x00009451

00002a70 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2a70:	4b01      	ldr	r3, [pc, #4]	; (2a78 <__stdout_hook_install+0x8>)
    2a72:	6018      	str	r0, [r3, #0]
}
    2a74:	4770      	bx	lr
    2a76:	bf00      	nop
    2a78:	200000bc 	.word	0x200000bc

00002a7c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2a7c:	f04f 0320 	mov.w	r3, #32
    2a80:	f3ef 8111 	mrs	r1, BASEPRI
    2a84:	f383 8812 	msr	BASEPRI_MAX, r3
    2a88:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2a8c:	4a0f      	ldr	r2, [pc, #60]	; (2acc <nordicsemi_nrf52_init+0x50>)
    2a8e:	2301      	movs	r3, #1
    2a90:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a98:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2a9c:	4a0c      	ldr	r2, [pc, #48]	; (2ad0 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2a9e:	6812      	ldr	r2, [r2, #0]
    2aa0:	2a08      	cmp	r2, #8
    2aa2:	d108      	bne.n	2ab6 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2aa4:	4a0b      	ldr	r2, [pc, #44]	; (2ad4 <nordicsemi_nrf52_init+0x58>)
    2aa6:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2aa8:	2a05      	cmp	r2, #5
    2aaa:	d804      	bhi.n	2ab6 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2aac:	480a      	ldr	r0, [pc, #40]	; (2ad8 <nordicsemi_nrf52_init+0x5c>)
    2aae:	5c82      	ldrb	r2, [r0, r2]
    2ab0:	b10a      	cbz	r2, 2ab6 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2ab2:	4a0a      	ldr	r2, [pc, #40]	; (2adc <nordicsemi_nrf52_init+0x60>)
    2ab4:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aba:	2201      	movs	r2, #1
    2abc:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2ac0:	f381 8811 	msr	BASEPRI, r1
    2ac4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2ac8:	2000      	movs	r0, #0
    2aca:	4770      	bx	lr
    2acc:	4001e000 	.word	0x4001e000
    2ad0:	10000130 	.word	0x10000130
    2ad4:	10000134 	.word	0x10000134
    2ad8:	00009481 	.word	0x00009481
    2adc:	40000638 	.word	0x40000638

00002ae0 <sys_arch_reboot>:
    *p_gpregret = val;
    2ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ae4:	b2c0      	uxtb	r0, r0
    2ae6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2aea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2aee:	4905      	ldr	r1, [pc, #20]	; (2b04 <sys_arch_reboot+0x24>)
    2af0:	4b05      	ldr	r3, [pc, #20]	; (2b08 <sys_arch_reboot+0x28>)
    2af2:	68ca      	ldr	r2, [r1, #12]
    2af4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2af8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2afa:	60cb      	str	r3, [r1, #12]
    2afc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2b00:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2b02:	e7fd      	b.n	2b00 <sys_arch_reboot+0x20>
    2b04:	e000ed00 	.word	0xe000ed00
    2b08:	05fa0004 	.word	0x05fa0004

00002b0c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2b0c:	b120      	cbz	r0, 2b18 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2b0e:	4b03      	ldr	r3, [pc, #12]	; (2b1c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2b10:	0180      	lsls	r0, r0, #6
    2b12:	f043 0301 	orr.w	r3, r3, #1
    2b16:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2b18:	4770      	bx	lr
    2b1a:	bf00      	nop
    2b1c:	00008bb0 	.word	0x00008bb0

00002b20 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    2b20:	4a05      	ldr	r2, [pc, #20]	; (2b38 <adc_context_start_sampling.isra.0+0x18>)
    2b22:	2301      	movs	r3, #1
    2b24:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    2b28:	b108      	cbz	r0, 2b2e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b2a:	60d3      	str	r3, [r2, #12]
}
    2b2c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b2e:	6013      	str	r3, [r2, #0]
    2b30:	4a02      	ldr	r2, [pc, #8]	; (2b3c <adc_context_start_sampling.isra.0+0x1c>)
    2b32:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2b34:	4770      	bx	lr
    2b36:	bf00      	nop
    2b38:	40007000 	.word	0x40007000
    2b3c:	40007004 	.word	0x40007004

00002b40 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    2b40:	7908      	ldrb	r0, [r1, #4]
{
    2b42:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    2b44:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    2b48:	2c07      	cmp	r4, #7
    2b4a:	d81f      	bhi.n	2b8c <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    2b4c:	780b      	ldrb	r3, [r1, #0]
    2b4e:	2b09      	cmp	r3, #9
    2b50:	d81c      	bhi.n	2b8c <adc_nrfx_channel_setup+0x4c>
    2b52:	e8df f003 	tbb	[pc, r3]
    2b56:	0606      	.short	0x0606
    2b58:	1b060606 	.word	0x1b060606
    2b5c:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    2b60:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    2b62:	784a      	ldrb	r2, [r1, #1]
    2b64:	2a03      	cmp	r2, #3
    2b66:	d018      	beq.n	2b9a <adc_nrfx_channel_setup+0x5a>
    2b68:	2a04      	cmp	r2, #4
    2b6a:	d10f      	bne.n	2b8c <adc_nrfx_channel_setup+0x4c>
    2b6c:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    2b6e:	884a      	ldrh	r2, [r1, #2]
    2b70:	f244 060a 	movw	r6, #16394	; 0x400a
    2b74:	42b2      	cmp	r2, r6
    2b76:	d044      	beq.n	2c02 <adc_nrfx_channel_setup+0xc2>
    2b78:	d811      	bhi.n	2b9e <adc_nrfx_channel_setup+0x5e>
    2b7a:	f244 0603 	movw	r6, #16387	; 0x4003
    2b7e:	42b2      	cmp	r2, r6
    2b80:	d03b      	beq.n	2bfa <adc_nrfx_channel_setup+0xba>
    2b82:	f244 0605 	movw	r6, #16389	; 0x4005
    2b86:	42b2      	cmp	r2, r6
    2b88:	d039      	beq.n	2bfe <adc_nrfx_channel_setup+0xbe>
    2b8a:	b3d2      	cbz	r2, 2c02 <adc_nrfx_channel_setup+0xc2>
    2b8c:	f06f 0015 	mvn.w	r0, #21
    2b90:	e032      	b.n	2bf8 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    2b92:	2306      	movs	r3, #6
		break;
    2b94:	e7e5      	b.n	2b62 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    2b96:	2307      	movs	r3, #7
		break;
    2b98:	e7e3      	b.n	2b62 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    2b9a:	2501      	movs	r5, #1
    2b9c:	e7e7      	b.n	2b6e <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    2b9e:	f244 0614 	movw	r6, #16404	; 0x4014
    2ba2:	42b2      	cmp	r2, r6
    2ba4:	d02f      	beq.n	2c06 <adc_nrfx_channel_setup+0xc6>
    2ba6:	f244 0628 	movw	r6, #16424	; 0x4028
    2baa:	42b2      	cmp	r2, r6
    2bac:	d02d      	beq.n	2c0a <adc_nrfx_channel_setup+0xca>
    2bae:	f244 060f 	movw	r6, #16399	; 0x400f
    2bb2:	42b2      	cmp	r2, r6
    2bb4:	d1ea      	bne.n	2b8c <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    2bb6:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2bb8:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    2bbc:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2bbe:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    2bc2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    2bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    2bca:	0122      	lsls	r2, r4, #4
    2bcc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2bd0:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    2bd4:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    2bd6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    2bda:	0123      	lsls	r3, r4, #4
    2bdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2be0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2be4:	798a      	ldrb	r2, [r1, #6]
    2be6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    2bea:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    2bee:	4b08      	ldr	r3, [pc, #32]	; (2c10 <adc_nrfx_channel_setup+0xd0>)
    2bf0:	441c      	add	r4, r3
    2bf2:	794b      	ldrb	r3, [r1, #5]
    2bf4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
    2bf8:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    2bfa:	2200      	movs	r2, #0
    2bfc:	e7dc      	b.n	2bb8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    2bfe:	2201      	movs	r2, #1
    2c00:	e7da      	b.n	2bb8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    2c02:	2202      	movs	r2, #2
    2c04:	e7d8      	b.n	2bb8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    2c06:	2204      	movs	r2, #4
    2c08:	e7d6      	b.n	2bb8 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    2c0a:	2205      	movs	r2, #5
    2c0c:	e7d4      	b.n	2bb8 <adc_nrfx_channel_setup+0x78>
    2c0e:	bf00      	nop
    2c10:	20000000 	.word	0x20000000

00002c14 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c14:	4b2d      	ldr	r3, [pc, #180]	; (2ccc <saadc_irq_handler+0xb8>)
    2c16:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
    2c18:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    2c1a:	2a00      	cmp	r2, #0
    2c1c:	d048      	beq.n	2cb0 <saadc_irq_handler+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c1e:	2200      	movs	r2, #0
    2c20:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2c22:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    2c24:	4c2a      	ldr	r4, [pc, #168]	; (2cd0 <saadc_irq_handler+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c26:	4b2b      	ldr	r3, [pc, #172]	; (2cd4 <saadc_irq_handler+0xc0>)
    2c28:	2101      	movs	r1, #1
    2c2a:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    2c2c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    2c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2c32:	b3c3      	cbz	r3, 2ca6 <saadc_irq_handler+0x92>
		adc_sequence_callback callback = ctx->options.callback;
    2c34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    2c36:	b143      	cbz	r3, 2c4a <saadc_irq_handler+0x36>
			action = callback(dev,
    2c38:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    2c3c:	f104 0164 	add.w	r1, r4, #100	; 0x64
    2c40:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    2c42:	2801      	cmp	r0, #1
    2c44:	d014      	beq.n	2c70 <saadc_irq_handler+0x5c>
    2c46:	2802      	cmp	r0, #2
    2c48:	d028      	beq.n	2c9c <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    2c4a:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    2c4e:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    2c52:	429a      	cmp	r2, r3
    2c54:	d922      	bls.n	2c9c <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    2c56:	3301      	adds	r3, #1
    2c58:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    2c5c:	4b1e      	ldr	r3, [pc, #120]	; (2cd8 <saadc_irq_handler+0xc4>)
    2c5e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    2c62:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    2c66:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    2c68:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2c6c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    2c70:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    2c72:	b92b      	cbnz	r3, 2c80 <saadc_irq_handler+0x6c>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    2c74:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2c7c:	f7ff bf50 	b.w	2b20 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2c80:	f3bf 8f5b 	dmb	ish
    2c84:	e854 3f00 	ldrex	r3, [r4]
    2c88:	1e5a      	subs	r2, r3, #1
    2c8a:	e844 2100 	strex	r1, r2, [r4]
    2c8e:	2900      	cmp	r1, #0
    2c90:	d1f8      	bne.n	2c84 <saadc_irq_handler+0x70>
    2c92:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    2c96:	2b01      	cmp	r3, #1
    2c98:	dcec      	bgt.n	2c74 <saadc_irq_handler+0x60>
    2c9a:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    2c9c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    2c9e:	b113      	cbz	r3, 2ca6 <saadc_irq_handler+0x92>
	z_impl_k_timer_stop(timer);
    2ca0:	480e      	ldr	r0, [pc, #56]	; (2cdc <saadc_irq_handler+0xc8>)
    2ca2:	f005 fe00 	bl	88a6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2ca6:	480e      	ldr	r0, [pc, #56]	; (2ce0 <saadc_irq_handler+0xcc>)
    2ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2cac:	f004 b910 	b.w	6ed0 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2cb0:	4b0c      	ldr	r3, [pc, #48]	; (2ce4 <saadc_irq_handler+0xd0>)
    2cb2:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    2cb4:	2900      	cmp	r1, #0
    2cb6:	d0f0      	beq.n	2c9a <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cb8:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cba:	4a06      	ldr	r2, [pc, #24]	; (2cd4 <saadc_irq_handler+0xc0>)
    2cbc:	681b      	ldr	r3, [r3, #0]
    2cbe:	2301      	movs	r3, #1
    2cc0:	6013      	str	r3, [r2, #0]
    2cc2:	f842 3c08 	str.w	r3, [r2, #-8]
    2cc6:	f842 3c04 	str.w	r3, [r2, #-4]
}
    2cca:	e7e6      	b.n	2c9a <saadc_irq_handler+0x86>
    2ccc:	40007104 	.word	0x40007104
    2cd0:	20000000 	.word	0x20000000
    2cd4:	40007008 	.word	0x40007008
    2cd8:	40007000 	.word	0x40007000
    2cdc:	20000008 	.word	0x20000008
    2ce0:	20000050 	.word	0x20000050
    2ce4:	40007110 	.word	0x40007110

00002ce8 <adc_nrfx_read>:
{
    2ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cea:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    2cec:	485d      	ldr	r0, [pc, #372]	; (2e64 <adc_nrfx_read+0x17c>)
    2cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cf6:	f004 f929 	bl	6f4c <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    2cfa:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
    2cfc:	b910      	cbnz	r0, 2d04 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
    2cfe:	f06f 0415 	mvn.w	r4, #21
    2d02:	e097      	b.n	2e34 <adc_nrfx_read+0x14c>
	if (!selected_channels ||
    2d04:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    2d08:	d1f9      	bne.n	2cfe <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
    2d0a:	4c57      	ldr	r4, [pc, #348]	; (2e68 <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    2d0c:	4f57      	ldr	r7, [pc, #348]	; (2e6c <adc_nrfx_read+0x184>)
	active_channels = 0U;
    2d0e:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    2d10:	fa20 f302 	lsr.w	r3, r0, r2
    2d14:	f013 0301 	ands.w	r3, r3, #1
    2d18:	d032      	beq.n	2d80 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
    2d1a:	18bb      	adds	r3, r7, r2
    2d1c:	f893 c090 	ldrb.w	ip, [r3, #144]	; 0x90
    2d20:	f1bc 0f00 	cmp.w	ip, #0
    2d24:	d0eb      	beq.n	2cfe <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    2d26:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    2d2a:	7c6e      	ldrb	r6, [r5, #17]
    2d2c:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    2d30:	3e00      	subs	r6, #0
    2d32:	bf18      	it	ne
    2d34:	2601      	movne	r6, #1
    2d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2d3a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    2d3e:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    2d42:	f102 0351 	add.w	r3, r2, #81	; 0x51
    2d46:	011b      	lsls	r3, r3, #4
			++active_channels;
    2d48:	3101      	adds	r1, #1
    2d4a:	f844 c003 	str.w	ip, [r4, r3]
    2d4e:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    2d50:	3201      	adds	r2, #1
    2d52:	2a08      	cmp	r2, #8
    2d54:	d1dc      	bne.n	2d10 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
    2d56:	7c2b      	ldrb	r3, [r5, #16]
    2d58:	3b08      	subs	r3, #8
    2d5a:	2b06      	cmp	r3, #6
    2d5c:	d8cf      	bhi.n	2cfe <adc_nrfx_read+0x16>
    2d5e:	a201      	add	r2, pc, #4	; (adr r2, 2d64 <adc_nrfx_read+0x7c>)
    2d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2d64:	00002e49 	.word	0x00002e49
    2d68:	00002cff 	.word	0x00002cff
    2d6c:	00002d8b 	.word	0x00002d8b
    2d70:	00002cff 	.word	0x00002cff
    2d74:	00002e41 	.word	0x00002e41
    2d78:	00002cff 	.word	0x00002cff
    2d7c:	00002e45 	.word	0x00002e45
    2d80:	f102 0651 	add.w	r6, r2, #81	; 0x51
    2d84:	0136      	lsls	r6, r6, #4
    2d86:	51a3      	str	r3, [r4, r6]
}
    2d88:	e7e2      	b.n	2d50 <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
    2d8a:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    2d8c:	4b36      	ldr	r3, [pc, #216]	; (2e68 <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2d8e:	2901      	cmp	r1, #1
    2d90:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    2d94:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2d96:	d959      	bls.n	2e4c <adc_nrfx_read+0x164>
    2d98:	2a00      	cmp	r2, #0
    2d9a:	d1b0      	bne.n	2cfe <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
    2d9c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    2da0:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    2da2:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    2da4:	b112      	cbz	r2, 2dac <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    2da6:	8992      	ldrh	r2, [r2, #12]
    2da8:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    2dac:	68ea      	ldr	r2, [r5, #12]
    2dae:	429a      	cmp	r2, r3
    2db0:	d354      	bcc.n	2e5c <adc_nrfx_read+0x174>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2db2:	4b2d      	ldr	r3, [pc, #180]	; (2e68 <adc_nrfx_read+0x180>)
    2db4:	68aa      	ldr	r2, [r5, #8]
    2db6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
    2dba:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    2dbc:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    2dc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2dc2:	4c2a      	ldr	r4, [pc, #168]	; (2e6c <adc_nrfx_read+0x184>)
    2dc4:	f104 0664 	add.w	r6, r4, #100	; 0x64
    2dc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2dca:	683b      	ldr	r3, [r7, #0]
    2dcc:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
    2dce:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    2dd0:	2600      	movs	r6, #0
    2dd2:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d03c      	beq.n	2e52 <adc_nrfx_read+0x16a>
		ctx->options = *sequence->options;
    2dd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dda:	f104 0578 	add.w	r5, r4, #120	; 0x78
    2dde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    2de2:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    2de4:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88
		if (ctx->options.interval_us != 0U) {
    2de8:	b398      	cbz	r0, 2e52 <adc_nrfx_read+0x16a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2dea:	f3bf 8f5b 	dmb	ish
    2dee:	e854 3f00 	ldrex	r3, [r4]
    2df2:	e844 6200 	strex	r2, r6, [r4]
    2df6:	2a00      	cmp	r2, #0
    2df8:	d1f9      	bne.n	2dee <adc_nrfx_read+0x106>
    2dfa:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    2dfe:	481c      	ldr	r0, [pc, #112]	; (2e70 <adc_nrfx_read+0x188>)
    2e00:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    2e02:	4a1c      	ldr	r2, [pc, #112]	; (2e74 <adc_nrfx_read+0x18c>)
    2e04:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2e08:	2100      	movs	r1, #0
    2e0a:	2300      	movs	r3, #0
    2e0c:	fbe5 0106 	umlal	r0, r1, r5, r6
    2e10:	f7fd fd64 	bl	8dc <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    2e14:	2200      	movs	r2, #0
    2e16:	e9cd 0100 	strd	r0, r1, [sp]
    2e1a:	2300      	movs	r3, #0
    2e1c:	f104 0008 	add.w	r0, r4, #8
    2e20:	f004 fe60 	bl	7ae4 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    2e24:	4814      	ldr	r0, [pc, #80]	; (2e78 <adc_nrfx_read+0x190>)
    2e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e2e:	f004 f88d 	bl	6f4c <z_impl_k_sem_take>
	return ctx->status;
    2e32:	6e24      	ldr	r4, [r4, #96]	; 0x60
	z_impl_k_sem_give(sem);
    2e34:	480b      	ldr	r0, [pc, #44]	; (2e64 <adc_nrfx_read+0x17c>)
    2e36:	f004 f84b 	bl	6ed0 <z_impl_k_sem_give>
}
    2e3a:	4620      	mov	r0, r4
    2e3c:	b003      	add	sp, #12
    2e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    2e40:	2202      	movs	r2, #2
		break;
    2e42:	e7a3      	b.n	2d8c <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    2e44:	2203      	movs	r2, #3
		break;
    2e46:	e7a1      	b.n	2d8c <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    2e48:	2200      	movs	r2, #0
    2e4a:	e79f      	b.n	2d8c <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
    2e4c:	2a08      	cmp	r2, #8
    2e4e:	d9a5      	bls.n	2d9c <adc_nrfx_read+0xb4>
    2e50:	e755      	b.n	2cfe <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
    2e52:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    2e56:	f7ff fe63 	bl	2b20 <adc_context_start_sampling.isra.0>
    2e5a:	e7e3      	b.n	2e24 <adc_nrfx_read+0x13c>
		return -ENOMEM;
    2e5c:	f06f 040b 	mvn.w	r4, #11
    2e60:	e7e8      	b.n	2e34 <adc_nrfx_read+0x14c>
    2e62:	bf00      	nop
    2e64:	20000040 	.word	0x20000040
    2e68:	40007000 	.word	0x40007000
    2e6c:	20000000 	.word	0x20000000
    2e70:	000f423f 	.word	0x000f423f
    2e74:	000f4240 	.word	0x000f4240
    2e78:	20000050 	.word	0x20000050

00002e7c <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e7c:	4b0d      	ldr	r3, [pc, #52]	; (2eb4 <init_saadc+0x38>)

static int init_saadc(const struct device *dev)
{
    2e7e:	b510      	push	{r4, lr}
    2e80:	2400      	movs	r4, #0
    2e82:	601c      	str	r4, [r3, #0]
    2e84:	681b      	ldr	r3, [r3, #0]
    2e86:	4b0c      	ldr	r3, [pc, #48]	; (2eb8 <init_saadc+0x3c>)
    2e88:	601c      	str	r4, [r3, #0]
    2e8a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2e8c:	4b0b      	ldr	r3, [pc, #44]	; (2ebc <init_saadc+0x40>)
    2e8e:	2212      	movs	r2, #18
    2e90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    2e94:	2007      	movs	r0, #7
    2e96:	f7ff fa07 	bl	22a8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2e9a:	4622      	mov	r2, r4
    2e9c:	2101      	movs	r1, #1
    2e9e:	2007      	movs	r0, #7
    2ea0:	f7ff fa20 	bl	22e4 <z_arm_irq_priority_set>
		/* coverity[OVERRUN] */
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
    2ea4:	4806      	ldr	r0, [pc, #24]	; (2ec0 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    2ea6:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2ea8:	b913      	cbnz	r3, 2eb0 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    2eaa:	3040      	adds	r0, #64	; 0x40
    2eac:	f004 f810 	bl	6ed0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    2eb0:	2000      	movs	r0, #0
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	40007104 	.word	0x40007104
    2eb8:	40007110 	.word	0x40007110
    2ebc:	40007000 	.word	0x40007000
    2ec0:	20000000 	.word	0x20000000

00002ec4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2ec8:	4c10      	ldr	r4, [pc, #64]	; (2f0c <onoff_start+0x48>)
    2eca:	1b07      	subs	r7, r0, r4
    2ecc:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2ed0:	f04f 080c 	mov.w	r8, #12
    2ed4:	fb08 f807 	mul.w	r8, r8, r7
{
    2ed8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    2eda:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    2ede:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    2ee0:	4420      	add	r0, r4
    2ee2:	2140      	movs	r1, #64	; 0x40
    2ee4:	f005 f9e6 	bl	82b4 <set_starting_state>
	if (err < 0) {
    2ee8:	1e01      	subs	r1, r0, #0
    2eea:	db09      	blt.n	2f00 <onoff_start+0x3c>
	subdata->cb = cb;
    2eec:	4b08      	ldr	r3, [pc, #32]	; (2f10 <onoff_start+0x4c>)
    2eee:	4444      	add	r4, r8
	subdata->user_data = user_data;
    2ef0:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2ef4:	4b07      	ldr	r3, [pc, #28]	; (2f14 <onoff_start+0x50>)
    2ef6:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2efe:	4718      	bx	r3
		notify(mgr, err);
    2f00:	4630      	mov	r0, r6
    2f02:	462b      	mov	r3, r5
}
    2f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2f08:	4718      	bx	r3
    2f0a:	bf00      	nop
    2f0c:	20000a70 	.word	0x20000a70
    2f10:	00008317 	.word	0x00008317
    2f14:	00008c34 	.word	0x00008c34

00002f18 <get_status>:
{
    2f18:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2f1a:	b2cc      	uxtb	r4, r1
    2f1c:	2c01      	cmp	r4, #1
{
    2f1e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2f20:	d909      	bls.n	2f36 <get_status+0x1e>
    2f22:	4909      	ldr	r1, [pc, #36]	; (2f48 <get_status+0x30>)
    2f24:	4809      	ldr	r0, [pc, #36]	; (2f4c <get_status+0x34>)
    2f26:	4a0a      	ldr	r2, [pc, #40]	; (2f50 <get_status+0x38>)
    2f28:	2379      	movs	r3, #121	; 0x79
    2f2a:	f005 f924 	bl	8176 <printk>
    2f2e:	4808      	ldr	r0, [pc, #32]	; (2f50 <get_status+0x38>)
    2f30:	2179      	movs	r1, #121	; 0x79
    2f32:	f005 f84c 	bl	7fce <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2f36:	692b      	ldr	r3, [r5, #16]
    2f38:	210c      	movs	r1, #12
    2f3a:	fb04 3401 	mla	r4, r4, r1, r3
    2f3e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2f40:	f000 0007 	and.w	r0, r0, #7
    2f44:	bd38      	pop	{r3, r4, r5, pc}
    2f46:	bf00      	nop
    2f48:	000094c4 	.word	0x000094c4
    2f4c:	00008fa5 	.word	0x00008fa5
    2f50:	00009487 	.word	0x00009487

00002f54 <stop>:
{
    2f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f56:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2f58:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2f5a:	6907      	ldr	r7, [r0, #16]
{
    2f5c:	4605      	mov	r5, r0
    2f5e:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2f60:	d90b      	bls.n	2f7a <stop+0x26>
    2f62:	4918      	ldr	r1, [pc, #96]	; (2fc4 <stop+0x70>)
    2f64:	4818      	ldr	r0, [pc, #96]	; (2fc8 <stop+0x74>)
    2f66:	4a19      	ldr	r2, [pc, #100]	; (2fcc <stop+0x78>)
    2f68:	f240 134d 	movw	r3, #333	; 0x14d
    2f6c:	f005 f903 	bl	8176 <printk>
    2f70:	4816      	ldr	r0, [pc, #88]	; (2fcc <stop+0x78>)
    2f72:	f240 114d 	movw	r1, #333	; 0x14d
    2f76:	f005 f82a 	bl	7fce <assert_post_action>
	__asm__ volatile(
    2f7a:	f04f 0320 	mov.w	r3, #32
    2f7e:	f3ef 8211 	mrs	r2, BASEPRI
    2f82:	f383 8812 	msr	BASEPRI_MAX, r3
    2f86:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2f8a:	230c      	movs	r3, #12
    2f8c:	fb03 7104 	mla	r1, r3, r4, r7
    2f90:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2f92:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2f96:	d001      	beq.n	2f9c <stop+0x48>
    2f98:	428e      	cmp	r6, r1
    2f9a:	d110      	bne.n	2fbe <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2f9c:	fb03 7304 	mla	r3, r3, r4, r7
    2fa0:	2101      	movs	r1, #1
    2fa2:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2fa4:	2000      	movs	r0, #0
	__asm__ volatile(
    2fa6:	f382 8811 	msr	BASEPRI, r2
    2faa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2fae:	b928      	cbnz	r0, 2fbc <stop+0x68>
	get_sub_config(dev, type)->stop();
    2fb0:	6869      	ldr	r1, [r5, #4]
    2fb2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2fb6:	6863      	ldr	r3, [r4, #4]
    2fb8:	4798      	blx	r3
	return 0;
    2fba:	2000      	movs	r0, #0
}
    2fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2fc2:	e7f0      	b.n	2fa6 <stop+0x52>
    2fc4:	000094c4 	.word	0x000094c4
    2fc8:	00008fa5 	.word	0x00008fa5
    2fcc:	00009487 	.word	0x00009487

00002fd0 <onoff_stop>:
{
    2fd0:	b570      	push	{r4, r5, r6, lr}
    2fd2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2fd4:	4906      	ldr	r1, [pc, #24]	; (2ff0 <onoff_stop+0x20>)
    2fd6:	1a41      	subs	r1, r0, r1
{
    2fd8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2fda:	1149      	asrs	r1, r1, #5
    2fdc:	4805      	ldr	r0, [pc, #20]	; (2ff4 <onoff_stop+0x24>)
    2fde:	2240      	movs	r2, #64	; 0x40
    2fe0:	f7ff ffb8 	bl	2f54 <stop>
	notify(mgr, res);
    2fe4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2fe6:	4601      	mov	r1, r0
	notify(mgr, res);
    2fe8:	4620      	mov	r0, r4
}
    2fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2fee:	4718      	bx	r3
    2ff0:	20000a70 	.word	0x20000a70
    2ff4:	0000895c 	.word	0x0000895c

00002ff8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ff8:	2200      	movs	r2, #0
{
    2ffa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ffc:	2101      	movs	r1, #1
{
    2ffe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3000:	4610      	mov	r0, r2
    3002:	f7ff f96f 	bl	22e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3006:	2000      	movs	r0, #0
    3008:	f7ff f94e 	bl	22a8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    300c:	480f      	ldr	r0, [pc, #60]	; (304c <clk_init+0x54>)
    300e:	f001 f8bf 	bl	4190 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3012:	4b0f      	ldr	r3, [pc, #60]	; (3050 <clk_init+0x58>)
    3014:	4298      	cmp	r0, r3
    3016:	d115      	bne.n	3044 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3018:	f001 f8de 	bl	41d8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    301c:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    301e:	490d      	ldr	r1, [pc, #52]	; (3054 <clk_init+0x5c>)
    3020:	4630      	mov	r0, r6
    3022:	f005 f893 	bl	814c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3026:	2800      	cmp	r0, #0
    3028:	db0b      	blt.n	3042 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    302a:	2501      	movs	r5, #1
    302c:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    302e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3030:	4908      	ldr	r1, [pc, #32]	; (3054 <clk_init+0x5c>)
    3032:	f104 0020 	add.w	r0, r4, #32
    3036:	f005 f889 	bl	814c <onoff_manager_init>
		if (err < 0) {
    303a:	2800      	cmp	r0, #0
    303c:	db01      	blt.n	3042 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    303e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3040:	2000      	movs	r0, #0
}
    3042:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3044:	f06f 0004 	mvn.w	r0, #4
    3048:	e7fb      	b.n	3042 <clk_init+0x4a>
    304a:	bf00      	nop
    304c:	0000308d 	.word	0x0000308d
    3050:	0bad0000 	.word	0x0bad0000
    3054:	00008c44 	.word	0x00008c44

00003058 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3058:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    305a:	230c      	movs	r3, #12
    305c:	4809      	ldr	r0, [pc, #36]	; (3084 <clkstarted_handle.constprop.0+0x2c>)
    305e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3060:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3062:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3064:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3068:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    306a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    306c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    306e:	4418      	add	r0, r3
    3070:	f005 f93e 	bl	82f0 <set_on_state>
	if (callback) {
    3074:	b12d      	cbz	r5, 3082 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3076:	4632      	mov	r2, r6
    3078:	462b      	mov	r3, r5
    307a:	4803      	ldr	r0, [pc, #12]	; (3088 <clkstarted_handle.constprop.0+0x30>)
}
    307c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3080:	4718      	bx	r3
}
    3082:	bd70      	pop	{r4, r5, r6, pc}
    3084:	20000a70 	.word	0x20000a70
    3088:	0000895c 	.word	0x0000895c

0000308c <clock_event_handler>:
	switch (event) {
    308c:	2801      	cmp	r0, #1
{
    308e:	b508      	push	{r3, lr}
	switch (event) {
    3090:	d006      	beq.n	30a0 <clock_event_handler+0x14>
    3092:	2803      	cmp	r0, #3
    3094:	d008      	beq.n	30a8 <clock_event_handler+0x1c>
    3096:	b9a8      	cbnz	r0, 30c4 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3098:	4b10      	ldr	r3, [pc, #64]	; (30dc <clock_event_handler+0x50>)
    309a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    309c:	075b      	lsls	r3, r3, #29
    309e:	d11b      	bne.n	30d8 <clock_event_handler+0x4c>
}
    30a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    30a4:	f7ff bfd8 	b.w	3058 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    30a8:	490d      	ldr	r1, [pc, #52]	; (30e0 <clock_event_handler+0x54>)
    30aa:	4a0e      	ldr	r2, [pc, #56]	; (30e4 <clock_event_handler+0x58>)
    30ac:	480e      	ldr	r0, [pc, #56]	; (30e8 <clock_event_handler+0x5c>)
    30ae:	f240 235e 	movw	r3, #606	; 0x25e
    30b2:	f005 f860 	bl	8176 <printk>
    30b6:	f240 215e 	movw	r1, #606	; 0x25e
}
    30ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    30be:	4809      	ldr	r0, [pc, #36]	; (30e4 <clock_event_handler+0x58>)
    30c0:	f004 bf85 	b.w	7fce <assert_post_action>
    30c4:	4906      	ldr	r1, [pc, #24]	; (30e0 <clock_event_handler+0x54>)
    30c6:	4a07      	ldr	r2, [pc, #28]	; (30e4 <clock_event_handler+0x58>)
    30c8:	4807      	ldr	r0, [pc, #28]	; (30e8 <clock_event_handler+0x5c>)
    30ca:	f240 2362 	movw	r3, #610	; 0x262
    30ce:	f005 f852 	bl	8176 <printk>
    30d2:	f240 2162 	movw	r1, #610	; 0x262
    30d6:	e7f0      	b.n	30ba <clock_event_handler+0x2e>
}
    30d8:	bd08      	pop	{r3, pc}
    30da:	bf00      	nop
    30dc:	20000a70 	.word	0x20000a70
    30e0:	0000978b 	.word	0x0000978b
    30e4:	00009487 	.word	0x00009487
    30e8:	00008fa5 	.word	0x00008fa5

000030ec <generic_hfclk_start>:
{
    30ec:	b508      	push	{r3, lr}
	__asm__ volatile(
    30ee:	f04f 0320 	mov.w	r3, #32
    30f2:	f3ef 8111 	mrs	r1, BASEPRI
    30f6:	f383 8812 	msr	BASEPRI_MAX, r3
    30fa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    30fe:	4a12      	ldr	r2, [pc, #72]	; (3148 <generic_hfclk_start+0x5c>)
    3100:	6813      	ldr	r3, [r2, #0]
    3102:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3106:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    310a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    310c:	d00c      	beq.n	3128 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    310e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3112:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3116:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    311a:	f013 0301 	ands.w	r3, r3, #1
    311e:	d003      	beq.n	3128 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3120:	480a      	ldr	r0, [pc, #40]	; (314c <generic_hfclk_start+0x60>)
    3122:	f005 f8e5 	bl	82f0 <set_on_state>
			already_started = true;
    3126:	2301      	movs	r3, #1
	__asm__ volatile(
    3128:	f381 8811 	msr	BASEPRI, r1
    312c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3130:	b123      	cbz	r3, 313c <generic_hfclk_start+0x50>
}
    3132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3136:	2000      	movs	r0, #0
    3138:	f7ff bf8e 	b.w	3058 <clkstarted_handle.constprop.0>
}
    313c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3140:	2001      	movs	r0, #1
    3142:	f001 b869 	b.w	4218 <nrfx_clock_start>
    3146:	bf00      	nop
    3148:	20000ac8 	.word	0x20000ac8
    314c:	20000ab8 	.word	0x20000ab8

00003150 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3150:	4b09      	ldr	r3, [pc, #36]	; (3178 <generic_hfclk_stop+0x28>)
    3152:	f3bf 8f5b 	dmb	ish
    3156:	e853 2f00 	ldrex	r2, [r3]
    315a:	f022 0102 	bic.w	r1, r2, #2
    315e:	e843 1000 	strex	r0, r1, [r3]
    3162:	2800      	cmp	r0, #0
    3164:	d1f7      	bne.n	3156 <generic_hfclk_stop+0x6>
    3166:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    316a:	07d3      	lsls	r3, r2, #31
    316c:	d402      	bmi.n	3174 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    316e:	2001      	movs	r0, #1
    3170:	f001 b8a6 	b.w	42c0 <nrfx_clock_stop>
}
    3174:	4770      	bx	lr
    3176:	bf00      	nop
    3178:	20000ac8 	.word	0x20000ac8

0000317c <api_blocking_start>:
{
    317c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    317e:	2200      	movs	r2, #0
    3180:	2301      	movs	r3, #1
    3182:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3186:	4a09      	ldr	r2, [pc, #36]	; (31ac <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3188:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    318c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    318e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3192:	f005 f8d2 	bl	833a <api_start>
	if (err < 0) {
    3196:	2800      	cmp	r0, #0
    3198:	db05      	blt.n	31a6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    319a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    319e:	2300      	movs	r3, #0
    31a0:	4668      	mov	r0, sp
    31a2:	f003 fed3 	bl	6f4c <z_impl_k_sem_take>
}
    31a6:	b005      	add	sp, #20
    31a8:	f85d fb04 	ldr.w	pc, [sp], #4
    31ac:	00008335 	.word	0x00008335

000031b0 <z_nrf_clock_control_lf_on>:
{
    31b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    31b4:	4949      	ldr	r1, [pc, #292]	; (32dc <z_nrf_clock_control_lf_on+0x12c>)
    31b6:	f3bf 8f5b 	dmb	ish
    31ba:	4605      	mov	r5, r0
    31bc:	2201      	movs	r2, #1
    31be:	e851 3f00 	ldrex	r3, [r1]
    31c2:	e841 2000 	strex	r0, r2, [r1]
    31c6:	2800      	cmp	r0, #0
    31c8:	d1f9      	bne.n	31be <z_nrf_clock_control_lf_on+0xe>
    31ca:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    31ce:	b9a3      	cbnz	r3, 31fa <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    31d0:	4943      	ldr	r1, [pc, #268]	; (32e0 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    31d2:	4844      	ldr	r0, [pc, #272]	; (32e4 <z_nrf_clock_control_lf_on+0x134>)
    31d4:	604b      	str	r3, [r1, #4]
    31d6:	60cb      	str	r3, [r1, #12]
    31d8:	608a      	str	r2, [r1, #8]
    31da:	f7fe fddb 	bl	1d94 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    31de:	2800      	cmp	r0, #0
    31e0:	da0b      	bge.n	31fa <z_nrf_clock_control_lf_on+0x4a>
    31e2:	4941      	ldr	r1, [pc, #260]	; (32e8 <z_nrf_clock_control_lf_on+0x138>)
    31e4:	4841      	ldr	r0, [pc, #260]	; (32ec <z_nrf_clock_control_lf_on+0x13c>)
    31e6:	4a42      	ldr	r2, [pc, #264]	; (32f0 <z_nrf_clock_control_lf_on+0x140>)
    31e8:	f44f 7308 	mov.w	r3, #544	; 0x220
    31ec:	f004 ffc3 	bl	8176 <printk>
    31f0:	483f      	ldr	r0, [pc, #252]	; (32f0 <z_nrf_clock_control_lf_on+0x140>)
    31f2:	f44f 7108 	mov.w	r1, #544	; 0x220
    31f6:	f004 feea 	bl	7fce <assert_post_action>
	switch (start_mode) {
    31fa:	b3ad      	cbz	r5, 3268 <z_nrf_clock_control_lf_on+0xb8>
    31fc:	1e6b      	subs	r3, r5, #1
    31fe:	2b01      	cmp	r3, #1
    3200:	d856      	bhi.n	32b0 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3202:	2d01      	cmp	r5, #1
    3204:	d107      	bne.n	3216 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    320a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    320e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3212:	2b01      	cmp	r3, #1
    3214:	d028      	beq.n	3268 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3216:	f005 fb36 	bl	8886 <k_is_in_isr>
    321a:	4604      	mov	r4, r0
    321c:	b918      	cbnz	r0, 3226 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    321e:	4b35      	ldr	r3, [pc, #212]	; (32f4 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    3220:	781b      	ldrb	r3, [r3, #0]
    3222:	2b00      	cmp	r3, #0
    3224:	d152      	bne.n	32cc <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    3226:	f04f 0320 	mov.w	r3, #32
    322a:	f3ef 8611 	mrs	r6, BASEPRI
    322e:	f383 8812 	msr	BASEPRI_MAX, r3
    3232:	f3bf 8f6f 	isb	sy
    3236:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3238:	4f2f      	ldr	r7, [pc, #188]	; (32f8 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    323a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3300 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    323e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3304 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3246:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    324a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    324e:	03d2      	lsls	r2, r2, #15
    3250:	d50c      	bpl.n	326c <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3252:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3256:	2b01      	cmp	r3, #1
    3258:	d001      	beq.n	325e <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    325a:	2d01      	cmp	r5, #1
    325c:	d106      	bne.n	326c <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    325e:	b30c      	cbz	r4, 32a4 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    3260:	f386 8811 	msr	BASEPRI, r6
    3264:	f3bf 8f6f 	isb	sy
}
    3268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    326c:	b1ac      	cbz	r4, 329a <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    326e:	4630      	mov	r0, r6
    3270:	f7fe ffb2 	bl	21d8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3278:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    327c:	2b00      	cmp	r3, #0
    327e:	d1e0      	bne.n	3242 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3280:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3282:	2900      	cmp	r1, #0
    3284:	d0dd      	beq.n	3242 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3286:	603b      	str	r3, [r7, #0]
    3288:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    328a:	2301      	movs	r3, #1
    328c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3290:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3294:	f8c9 3000 	str.w	r3, [r9]
}
    3298:	e7d3      	b.n	3242 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    329a:	2100      	movs	r1, #0
    329c:	2021      	movs	r0, #33	; 0x21
    329e:	f003 fd25 	bl	6cec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    32a2:	e7e7      	b.n	3274 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    32a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32a8:	2202      	movs	r2, #2
    32aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    32ae:	e7db      	b.n	3268 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    32b0:	4912      	ldr	r1, [pc, #72]	; (32fc <z_nrf_clock_control_lf_on+0x14c>)
    32b2:	480e      	ldr	r0, [pc, #56]	; (32ec <z_nrf_clock_control_lf_on+0x13c>)
    32b4:	4a0e      	ldr	r2, [pc, #56]	; (32f0 <z_nrf_clock_control_lf_on+0x140>)
    32b6:	f240 2332 	movw	r3, #562	; 0x232
    32ba:	f004 ff5c 	bl	8176 <printk>
}
    32be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    32c2:	480b      	ldr	r0, [pc, #44]	; (32f0 <z_nrf_clock_control_lf_on+0x140>)
    32c4:	f240 2132 	movw	r1, #562	; 0x232
    32c8:	f004 be81 	b.w	7fce <assert_post_action>
    p_reg->INTENCLR = mask;
    32cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32d0:	2202      	movs	r2, #2
    32d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    32d6:	4606      	mov	r6, r0
}
    32d8:	e7ae      	b.n	3238 <z_nrf_clock_control_lf_on+0x88>
    32da:	bf00      	nop
    32dc:	20000acc 	.word	0x20000acc
    32e0:	20000a60 	.word	0x20000a60
    32e4:	20000a90 	.word	0x20000a90
    32e8:	000094e8 	.word	0x000094e8
    32ec:	00008fa5 	.word	0x00008fa5
    32f0:	00009487 	.word	0x00009487
    32f4:	2000103f 	.word	0x2000103f
    32f8:	40000104 	.word	0x40000104
    32fc:	0000978b 	.word	0x0000978b
    3300:	e000e100 	.word	0xe000e100
    3304:	40000008 	.word	0x40000008

00003308 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3308:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    330a:	4b08      	ldr	r3, [pc, #32]	; (332c <uart_console_init+0x24>)
    330c:	4808      	ldr	r0, [pc, #32]	; (3330 <uart_console_init+0x28>)
    330e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3310:	f005 fa59 	bl	87c6 <z_device_ready>
    3314:	b138      	cbz	r0, 3326 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3316:	4807      	ldr	r0, [pc, #28]	; (3334 <uart_console_init+0x2c>)
    3318:	f7ff fbaa 	bl	2a70 <__stdout_hook_install>
	__printk_hook_install(console_out);
    331c:	4805      	ldr	r0, [pc, #20]	; (3334 <uart_console_init+0x2c>)
    331e:	f7fe ff1f 	bl	2160 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3322:	2000      	movs	r0, #0
}
    3324:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3326:	f06f 0012 	mvn.w	r0, #18
    332a:	e7fb      	b.n	3324 <uart_console_init+0x1c>
    332c:	20000ad0 	.word	0x20000ad0
    3330:	000089bc 	.word	0x000089bc
    3334:	00003339 	.word	0x00003339

00003338 <console_out>:
	if ('\n' == c) {
    3338:	280a      	cmp	r0, #10
{
    333a:	b538      	push	{r3, r4, r5, lr}
    333c:	4d07      	ldr	r5, [pc, #28]	; (335c <console_out+0x24>)
    333e:	4604      	mov	r4, r0
	if ('\n' == c) {
    3340:	d104      	bne.n	334c <console_out+0x14>
    3342:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    3344:	6883      	ldr	r3, [r0, #8]
    3346:	210d      	movs	r1, #13
    3348:	685b      	ldr	r3, [r3, #4]
    334a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    334c:	6828      	ldr	r0, [r5, #0]
    334e:	6883      	ldr	r3, [r0, #8]
    3350:	b2e1      	uxtb	r1, r4
    3352:	685b      	ldr	r3, [r3, #4]
    3354:	4798      	blx	r3
}
    3356:	4620      	mov	r0, r4
    3358:	bd38      	pop	{r3, r4, r5, pc}
    335a:	bf00      	nop
    335c:	20000ad0 	.word	0x20000ad0

00003360 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    3360:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3362:	6905      	ldr	r5, [r0, #16]
{
    3364:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    3366:	460c      	mov	r4, r1
    3368:	b961      	cbnz	r1, 3384 <gpio_nrfx_manage_callback+0x24>
    336a:	4922      	ldr	r1, [pc, #136]	; (33f4 <gpio_nrfx_manage_callback+0x94>)
    336c:	4a22      	ldr	r2, [pc, #136]	; (33f8 <gpio_nrfx_manage_callback+0x98>)
    336e:	4823      	ldr	r0, [pc, #140]	; (33fc <gpio_nrfx_manage_callback+0x9c>)
    3370:	2324      	movs	r3, #36	; 0x24
    3372:	f004 ff00 	bl	8176 <printk>
    3376:	4822      	ldr	r0, [pc, #136]	; (3400 <gpio_nrfx_manage_callback+0xa0>)
    3378:	f004 fefd 	bl	8176 <printk>
    337c:	481e      	ldr	r0, [pc, #120]	; (33f8 <gpio_nrfx_manage_callback+0x98>)
    337e:	2124      	movs	r1, #36	; 0x24
    3380:	f004 fe25 	bl	7fce <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    3384:	6863      	ldr	r3, [r4, #4]
    3386:	b963      	cbnz	r3, 33a2 <gpio_nrfx_manage_callback+0x42>
    3388:	491e      	ldr	r1, [pc, #120]	; (3404 <gpio_nrfx_manage_callback+0xa4>)
    338a:	4a1b      	ldr	r2, [pc, #108]	; (33f8 <gpio_nrfx_manage_callback+0x98>)
    338c:	481b      	ldr	r0, [pc, #108]	; (33fc <gpio_nrfx_manage_callback+0x9c>)
    338e:	2325      	movs	r3, #37	; 0x25
    3390:	f004 fef1 	bl	8176 <printk>
    3394:	481c      	ldr	r0, [pc, #112]	; (3408 <gpio_nrfx_manage_callback+0xa8>)
    3396:	f004 feee 	bl	8176 <printk>
    339a:	4817      	ldr	r0, [pc, #92]	; (33f8 <gpio_nrfx_manage_callback+0x98>)
    339c:	2125      	movs	r1, #37	; 0x25
    339e:	f004 fe16 	bl	7fce <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    33a2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    33a4:	b15b      	cbz	r3, 33be <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    33a6:	2200      	movs	r2, #0
    33a8:	429c      	cmp	r4, r3
    33aa:	d113      	bne.n	33d4 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    33ac:	6823      	ldr	r3, [r4, #0]
    33ae:	b95a      	cbnz	r2, 33c8 <gpio_nrfx_manage_callback+0x68>
    33b0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    33b2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    33b4:	4294      	cmp	r4, r2
    33b6:	d100      	bne.n	33ba <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    33b8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    33ba:	2300      	movs	r3, #0
    33bc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    33be:	b976      	cbnz	r6, 33de <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    33c0:	2000      	movs	r0, #0
				     callback, set);
}
    33c2:	bd70      	pop	{r4, r5, r6, pc}
    33c4:	460b      	mov	r3, r1
    33c6:	e7ef      	b.n	33a8 <gpio_nrfx_manage_callback+0x48>
    33c8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    33ca:	68ab      	ldr	r3, [r5, #8]
    33cc:	429c      	cmp	r4, r3
	list->tail = node;
    33ce:	bf08      	it	eq
    33d0:	60aa      	streq	r2, [r5, #8]
}
    33d2:	e7f2      	b.n	33ba <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    33d4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    33d6:	461a      	mov	r2, r3
    33d8:	2900      	cmp	r1, #0
    33da:	d1f3      	bne.n	33c4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    33dc:	b13e      	cbz	r6, 33ee <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    33de:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    33e0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    33e2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    33e4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    33e6:	2800      	cmp	r0, #0
    33e8:	d1ea      	bne.n	33c0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    33ea:	60ac      	str	r4, [r5, #8]
}
    33ec:	e7e9      	b.n	33c2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    33ee:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    33f2:	e7e6      	b.n	33c2 <gpio_nrfx_manage_callback+0x62>
    33f4:	00009524 	.word	0x00009524
    33f8:	000094f7 	.word	0x000094f7
    33fc:	00008fa5 	.word	0x00008fa5
    3400:	0000952d 	.word	0x0000952d
    3404:	0000953c 	.word	0x0000953c
    3408:	0000954e 	.word	0x0000954e

0000340c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    340c:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    340e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3412:	d003      	beq.n	341c <nrfx_gpio_handler+0x10>
    3414:	2b01      	cmp	r3, #1
    3416:	d036      	beq.n	3486 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    341c:	4f1b      	ldr	r7, [pc, #108]	; (348c <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    341e:	693b      	ldr	r3, [r7, #16]
    3420:	685c      	ldr	r4, [r3, #4]
    3422:	2c00      	cmp	r4, #0
    3424:	d0f8      	beq.n	3418 <nrfx_gpio_handler+0xc>
    3426:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3428:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3498 <nrfx_gpio_handler+0x8c>
    342c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 349c <nrfx_gpio_handler+0x90>
    3430:	f8df a06c 	ldr.w	sl, [pc, #108]	; 34a0 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3434:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    3438:	2601      	movs	r6, #1
    343a:	2d00      	cmp	r5, #0
    343c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    3440:	bf38      	it	cc
    3442:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    3444:	68a3      	ldr	r3, [r4, #8]
    3446:	421e      	tst	r6, r3
    3448:	d014      	beq.n	3474 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    344a:	6863      	ldr	r3, [r4, #4]
    344c:	b963      	cbnz	r3, 3468 <nrfx_gpio_handler+0x5c>
    344e:	4649      	mov	r1, r9
    3450:	2345      	movs	r3, #69	; 0x45
    3452:	4642      	mov	r2, r8
    3454:	4650      	mov	r0, sl
    3456:	f004 fe8e 	bl	8176 <printk>
    345a:	480d      	ldr	r0, [pc, #52]	; (3490 <nrfx_gpio_handler+0x84>)
    345c:	f004 fe8b 	bl	8176 <printk>
    3460:	2145      	movs	r1, #69	; 0x45
    3462:	4640      	mov	r0, r8
    3464:	f004 fdb3 	bl	7fce <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    3468:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    346c:	4621      	mov	r1, r4
    346e:	4032      	ands	r2, r6
    3470:	4638      	mov	r0, r7
    3472:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3474:	2d00      	cmp	r5, #0
    3476:	d0cf      	beq.n	3418 <nrfx_gpio_handler+0xc>
    3478:	682b      	ldr	r3, [r5, #0]
    347a:	2b00      	cmp	r3, #0
    347c:	bf38      	it	cc
    347e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3480:	462c      	mov	r4, r5
    3482:	461d      	mov	r5, r3
    3484:	e7de      	b.n	3444 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3486:	4f03      	ldr	r7, [pc, #12]	; (3494 <nrfx_gpio_handler+0x88>)
    3488:	e7c9      	b.n	341e <nrfx_gpio_handler+0x12>
    348a:	bf00      	nop
    348c:	00008974 	.word	0x00008974
    3490:	0000954e 	.word	0x0000954e
    3494:	0000898c 	.word	0x0000898c
    3498:	000094f7 	.word	0x000094f7
    349c:	00009565 	.word	0x00009565
    34a0:	00008fa5 	.word	0x00008fa5

000034a4 <gpio_nrfx_pin_interrupt_configure>:
{
    34a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    34a6:	6840      	ldr	r0, [r0, #4]
    34a8:	7b05      	ldrb	r5, [r0, #12]
    34aa:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    34ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    34b2:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    34b6:	f04f 0500 	mov.w	r5, #0
    34ba:	d104      	bne.n	34c6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    34bc:	4620      	mov	r0, r4
    34be:	f001 fa97 	bl	49f0 <nrfx_gpiote_trigger_disable>
	return 0;
    34c2:	2000      	movs	r0, #0
    34c4:	e054      	b.n	3570 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    34c6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    34ca:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    34ce:	d151      	bne.n	3574 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    34d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    34d4:	bf0c      	ite	eq
    34d6:	2304      	moveq	r3, #4
    34d8:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    34da:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    34de:	6883      	ldr	r3, [r0, #8]
    34e0:	fa23 f101 	lsr.w	r1, r3, r1
    34e4:	f011 0101 	ands.w	r1, r1, #1
    34e8:	d155      	bne.n	3596 <gpio_nrfx_pin_interrupt_configure+0xf2>
    34ea:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    34ee:	d152      	bne.n	3596 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    34f0:	0966      	lsrs	r6, r4, #5
    34f2:	d04a      	beq.n	358a <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    34f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    34f8:	2e01      	cmp	r6, #1
    34fa:	bf08      	it	eq
    34fc:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    34fe:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3502:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3504:	07ca      	lsls	r2, r1, #31
    3506:	d40b      	bmi.n	3520 <gpio_nrfx_pin_interrupt_configure+0x7c>
    3508:	492b      	ldr	r1, [pc, #172]	; (35b8 <gpio_nrfx_pin_interrupt_configure+0x114>)
    350a:	482c      	ldr	r0, [pc, #176]	; (35bc <gpio_nrfx_pin_interrupt_configure+0x118>)
    350c:	4a2c      	ldr	r2, [pc, #176]	; (35c0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    350e:	f240 2329 	movw	r3, #553	; 0x229
    3512:	f004 fe30 	bl	8176 <printk>
    3516:	482a      	ldr	r0, [pc, #168]	; (35c0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3518:	f240 2129 	movw	r1, #553	; 0x229
    351c:	f004 fd57 	bl	7fce <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3520:	b16e      	cbz	r6, 353e <gpio_nrfx_pin_interrupt_configure+0x9a>
    3522:	2e01      	cmp	r6, #1
    3524:	d034      	beq.n	3590 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    3526:	4927      	ldr	r1, [pc, #156]	; (35c4 <gpio_nrfx_pin_interrupt_configure+0x120>)
    3528:	4824      	ldr	r0, [pc, #144]	; (35bc <gpio_nrfx_pin_interrupt_configure+0x118>)
    352a:	4a25      	ldr	r2, [pc, #148]	; (35c0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    352c:	f240 232e 	movw	r3, #558	; 0x22e
    3530:	f004 fe21 	bl	8176 <printk>
    3534:	4822      	ldr	r0, [pc, #136]	; (35c0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3536:	f240 212e 	movw	r1, #558	; 0x22e
    353a:	f004 fd48 	bl	7fce <assert_post_action>
        case 0: return NRF_P0;
    353e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3542:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3546:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    354a:	07db      	lsls	r3, r3, #31
    354c:	d423      	bmi.n	3596 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    354e:	f10d 0507 	add.w	r5, sp, #7
    3552:	4629      	mov	r1, r5
    3554:	4620      	mov	r0, r4
    3556:	f001 f975 	bl	4844 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    355a:	4b1b      	ldr	r3, [pc, #108]	; (35c8 <gpio_nrfx_pin_interrupt_configure+0x124>)
    355c:	4298      	cmp	r0, r3
    355e:	d119      	bne.n	3594 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    3560:	4628      	mov	r0, r5
    3562:	f001 f9cf 	bl	4904 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3566:	4b19      	ldr	r3, [pc, #100]	; (35cc <gpio_nrfx_pin_interrupt_configure+0x128>)
    3568:	4298      	cmp	r0, r3
    356a:	d013      	beq.n	3594 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    356c:	f06f 000b 	mvn.w	r0, #11
}
    3570:	b004      	add	sp, #16
    3572:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3574:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3578:	d005      	beq.n	3586 <gpio_nrfx_pin_interrupt_configure+0xe2>
    357a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    357e:	bf0c      	ite	eq
    3580:	2302      	moveq	r3, #2
    3582:	2301      	movne	r3, #1
    3584:	e7a9      	b.n	34da <gpio_nrfx_pin_interrupt_configure+0x36>
    3586:	2303      	movs	r3, #3
    3588:	e7a7      	b.n	34da <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    358a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    358e:	e7b6      	b.n	34fe <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3590:	4b0f      	ldr	r3, [pc, #60]	; (35d0 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    3592:	e7d6      	b.n	3542 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    3594:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3596:	2300      	movs	r3, #0
    3598:	4619      	mov	r1, r3
    359a:	aa02      	add	r2, sp, #8
    359c:	4620      	mov	r0, r4
    359e:	f001 f833 	bl	4608 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    35a2:	4b0a      	ldr	r3, [pc, #40]	; (35cc <gpio_nrfx_pin_interrupt_configure+0x128>)
    35a4:	4298      	cmp	r0, r3
    35a6:	d104      	bne.n	35b2 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    35a8:	2101      	movs	r1, #1
    35aa:	4620      	mov	r0, r4
    35ac:	f001 f9b0 	bl	4910 <nrfx_gpiote_trigger_enable>
    35b0:	e787      	b.n	34c2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    35b2:	f06f 0004 	mvn.w	r0, #4
    35b6:	e7db      	b.n	3570 <gpio_nrfx_pin_interrupt_configure+0xcc>
    35b8:	000095a4 	.word	0x000095a4
    35bc:	00008fa5 	.word	0x00008fa5
    35c0:	00009571 	.word	0x00009571
    35c4:	0000978b 	.word	0x0000978b
    35c8:	0bad0004 	.word	0x0bad0004
    35cc:	0bad0000 	.word	0x0bad0000
    35d0:	50000300 	.word	0x50000300

000035d4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    35d4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    35d6:	f001 f985 	bl	48e4 <nrfx_gpiote_is_init>
    35da:	4604      	mov	r4, r0
    35dc:	b968      	cbnz	r0, 35fa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    35de:	f001 f959 	bl	4894 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    35e2:	4b08      	ldr	r3, [pc, #32]	; (3604 <gpio_nrfx_init+0x30>)
    35e4:	4298      	cmp	r0, r3
    35e6:	d10a      	bne.n	35fe <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    35e8:	4807      	ldr	r0, [pc, #28]	; (3608 <gpio_nrfx_init+0x34>)
    35ea:	4621      	mov	r1, r4
    35ec:	f001 f924 	bl	4838 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    35f0:	4622      	mov	r2, r4
    35f2:	2105      	movs	r1, #5
    35f4:	2006      	movs	r0, #6
    35f6:	f7fe fe75 	bl	22e4 <z_arm_irq_priority_set>
		return 0;
    35fa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    35fc:	bd10      	pop	{r4, pc}
		return -EIO;
    35fe:	f06f 0004 	mvn.w	r0, #4
    3602:	e7fb      	b.n	35fc <gpio_nrfx_init+0x28>
    3604:	0bad0000 	.word	0x0bad0000
    3608:	0000340d 	.word	0x0000340d

0000360c <gpio_nrfx_pin_configure>:
{
    360c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3610:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3612:	7b3b      	ldrb	r3, [r7, #12]
    3614:	f001 051f 	and.w	r5, r1, #31
{
    3618:	b085      	sub	sp, #20
    361a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    361c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3620:	4614      	mov	r4, r2
    3622:	b9ca      	cbnz	r2, 3658 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3624:	a902      	add	r1, sp, #8
    3626:	4628      	mov	r0, r5
    3628:	f001 f90c 	bl	4844 <nrfx_gpiote_channel_get>
    362c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    362e:	4628      	mov	r0, r5
    3630:	f001 fa00 	bl	4a34 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3634:	4b48      	ldr	r3, [pc, #288]	; (3758 <gpio_nrfx_pin_configure+0x14c>)
    3636:	4298      	cmp	r0, r3
    3638:	d004      	beq.n	3644 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    363a:	f06f 0004 	mvn.w	r0, #4
}
    363e:	b005      	add	sp, #20
    3640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3644:	4284      	cmp	r4, r0
    3646:	d105      	bne.n	3654 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3648:	f89d 0008 	ldrb.w	r0, [sp, #8]
    364c:	f001 f954 	bl	48f8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3650:	42a0      	cmp	r0, r4
    3652:	d1f2      	bne.n	363a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3654:	2000      	movs	r0, #0
    3656:	e7f2      	b.n	363e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3658:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    365c:	f10d 0103 	add.w	r1, sp, #3
    3660:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3662:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3666:	f001 f8ed 	bl	4844 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    366a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    366c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    366e:	aa02      	add	r2, sp, #8
    3670:	4649      	mov	r1, r9
    3672:	4628      	mov	r0, r5
    3674:	f000 ffc8 	bl	4608 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3678:	4b37      	ldr	r3, [pc, #220]	; (3758 <gpio_nrfx_pin_configure+0x14c>)
    367a:	4298      	cmp	r0, r3
    367c:	d002      	beq.n	3684 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    367e:	f06f 0015 	mvn.w	r0, #21
    3682:	e7dc      	b.n	363e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3684:	4580      	cmp	r8, r0
    3686:	d103      	bne.n	3690 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3688:	f89d 0003 	ldrb.w	r0, [sp, #3]
    368c:	f001 f934 	bl	48f8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3690:	05a3      	lsls	r3, r4, #22
    3692:	d54e      	bpl.n	3732 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3694:	4b31      	ldr	r3, [pc, #196]	; (375c <gpio_nrfx_pin_configure+0x150>)
    3696:	4a32      	ldr	r2, [pc, #200]	; (3760 <gpio_nrfx_pin_configure+0x154>)
    3698:	4023      	ands	r3, r4
    369a:	4293      	cmp	r3, r2
    369c:	d03a      	beq.n	3714 <gpio_nrfx_pin_configure+0x108>
    369e:	d80c      	bhi.n	36ba <gpio_nrfx_pin_configure+0xae>
    36a0:	2b06      	cmp	r3, #6
    36a2:	d014      	beq.n	36ce <gpio_nrfx_pin_configure+0xc2>
    36a4:	d804      	bhi.n	36b0 <gpio_nrfx_pin_configure+0xa4>
    36a6:	b193      	cbz	r3, 36ce <gpio_nrfx_pin_configure+0xc2>
    36a8:	2b02      	cmp	r3, #2
    36aa:	d1e8      	bne.n	367e <gpio_nrfx_pin_configure+0x72>
    36ac:	2304      	movs	r3, #4
    36ae:	e00e      	b.n	36ce <gpio_nrfx_pin_configure+0xc2>
    36b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    36b4:	d1e3      	bne.n	367e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    36b6:	2301      	movs	r3, #1
    36b8:	e009      	b.n	36ce <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36ba:	4a2a      	ldr	r2, [pc, #168]	; (3764 <gpio_nrfx_pin_configure+0x158>)
    36bc:	4293      	cmp	r3, r2
    36be:	d02b      	beq.n	3718 <gpio_nrfx_pin_configure+0x10c>
    36c0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    36c4:	d02a      	beq.n	371c <gpio_nrfx_pin_configure+0x110>
    36c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    36ca:	d1d8      	bne.n	367e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    36cc:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    36ce:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    36d2:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    36d6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    36da:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    36dc:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    36e0:	bf54      	ite	pl
    36e2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    36e6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    36e8:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    36ea:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    36ee:	d517      	bpl.n	3720 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	2101      	movs	r1, #1
    36f4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    36f8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    36fc:	2200      	movs	r2, #0
    36fe:	a901      	add	r1, sp, #4
    3700:	4628      	mov	r0, r5
    3702:	f001 f829 	bl	4758 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3706:	4b14      	ldr	r3, [pc, #80]	; (3758 <gpio_nrfx_pin_configure+0x14c>)
    3708:	4298      	cmp	r0, r3
    370a:	bf14      	ite	ne
    370c:	f06f 0015 	mvnne.w	r0, #21
    3710:	2000      	moveq	r0, #0
    3712:	e794      	b.n	363e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3714:	2307      	movs	r3, #7
    3716:	e7da      	b.n	36ce <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3718:	2305      	movs	r3, #5
    371a:	e7d8      	b.n	36ce <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    371c:	2303      	movs	r3, #3
    371e:	e7d6      	b.n	36ce <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3720:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3722:	bf41      	itttt	mi
    3724:	687b      	ldrmi	r3, [r7, #4]
    3726:	2101      	movmi	r1, #1
    3728:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    372c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3730:	e7e4      	b.n	36fc <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3732:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3734:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3738:	bf54      	ite	pl
    373a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    373e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3740:	461a      	mov	r2, r3
    3742:	a901      	add	r1, sp, #4
    3744:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3746:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    374a:	f000 ff5d 	bl	4608 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    374e:	4b02      	ldr	r3, [pc, #8]	; (3758 <gpio_nrfx_pin_configure+0x14c>)
    3750:	4298      	cmp	r0, r3
    3752:	f43f af7f 	beq.w	3654 <gpio_nrfx_pin_configure+0x48>
    3756:	e792      	b.n	367e <gpio_nrfx_pin_configure+0x72>
    3758:	0bad0000 	.word	0x0bad0000
    375c:	00f00006 	.word	0x00f00006
    3760:	00100006 	.word	0x00100006
    3764:	00400002 	.word	0x00400002

00003768 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3768:	4802      	ldr	r0, [pc, #8]	; (3774 <pwm_nrfx_get_cycles_per_sec+0xc>)
    376a:	2100      	movs	r1, #0
    376c:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3770:	2000      	movs	r0, #0
    3772:	4770      	bx	lr
    3774:	00f42400 	.word	0x00f42400

00003778 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3778:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    377a:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    377c:	6912      	ldr	r2, [r2, #16]
{
    377e:	b538      	push	{r3, r4, r5, lr}
    3780:	f100 0308 	add.w	r3, r0, #8
    3784:	3204      	adds	r2, #4
    3786:	f100 040c 	add.w	r4, r0, #12
    378a:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    378c:	f913 5b01 	ldrsb.w	r5, [r3], #1
    3790:	2d00      	cmp	r5, #0
    3792:	bfb4      	ite	lt
    3794:	2500      	movlt	r5, #0
    3796:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    379a:	42a3      	cmp	r3, r4

		data->current[i] = value;
    379c:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    37a0:	d1f4      	bne.n	378c <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    37a2:	2300      	movs	r3, #0
    37a4:	461a      	mov	r2, r3
    37a6:	f001 fb07 	bl	4db8 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    37aa:	4b03      	ldr	r3, [pc, #12]	; (37b8 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    37ac:	4298      	cmp	r0, r3
	}

	return 0;
}
    37ae:	bf14      	ite	ne
    37b0:	f06f 000f 	mvnne.w	r0, #15
    37b4:	2000      	moveq	r0, #0
    37b6:	bd38      	pop	{r3, r4, r5, pc}
    37b8:	0bad0000 	.word	0x0bad0000

000037bc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    37bc:	6802      	ldr	r2, [r0, #0]
    switch (port)
    37be:	0953      	lsrs	r3, r2, #5
{
    37c0:	b510      	push	{r4, lr}
    37c2:	4604      	mov	r4, r0
    switch (port)
    37c4:	d02c      	beq.n	3820 <nrf_gpio_pin_port_decode+0x64>
    37c6:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    37c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    37cc:	bf18      	it	ne
    37ce:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    37d0:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    37d4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    37d6:	07db      	lsls	r3, r3, #31
    37d8:	d40b      	bmi.n	37f2 <nrf_gpio_pin_port_decode+0x36>
    37da:	4914      	ldr	r1, [pc, #80]	; (382c <nrf_gpio_pin_port_decode+0x70>)
    37dc:	4814      	ldr	r0, [pc, #80]	; (3830 <nrf_gpio_pin_port_decode+0x74>)
    37de:	4a15      	ldr	r2, [pc, #84]	; (3834 <nrf_gpio_pin_port_decode+0x78>)
    37e0:	f240 2329 	movw	r3, #553	; 0x229
    37e4:	f004 fcc7 	bl	8176 <printk>
    37e8:	4812      	ldr	r0, [pc, #72]	; (3834 <nrf_gpio_pin_port_decode+0x78>)
    37ea:	f240 2129 	movw	r1, #553	; 0x229
    37ee:	f004 fbee 	bl	7fce <assert_post_action>
    uint32_t pin_number = *p_pin;
    37f2:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    37f4:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    37f8:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    37fa:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    37fc:	d00d      	beq.n	381a <nrf_gpio_pin_port_decode+0x5e>
    37fe:	2b01      	cmp	r3, #1
    3800:	d011      	beq.n	3826 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3802:	490d      	ldr	r1, [pc, #52]	; (3838 <nrf_gpio_pin_port_decode+0x7c>)
    3804:	480a      	ldr	r0, [pc, #40]	; (3830 <nrf_gpio_pin_port_decode+0x74>)
    3806:	4a0b      	ldr	r2, [pc, #44]	; (3834 <nrf_gpio_pin_port_decode+0x78>)
    3808:	f240 232e 	movw	r3, #558	; 0x22e
    380c:	f004 fcb3 	bl	8176 <printk>
    3810:	4808      	ldr	r0, [pc, #32]	; (3834 <nrf_gpio_pin_port_decode+0x78>)
    3812:	f240 212e 	movw	r1, #558	; 0x22e
    3816:	f004 fbda 	bl	7fce <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    381a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    381e:	bd10      	pop	{r4, pc}
    switch (port)
    3820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3824:	e7d4      	b.n	37d0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3826:	4805      	ldr	r0, [pc, #20]	; (383c <nrf_gpio_pin_port_decode+0x80>)
    3828:	e7f9      	b.n	381e <nrf_gpio_pin_port_decode+0x62>
    382a:	bf00      	nop
    382c:	000095a4 	.word	0x000095a4
    3830:	00008fa5 	.word	0x00008fa5
    3834:	00009571 	.word	0x00009571
    3838:	0000978b 	.word	0x0000978b
    383c:	50000300 	.word	0x50000300

00003840 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3840:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3842:	794b      	ldrb	r3, [r1, #5]
    3844:	2b01      	cmp	r3, #1
    3846:	d026      	beq.n	3896 <uarte_nrfx_configure+0x56>
    3848:	2b03      	cmp	r3, #3
    384a:	d121      	bne.n	3890 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    384c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    384e:	798b      	ldrb	r3, [r1, #6]
    3850:	2b03      	cmp	r3, #3
    3852:	d11d      	bne.n	3890 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3854:	79cc      	ldrb	r4, [r1, #7]
    3856:	b10c      	cbz	r4, 385c <uarte_nrfx_configure+0x1c>
    3858:	2c01      	cmp	r4, #1
    385a:	d119      	bne.n	3890 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    385c:	790a      	ldrb	r2, [r1, #4]
    385e:	b112      	cbz	r2, 3866 <uarte_nrfx_configure+0x26>
    3860:	2a02      	cmp	r2, #2
    3862:	d115      	bne.n	3890 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3864:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3866:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3868:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    386a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    386e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3870:	d065      	beq.n	393e <uarte_nrfx_configure+0xfe>
    3872:	d82d      	bhi.n	38d0 <uarte_nrfx_configure+0x90>
    3874:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3878:	d064      	beq.n	3944 <uarte_nrfx_configure+0x104>
    387a:	d816      	bhi.n	38aa <uarte_nrfx_configure+0x6a>
    387c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3880:	d062      	beq.n	3948 <uarte_nrfx_configure+0x108>
    3882:	d80a      	bhi.n	389a <uarte_nrfx_configure+0x5a>
    3884:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3888:	d061      	beq.n	394e <uarte_nrfx_configure+0x10e>
    388a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    388e:	d061      	beq.n	3954 <uarte_nrfx_configure+0x114>
    3890:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3894:	e052      	b.n	393c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3896:	2600      	movs	r6, #0
    3898:	e7d9      	b.n	384e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    389a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    389e:	d05c      	beq.n	395a <uarte_nrfx_configure+0x11a>
    38a0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    38a4:	d1f4      	bne.n	3890 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    38a6:	4b37      	ldr	r3, [pc, #220]	; (3984 <uarte_nrfx_configure+0x144>)
    38a8:	e03c      	b.n	3924 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38aa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    38ae:	d057      	beq.n	3960 <uarte_nrfx_configure+0x120>
    38b0:	d807      	bhi.n	38c2 <uarte_nrfx_configure+0x82>
    38b2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    38b6:	d055      	beq.n	3964 <uarte_nrfx_configure+0x124>
    38b8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    38bc:	d1e8      	bne.n	3890 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    38be:	4b32      	ldr	r3, [pc, #200]	; (3988 <uarte_nrfx_configure+0x148>)
    38c0:	e030      	b.n	3924 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38c2:	f647 2712 	movw	r7, #31250	; 0x7a12
    38c6:	42bb      	cmp	r3, r7
    38c8:	d1e2      	bne.n	3890 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    38ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    38ce:	e029      	b.n	3924 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38d0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    38d4:	d048      	beq.n	3968 <uarte_nrfx_configure+0x128>
    38d6:	d813      	bhi.n	3900 <uarte_nrfx_configure+0xc0>
    38d8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    38dc:	d047      	beq.n	396e <uarte_nrfx_configure+0x12e>
    38de:	d809      	bhi.n	38f4 <uarte_nrfx_configure+0xb4>
    38e0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    38e4:	42bb      	cmp	r3, r7
    38e6:	d044      	beq.n	3972 <uarte_nrfx_configure+0x132>
    38e8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    38ec:	d1d0      	bne.n	3890 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    38ee:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    38f2:	e017      	b.n	3924 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38f4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    38f8:	d1ca      	bne.n	3890 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    38fa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    38fe:	e011      	b.n	3924 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3900:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3904:	d038      	beq.n	3978 <uarte_nrfx_configure+0x138>
    3906:	d808      	bhi.n	391a <uarte_nrfx_configure+0xda>
    3908:	4f20      	ldr	r7, [pc, #128]	; (398c <uarte_nrfx_configure+0x14c>)
    390a:	42bb      	cmp	r3, r7
    390c:	d037      	beq.n	397e <uarte_nrfx_configure+0x13e>
    390e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3912:	d1bd      	bne.n	3890 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3914:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3918:	e004      	b.n	3924 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    391a:	4f1d      	ldr	r7, [pc, #116]	; (3990 <uarte_nrfx_configure+0x150>)
    391c:	42bb      	cmp	r3, r7
    391e:	d1b7      	bne.n	3890 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3924:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3928:	6903      	ldr	r3, [r0, #16]
    392a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    392c:	4334      	orrs	r4, r6
    392e:	4322      	orrs	r2, r4
    3930:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3932:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3936:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    393a:	2000      	movs	r0, #0
}
    393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    393e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3942:	e7ef      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3944:	4b13      	ldr	r3, [pc, #76]	; (3994 <uarte_nrfx_configure+0x154>)
    3946:	e7ed      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3948:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    394c:	e7ea      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    394e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3952:	e7e7      	b.n	3924 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3954:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3958:	e7e4      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    395a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    395e:	e7e1      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3960:	4b0d      	ldr	r3, [pc, #52]	; (3998 <uarte_nrfx_configure+0x158>)
    3962:	e7df      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3964:	4b0d      	ldr	r3, [pc, #52]	; (399c <uarte_nrfx_configure+0x15c>)
    3966:	e7dd      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3968:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    396c:	e7da      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    396e:	4b0c      	ldr	r3, [pc, #48]	; (39a0 <uarte_nrfx_configure+0x160>)
    3970:	e7d8      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3972:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3976:	e7d5      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3978:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    397c:	e7d2      	b.n	3924 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    397e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3982:	e7cf      	b.n	3924 <uarte_nrfx_configure+0xe4>
    3984:	0013b000 	.word	0x0013b000
    3988:	004ea000 	.word	0x004ea000
    398c:	0003d090 	.word	0x0003d090
    3990:	000f4240 	.word	0x000f4240
    3994:	00275000 	.word	0x00275000
    3998:	0075c000 	.word	0x0075c000
    399c:	003af000 	.word	0x003af000
    39a0:	013a9000 	.word	0x013a9000

000039a4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    39a4:	6802      	ldr	r2, [r0, #0]
    switch (port)
    39a6:	0953      	lsrs	r3, r2, #5
{
    39a8:	b510      	push	{r4, lr}
    39aa:	4604      	mov	r4, r0
    switch (port)
    39ac:	d02c      	beq.n	3a08 <nrf_gpio_pin_port_decode+0x64>
    39ae:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    39b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    39b4:	bf18      	it	ne
    39b6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    39b8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    39bc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    39be:	07db      	lsls	r3, r3, #31
    39c0:	d40b      	bmi.n	39da <nrf_gpio_pin_port_decode+0x36>
    39c2:	4914      	ldr	r1, [pc, #80]	; (3a14 <nrf_gpio_pin_port_decode+0x70>)
    39c4:	4814      	ldr	r0, [pc, #80]	; (3a18 <nrf_gpio_pin_port_decode+0x74>)
    39c6:	4a15      	ldr	r2, [pc, #84]	; (3a1c <nrf_gpio_pin_port_decode+0x78>)
    39c8:	f240 2329 	movw	r3, #553	; 0x229
    39cc:	f004 fbd3 	bl	8176 <printk>
    39d0:	4812      	ldr	r0, [pc, #72]	; (3a1c <nrf_gpio_pin_port_decode+0x78>)
    39d2:	f240 2129 	movw	r1, #553	; 0x229
    39d6:	f004 fafa 	bl	7fce <assert_post_action>
    uint32_t pin_number = *p_pin;
    39da:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    39dc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39e0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    39e2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39e4:	d00d      	beq.n	3a02 <nrf_gpio_pin_port_decode+0x5e>
    39e6:	2b01      	cmp	r3, #1
    39e8:	d011      	beq.n	3a0e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    39ea:	490d      	ldr	r1, [pc, #52]	; (3a20 <nrf_gpio_pin_port_decode+0x7c>)
    39ec:	480a      	ldr	r0, [pc, #40]	; (3a18 <nrf_gpio_pin_port_decode+0x74>)
    39ee:	4a0b      	ldr	r2, [pc, #44]	; (3a1c <nrf_gpio_pin_port_decode+0x78>)
    39f0:	f240 232e 	movw	r3, #558	; 0x22e
    39f4:	f004 fbbf 	bl	8176 <printk>
    39f8:	4808      	ldr	r0, [pc, #32]	; (3a1c <nrf_gpio_pin_port_decode+0x78>)
    39fa:	f240 212e 	movw	r1, #558	; 0x22e
    39fe:	f004 fae6 	bl	7fce <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a02:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3a06:	bd10      	pop	{r4, pc}
    switch (port)
    3a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a0c:	e7d4      	b.n	39b8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3a0e:	4805      	ldr	r0, [pc, #20]	; (3a24 <nrf_gpio_pin_port_decode+0x80>)
    3a10:	e7f9      	b.n	3a06 <nrf_gpio_pin_port_decode+0x62>
    3a12:	bf00      	nop
    3a14:	000095a4 	.word	0x000095a4
    3a18:	00008fa5 	.word	0x00008fa5
    3a1c:	00009571 	.word	0x00009571
    3a20:	0000978b 	.word	0x0000978b
    3a24:	50000300 	.word	0x50000300

00003a28 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3a2a:	6906      	ldr	r6, [r0, #16]
{
    3a2c:	4605      	mov	r5, r0
    3a2e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3a30:	f004 ff29 	bl	8886 <k_is_in_isr>
    3a34:	b910      	cbnz	r0, 3a3c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3a36:	4b2c      	ldr	r3, [pc, #176]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
	int key;

	if (isr_mode) {
    3a38:	781b      	ldrb	r3, [r3, #0]
    3a3a:	b983      	cbnz	r3, 3a5e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3a3c:	f04f 0320 	mov.w	r3, #32
    3a40:	f3ef 8411 	mrs	r4, BASEPRI
    3a44:	f383 8812 	msr	BASEPRI_MAX, r3
    3a48:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3a4c:	4628      	mov	r0, r5
    3a4e:	f004 fdcc 	bl	85ea <is_tx_ready>
    3a52:	bb28      	cbnz	r0, 3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
	__asm__ volatile(
    3a54:	f384 8811 	msr	BASEPRI, r4
    3a58:	f3bf 8f6f 	isb	sy
}
    3a5c:	e7ee      	b.n	3a3c <uarte_nrfx_poll_out+0x14>
{
    3a5e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3a60:	4628      	mov	r0, r5
    3a62:	f004 fdc2 	bl	85ea <is_tx_ready>
    3a66:	b970      	cbnz	r0, 3a86 <uarte_nrfx_poll_out+0x5e>
    3a68:	2001      	movs	r0, #1
    3a6a:	f004 fe10 	bl	868e <nrfx_busy_wait>
    3a6e:	3c01      	subs	r4, #1
    3a70:	d1f6      	bne.n	3a60 <uarte_nrfx_poll_out+0x38>
    3a72:	2100      	movs	r1, #0
    3a74:	2021      	movs	r0, #33	; 0x21
    3a76:	f003 f939 	bl	6cec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3a7a:	e7f0      	b.n	3a5e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3a7c:	f384 8811 	msr	BASEPRI, r4
    3a80:	f3bf 8f6f 	isb	sy
}
    3a84:	e7f5      	b.n	3a72 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3a86:	f04f 0320 	mov.w	r3, #32
    3a8a:	f3ef 8411 	mrs	r4, BASEPRI
    3a8e:	f383 8812 	msr	BASEPRI_MAX, r3
    3a92:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3a96:	4628      	mov	r0, r5
    3a98:	f004 fda7 	bl	85ea <is_tx_ready>
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d0ed      	beq.n	3a7c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3aa0:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3aa4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3aa6:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3aa8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3aaa:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3aae:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ab2:	2200      	movs	r2, #0
    3ab4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3ab8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3abc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3ac0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3ac4:	684a      	ldr	r2, [r1, #4]
    3ac6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3ac8:	bf41      	itttt	mi
    3aca:	2208      	movmi	r2, #8
    3acc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3ad0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3ad4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ad8:	2201      	movs	r2, #1
    3ada:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3adc:	f384 8811 	msr	BASEPRI, r4
    3ae0:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ae6:	bf00      	nop
    3ae8:	2000103f 	.word	0x2000103f

00003aec <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3af0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3af4:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    3af6:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3afa:	2300      	movs	r3, #0
    3afc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3b00:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3b02:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3b04:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    3b06:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3b08:	1c58      	adds	r0, r3, #1
    3b0a:	d013      	beq.n	3b34 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b0c:	a801      	add	r0, sp, #4
    3b0e:	9301      	str	r3, [sp, #4]
    3b10:	f7ff ff48 	bl	39a4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3b14:	9a01      	ldr	r2, [sp, #4]
    3b16:	2301      	movs	r3, #1
    3b18:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3b1a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3b1e:	68eb      	ldr	r3, [r5, #12]
    3b20:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b22:	a801      	add	r0, sp, #4
    3b24:	f7ff ff3e 	bl	39a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3b28:	9b01      	ldr	r3, [sp, #4]
    3b2a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3b2e:	2203      	movs	r2, #3
    3b30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3b34:	692b      	ldr	r3, [r5, #16]
    3b36:	1c59      	adds	r1, r3, #1
    3b38:	d011      	beq.n	3b5e <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3b3a:	7f2a      	ldrb	r2, [r5, #28]
    3b3c:	9301      	str	r3, [sp, #4]
    3b3e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b40:	a801      	add	r0, sp, #4
    3b42:	bf14      	ite	ne
    3b44:	f04f 0903 	movne.w	r9, #3
    3b48:	f04f 0900 	moveq.w	r9, #0
    3b4c:	f7ff ff2a 	bl	39a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3b50:	9b01      	ldr	r3, [sp, #4]
    3b52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3b56:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3b5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3b5e:	696b      	ldr	r3, [r5, #20]
    3b60:	1c5a      	adds	r2, r3, #1
    3b62:	d013      	beq.n	3b8c <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b64:	a801      	add	r0, sp, #4
    3b66:	9301      	str	r3, [sp, #4]
    3b68:	f7ff ff1c 	bl	39a4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3b6c:	9a01      	ldr	r2, [sp, #4]
    3b6e:	2301      	movs	r3, #1
    3b70:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3b72:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3b76:	696b      	ldr	r3, [r5, #20]
    3b78:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b7a:	a801      	add	r0, sp, #4
    3b7c:	f7ff ff12 	bl	39a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3b80:	9b01      	ldr	r3, [sp, #4]
    3b82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3b86:	2203      	movs	r2, #3
    3b88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3b8c:	69ab      	ldr	r3, [r5, #24]
    3b8e:	1c58      	adds	r0, r3, #1
    3b90:	d011      	beq.n	3bb6 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3b92:	7f6a      	ldrb	r2, [r5, #29]
    3b94:	9301      	str	r3, [sp, #4]
    3b96:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b98:	a801      	add	r0, sp, #4
    3b9a:	bf14      	ite	ne
    3b9c:	f04f 0903 	movne.w	r9, #3
    3ba0:	f04f 0900 	moveq.w	r9, #0
    3ba4:	f7ff fefe 	bl	39a4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3ba8:	9b01      	ldr	r3, [sp, #4]
    3baa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3bae:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3bb6:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    3bba:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3bbc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3bc0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3bc4:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3bc8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3bcc:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    3bce:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3bd2:	3104      	adds	r1, #4
    3bd4:	4630      	mov	r0, r6
    3bd6:	f7ff fe33 	bl	3840 <uarte_nrfx_configure>
	if (err) {
    3bda:	4605      	mov	r5, r0
    3bdc:	2800      	cmp	r0, #0
    3bde:	d146      	bne.n	3c6e <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3be0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3be4:	0799      	lsls	r1, r3, #30
    3be6:	d519      	bpl.n	3c1c <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3be8:	f107 0012 	add.w	r0, r7, #18
    3bec:	f001 f820 	bl	4c30 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3bf0:	4b22      	ldr	r3, [pc, #136]	; (3c7c <uarte_instance_init.isra.0+0x190>)
    3bf2:	4298      	cmp	r0, r3
    3bf4:	d13f      	bne.n	3c76 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3bf6:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3bf8:	00c3      	lsls	r3, r0, #3
    3bfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3bfe:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3c02:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3c06:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3c0a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3c0e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3c12:	4a1b      	ldr	r2, [pc, #108]	; (3c80 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3c14:	2301      	movs	r3, #1
    3c16:	4083      	lsls	r3, r0
    3c18:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3c1c:	2308      	movs	r3, #8
    3c1e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3c22:	f898 3008 	ldrb.w	r3, [r8, #8]
    3c26:	b95b      	cbnz	r3, 3c40 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c28:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3c2c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3c30:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3c34:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3c38:	2301      	movs	r3, #1
    3c3a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c3e:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3c40:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3c44:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3c46:	bf5c      	itt	pl
    3c48:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3c4c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3c50:	06db      	lsls	r3, r3, #27
    3c52:	bf44      	itt	mi
    3c54:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3c58:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3c5c:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    3c5e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3c60:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3c64:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c68:	2301      	movs	r3, #1
    3c6a:	60a3      	str	r3, [r4, #8]
    3c6c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3c6e:	4628      	mov	r0, r5
    3c70:	b003      	add	sp, #12
    3c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3c76:	f06f 0504 	mvn.w	r5, #4
    3c7a:	e7f8      	b.n	3c6e <uarte_instance_init.isra.0+0x182>
    3c7c:	0bad0000 	.word	0x0bad0000
    3c80:	4001f000 	.word	0x4001f000

00003c84 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3c84:	4919      	ldr	r1, [pc, #100]	; (3cec <sys_clock_timeout_handler+0x68>)
{
    3c86:	b570      	push	{r4, r5, r6, lr}
    3c88:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3c8a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3c8e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3c90:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3c94:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3c98:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3c9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3c9e:	f04f 0500 	mov.w	r5, #0
    3ca2:	d20a      	bcs.n	3cba <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3ca4:	4b12      	ldr	r3, [pc, #72]	; (3cf0 <sys_clock_timeout_handler+0x6c>)
    3ca6:	6819      	ldr	r1, [r3, #0]
    3ca8:	060a      	lsls	r2, r1, #24
    3caa:	0a0b      	lsrs	r3, r1, #8
    3cac:	1992      	adds	r2, r2, r6
    3cae:	4911      	ldr	r1, [pc, #68]	; (3cf4 <sys_clock_timeout_handler+0x70>)
    3cb0:	f143 0300 	adc.w	r3, r3, #0
    3cb4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3cb8:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3cba:	f003 fd43 	bl	7744 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3cbe:	00a3      	lsls	r3, r4, #2
    3cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3cc4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3cc8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3ccc:	42b2      	cmp	r2, r6
    3cce:	d10b      	bne.n	3ce8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3cd0:	b91d      	cbnz	r5, 3cda <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3cd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3cd6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3cda:	4b07      	ldr	r3, [pc, #28]	; (3cf8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cdc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3ce0:	fa00 f404 	lsl.w	r4, r0, r4
    3ce4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3ce8:	bd70      	pop	{r4, r5, r6, pc}
    3cea:	bf00      	nop
    3cec:	200003d8 	.word	0x200003d8
    3cf0:	20000b04 	.word	0x20000b04
    3cf4:	200003c0 	.word	0x200003c0
    3cf8:	40011000 	.word	0x40011000

00003cfc <compare_int_lock>:
{
    3cfc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3cfe:	2301      	movs	r3, #1
    3d00:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d02:	4a11      	ldr	r2, [pc, #68]	; (3d48 <compare_int_lock+0x4c>)
    3d04:	f3bf 8f5b 	dmb	ish
    3d08:	43dc      	mvns	r4, r3
    3d0a:	e852 1f00 	ldrex	r1, [r2]
    3d0e:	ea01 0c04 	and.w	ip, r1, r4
    3d12:	e842 ce00 	strex	lr, ip, [r2]
    3d16:	f1be 0f00 	cmp.w	lr, #0
    3d1a:	d1f6      	bne.n	3d0a <compare_int_lock+0xe>
    3d1c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3d24:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3d28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3d2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3d30:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3d34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d38:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    3d3c:	420b      	tst	r3, r1
}
    3d3e:	bf14      	ite	ne
    3d40:	2001      	movne	r0, #1
    3d42:	2000      	moveq	r0, #0
    3d44:	bd10      	pop	{r4, pc}
    3d46:	bf00      	nop
    3d48:	20000b00 	.word	0x20000b00

00003d4c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    3d4c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3d4e:	4a12      	ldr	r2, [pc, #72]	; (3d98 <compare_int_unlock.part.0+0x4c>)
    3d50:	f3bf 8f5b 	dmb	ish
    3d54:	4083      	lsls	r3, r0
    3d56:	e852 1f00 	ldrex	r1, [r2]
    3d5a:	4319      	orrs	r1, r3
    3d5c:	e842 1c00 	strex	ip, r1, [r2]
    3d60:	f1bc 0f00 	cmp.w	ip, #0
    3d64:	d1f7      	bne.n	3d56 <compare_int_unlock.part.0+0xa>
    3d66:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3d6a:	4a0c      	ldr	r2, [pc, #48]	; (3d9c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3d70:	4083      	lsls	r3, r0
    3d72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3d76:	4b0a      	ldr	r3, [pc, #40]	; (3da0 <compare_int_unlock.part.0+0x54>)
    3d78:	f3bf 8f5b 	dmb	ish
    3d7c:	681b      	ldr	r3, [r3, #0]
    3d7e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3d82:	fa23 f000 	lsr.w	r0, r3, r0
    3d86:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d88:	bf42      	ittt	mi
    3d8a:	4b06      	ldrmi	r3, [pc, #24]	; (3da4 <compare_int_unlock.part.0+0x58>)
    3d8c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3d90:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3d94:	4770      	bx	lr
    3d96:	bf00      	nop
    3d98:	20000b00 	.word	0x20000b00
    3d9c:	40011000 	.word	0x40011000
    3da0:	20000afc 	.word	0x20000afc
    3da4:	e000e100 	.word	0xe000e100

00003da8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3da8:	4b0d      	ldr	r3, [pc, #52]	; (3de0 <z_nrf_rtc_timer_read+0x38>)
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	0a19      	lsrs	r1, r3, #8
    3dae:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3db0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3db4:	4b0b      	ldr	r3, [pc, #44]	; (3de4 <z_nrf_rtc_timer_read+0x3c>)
    3db6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3dba:	18c0      	adds	r0, r0, r3
    3dbc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3dc4:	d20a      	bcs.n	3ddc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3dc6:	4b08      	ldr	r3, [pc, #32]	; (3de8 <z_nrf_rtc_timer_read+0x40>)
    3dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dcc:	4299      	cmp	r1, r3
    3dce:	bf08      	it	eq
    3dd0:	4290      	cmpeq	r0, r2
    3dd2:	d203      	bcs.n	3ddc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3dd4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3dd8:	f141 0100 	adc.w	r1, r1, #0
}
    3ddc:	4770      	bx	lr
    3dde:	bf00      	nop
    3de0:	20000b04 	.word	0x20000b04
    3de4:	40011000 	.word	0x40011000
    3de8:	200003c0 	.word	0x200003c0

00003dec <compare_set>:
{
    3dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3df0:	b085      	sub	sp, #20
    3df2:	4616      	mov	r6, r2
    3df4:	461f      	mov	r7, r3
    3df6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3df8:	f7ff ff80 	bl	3cfc <compare_int_lock>
    3dfc:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3dfe:	f7ff ffd3 	bl	3da8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3e02:	42b9      	cmp	r1, r7
    3e04:	bf08      	it	eq
    3e06:	42b0      	cmpeq	r0, r6
    3e08:	d27f      	bcs.n	3f0a <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    3e0a:	ebb6 0800 	subs.w	r8, r6, r0
    3e0e:	eb67 0901 	sbc.w	r9, r7, r1
    3e12:	2300      	movs	r3, #0
    3e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3e18:	454b      	cmp	r3, r9
    3e1a:	bf08      	it	eq
    3e1c:	4542      	cmpeq	r2, r8
    3e1e:	f0c0 8085 	bcc.w	3f2c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    3e22:	4b44      	ldr	r3, [pc, #272]	; (3f34 <compare_set+0x148>)
    3e24:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3e28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3e2c:	429f      	cmp	r7, r3
    3e2e:	bf08      	it	eq
    3e30:	4296      	cmpeq	r6, r2
    3e32:	d054      	beq.n	3ede <compare_set+0xf2>
    3e34:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3e38:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    3e3c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3e40:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3e44:	fa0b f205 	lsl.w	r2, fp, r5
    3e48:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3e4c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e50:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3e54:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    3e56:	4a38      	ldr	r2, [pc, #224]	; (3f38 <compare_set+0x14c>)
    return p_reg->CC[ch];
    3e58:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    3e5c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e60:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3e64:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3e68:	461c      	mov	r4, r3
    3e6a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3e6c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3e70:	eba0 000a 	sub.w	r0, r0, sl
    3e74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3e78:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3e7c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3e7e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3e82:	d105      	bne.n	3e90 <compare_set+0xa4>
    3e84:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3e86:	2013      	movs	r0, #19
    3e88:	f004 fd09 	bl	889e <z_impl_k_busy_wait>
    3e8c:	4a2a      	ldr	r2, [pc, #168]	; (3f38 <compare_set+0x14c>)
    3e8e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3e90:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3e92:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3e96:	eba4 000c 	sub.w	r0, r4, ip
    3e9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3e9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3ea2:	bf88      	it	hi
    3ea4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ea6:	2000      	movs	r0, #0
    3ea8:	f8c8 0000 	str.w	r0, [r8]
    3eac:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3eb0:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3eb4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3eb8:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3ebc:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3ec0:	4582      	cmp	sl, r0
    3ec2:	d006      	beq.n	3ed2 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3ec4:	1a20      	subs	r0, r4, r0
    3ec6:	3802      	subs	r0, #2
    3ec8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3ecc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3ed0:	d819      	bhi.n	3f06 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3ed2:	1ae4      	subs	r4, r4, r3
    3ed4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3ed8:	1932      	adds	r2, r6, r4
    3eda:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3ede:	4c15      	ldr	r4, [pc, #84]	; (3f34 <compare_set+0x148>)
    3ee0:	0129      	lsls	r1, r5, #4
    3ee2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3ee6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3eee:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3ef0:	6043      	str	r3, [r0, #4]
	return ret;
    3ef2:	2400      	movs	r4, #0
	if (key) {
    3ef4:	9b01      	ldr	r3, [sp, #4]
    3ef6:	b113      	cbz	r3, 3efe <compare_set+0x112>
    3ef8:	4628      	mov	r0, r5
    3efa:	f7ff ff27 	bl	3d4c <compare_int_unlock.part.0>
}
    3efe:	4620      	mov	r0, r4
    3f00:	b005      	add	sp, #20
    3f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f06:	4620      	mov	r0, r4
    3f08:	e7b0      	b.n	3e6c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    3f0a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3f0c:	4a0b      	ldr	r2, [pc, #44]	; (3f3c <compare_set+0x150>)
    3f0e:	f3bf 8f5b 	dmb	ish
    3f12:	40ab      	lsls	r3, r5
    3f14:	e852 1f00 	ldrex	r1, [r2]
    3f18:	4319      	orrs	r1, r3
    3f1a:	e842 1000 	strex	r0, r1, [r2]
    3f1e:	2800      	cmp	r0, #0
    3f20:	d1f8      	bne.n	3f14 <compare_set+0x128>
    3f22:	f3bf 8f5b 	dmb	ish
    3f26:	4632      	mov	r2, r6
    3f28:	463b      	mov	r3, r7
    3f2a:	e7d8      	b.n	3ede <compare_set+0xf2>
			return -EINVAL;
    3f2c:	f06f 0415 	mvn.w	r4, #21
    3f30:	e7e0      	b.n	3ef4 <compare_set+0x108>
    3f32:	bf00      	nop
    3f34:	200003c8 	.word	0x200003c8
    3f38:	40011000 	.word	0x40011000
    3f3c:	20000afc 	.word	0x20000afc

00003f40 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3f42:	4b19      	ldr	r3, [pc, #100]	; (3fa8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3f44:	4d19      	ldr	r5, [pc, #100]	; (3fac <sys_clock_driver_init+0x6c>)
    3f46:	2400      	movs	r4, #0
    3f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f50:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3f54:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3f5c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f60:	4b13      	ldr	r3, [pc, #76]	; (3fb0 <sys_clock_driver_init+0x70>)
    3f62:	2602      	movs	r6, #2
    3f64:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3f68:	2101      	movs	r1, #1
    3f6a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3f6e:	2011      	movs	r0, #17
    3f70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3f74:	4622      	mov	r2, r4
    3f76:	f7fe f9b5 	bl	22e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3f7a:	2011      	movs	r0, #17
    3f7c:	f7fe f994 	bl	22a8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3f80:	4a0c      	ldr	r2, [pc, #48]	; (3fb4 <sys_clock_driver_init+0x74>)
    3f82:	2301      	movs	r3, #1
    3f84:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3f86:	4a0c      	ldr	r2, [pc, #48]	; (3fb8 <sys_clock_driver_init+0x78>)
    3f88:	602b      	str	r3, [r5, #0]
    3f8a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3f8c:	4b0b      	ldr	r3, [pc, #44]	; (3fbc <sys_clock_driver_init+0x7c>)
    3f8e:	4a0c      	ldr	r2, [pc, #48]	; (3fc0 <sys_clock_driver_init+0x80>)
    3f90:	9300      	str	r3, [sp, #0]
    3f92:	9401      	str	r4, [sp, #4]
    3f94:	2300      	movs	r3, #0
    3f96:	4620      	mov	r0, r4
    3f98:	f7ff ff28 	bl	3dec <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3f9c:	4630      	mov	r0, r6
    3f9e:	f7ff f907 	bl	31b0 <z_nrf_clock_control_lf_on>

	return 0;
}
    3fa2:	4620      	mov	r0, r4
    3fa4:	b002      	add	sp, #8
    3fa6:	bd70      	pop	{r4, r5, r6, pc}
    3fa8:	200003c8 	.word	0x200003c8
    3fac:	40011000 	.word	0x40011000
    3fb0:	e000e100 	.word	0xe000e100
    3fb4:	40011008 	.word	0x40011008
    3fb8:	20000b00 	.word	0x20000b00
    3fbc:	00003c85 	.word	0x00003c85
    3fc0:	007fffff 	.word	0x007fffff

00003fc4 <rtc_nrf_isr>:
{
    3fc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3fc8:	4c34      	ldr	r4, [pc, #208]	; (409c <rtc_nrf_isr+0xd8>)
    3fca:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3fce:	079a      	lsls	r2, r3, #30
    3fd0:	d509      	bpl.n	3fe6 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fd2:	4b33      	ldr	r3, [pc, #204]	; (40a0 <rtc_nrf_isr+0xdc>)
    3fd4:	681a      	ldr	r2, [r3, #0]
    3fd6:	b132      	cbz	r2, 3fe6 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3fd8:	2200      	movs	r2, #0
    3fda:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3fdc:	4a31      	ldr	r2, [pc, #196]	; (40a4 <rtc_nrf_isr+0xe0>)
    3fde:	681b      	ldr	r3, [r3, #0]
    3fe0:	6813      	ldr	r3, [r2, #0]
    3fe2:	3301      	adds	r3, #1
    3fe4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3fe6:	f04f 0320 	mov.w	r3, #32
    3fea:	f3ef 8211 	mrs	r2, BASEPRI
    3fee:	f383 8812 	msr	BASEPRI_MAX, r3
    3ff2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3ff6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3ffa:	03db      	lsls	r3, r3, #15
    3ffc:	d512      	bpl.n	4024 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ffe:	f3bf 8f5b 	dmb	ish
    4002:	4b29      	ldr	r3, [pc, #164]	; (40a8 <rtc_nrf_isr+0xe4>)
    4004:	e853 1f00 	ldrex	r1, [r3]
    4008:	f021 0001 	bic.w	r0, r1, #1
    400c:	e843 0600 	strex	r6, r0, [r3]
    4010:	2e00      	cmp	r6, #0
    4012:	d1f7      	bne.n	4004 <rtc_nrf_isr+0x40>
    4014:	f3bf 8f5b 	dmb	ish
    4018:	4b24      	ldr	r3, [pc, #144]	; (40ac <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    401a:	2900      	cmp	r1, #0
    401c:	d136      	bne.n	408c <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    401e:	6819      	ldr	r1, [r3, #0]
		if (result) {
    4020:	2900      	cmp	r1, #0
    4022:	d133      	bne.n	408c <rtc_nrf_isr+0xc8>
{
    4024:	2300      	movs	r3, #0
	__asm__ volatile(
    4026:	f382 8811 	msr	BASEPRI, r2
    402a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    402e:	b353      	cbz	r3, 4086 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    4030:	f7ff feba 	bl	3da8 <z_nrf_rtc_timer_read>
    4034:	4606      	mov	r6, r0
	__asm__ volatile(
    4036:	f04f 0320 	mov.w	r3, #32
    403a:	f3ef 8011 	mrs	r0, BASEPRI
    403e:	f383 8812 	msr	BASEPRI_MAX, r3
    4042:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4046:	4b1a      	ldr	r3, [pc, #104]	; (40b0 <rtc_nrf_isr+0xec>)
    4048:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    404c:	4549      	cmp	r1, r9
    404e:	bf08      	it	eq
    4050:	4546      	cmpeq	r6, r8
    4052:	f04f 0200 	mov.w	r2, #0
    4056:	d31e      	bcc.n	4096 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4058:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    405c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    4060:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4064:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    4068:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    406a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    406e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    4072:	f380 8811 	msr	BASEPRI, r0
    4076:	f3bf 8f6f 	isb	sy
		if (handler) {
    407a:	b121      	cbz	r1, 4086 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    407c:	9500      	str	r5, [sp, #0]
    407e:	4642      	mov	r2, r8
    4080:	464b      	mov	r3, r9
    4082:	2000      	movs	r0, #0
    4084:	4788      	blx	r1
}
    4086:	b003      	add	sp, #12
    4088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    408c:	2100      	movs	r1, #0
    408e:	6019      	str	r1, [r3, #0]
    4090:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4092:	2301      	movs	r3, #1
}
    4094:	e7c7      	b.n	4026 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4096:	4611      	mov	r1, r2
    4098:	e7eb      	b.n	4072 <rtc_nrf_isr+0xae>
    409a:	bf00      	nop
    409c:	40011000 	.word	0x40011000
    40a0:	40011104 	.word	0x40011104
    40a4:	20000b04 	.word	0x20000b04
    40a8:	20000afc 	.word	0x20000afc
    40ac:	40011140 	.word	0x40011140
    40b0:	200003c8 	.word	0x200003c8

000040b4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    40b4:	4b14      	ldr	r3, [pc, #80]	; (4108 <sys_clock_set_timeout+0x54>)
{
    40b6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    40b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    40bc:	bf08      	it	eq
    40be:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    40c0:	1e44      	subs	r4, r0, #1
    40c2:	2c00      	cmp	r4, #0
    40c4:	dd1e      	ble.n	4104 <sys_clock_set_timeout+0x50>
    40c6:	429c      	cmp	r4, r3
    40c8:	bfa8      	it	ge
    40ca:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    40cc:	f7ff fe6c 	bl	3da8 <z_nrf_rtc_timer_read>
    40d0:	4b0e      	ldr	r3, [pc, #56]	; (410c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    40d2:	490f      	ldr	r1, [pc, #60]	; (4110 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    40d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    40d8:	1a80      	subs	r0, r0, r2
		ticks = 0;
    40da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    40de:	bf28      	it	cs
    40e0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    40e2:	3001      	adds	r0, #1
    40e4:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    40e8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    40ea:	4284      	cmp	r4, r0
    40ec:	bf28      	it	cs
    40ee:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    40f0:	1912      	adds	r2, r2, r4
    40f2:	f04f 0000 	mov.w	r0, #0
    40f6:	9001      	str	r0, [sp, #4]
    40f8:	f143 0300 	adc.w	r3, r3, #0
    40fc:	f7ff fe76 	bl	3dec <compare_set>
}
    4100:	b002      	add	sp, #8
    4102:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4104:	2400      	movs	r4, #0
    4106:	e7e1      	b.n	40cc <sys_clock_set_timeout+0x18>
    4108:	007fffff 	.word	0x007fffff
    410c:	200003d8 	.word	0x200003d8
    4110:	00003c85 	.word	0x00003c85

00004114 <sys_clock_elapsed>:
{
    4114:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4116:	f7ff fe47 	bl	3da8 <z_nrf_rtc_timer_read>
    411a:	4b02      	ldr	r3, [pc, #8]	; (4124 <sys_clock_elapsed+0x10>)
    411c:	681b      	ldr	r3, [r3, #0]
}
    411e:	1ac0      	subs	r0, r0, r3
    4120:	bd08      	pop	{r3, pc}
    4122:	bf00      	nop
    4124:	200003d8 	.word	0x200003d8

00004128 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    4128:	b508      	push	{r3, lr}
    switch (domain)
    412a:	b178      	cbz	r0, 414c <nrf_clock_is_running.constprop.0+0x24>
    412c:	2801      	cmp	r0, #1
    412e:	d01c      	beq.n	416a <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    4130:	4a14      	ldr	r2, [pc, #80]	; (4184 <nrf_clock_is_running.constprop.0+0x5c>)
    4132:	4915      	ldr	r1, [pc, #84]	; (4188 <nrf_clock_is_running.constprop.0+0x60>)
    4134:	4815      	ldr	r0, [pc, #84]	; (418c <nrf_clock_is_running.constprop.0+0x64>)
    4136:	f44f 734f 	mov.w	r3, #828	; 0x33c
    413a:	f004 f81c 	bl	8176 <printk>
    413e:	4811      	ldr	r0, [pc, #68]	; (4184 <nrf_clock_is_running.constprop.0+0x5c>)
    4140:	f44f 714f 	mov.w	r1, #828	; 0x33c
    4144:	f003 ff43 	bl	7fce <assert_post_action>
            return false;
    4148:	2000      	movs	r0, #0
    414a:	e00d      	b.n	4168 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    414c:	b131      	cbz	r1, 415c <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    414e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4152:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4156:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    415a:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    415c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4160:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4164:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    4168:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    416a:	b131      	cbz	r1, 417a <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    416c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4170:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4174:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4178:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    417a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    417e:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    4182:	e7ef      	b.n	4164 <nrf_clock_is_running.constprop.0+0x3c>
    4184:	000095e3 	.word	0x000095e3
    4188:	0000978b 	.word	0x0000978b
    418c:	00008fa5 	.word	0x00008fa5

00004190 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4190:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    4192:	4604      	mov	r4, r0
    4194:	b948      	cbnz	r0, 41aa <nrfx_clock_init+0x1a>
    4196:	490a      	ldr	r1, [pc, #40]	; (41c0 <nrfx_clock_init+0x30>)
    4198:	480a      	ldr	r0, [pc, #40]	; (41c4 <nrfx_clock_init+0x34>)
    419a:	4a0b      	ldr	r2, [pc, #44]	; (41c8 <nrfx_clock_init+0x38>)
    419c:	23bd      	movs	r3, #189	; 0xbd
    419e:	f003 ffea 	bl	8176 <printk>
    41a2:	4809      	ldr	r0, [pc, #36]	; (41c8 <nrfx_clock_init+0x38>)
    41a4:	21bd      	movs	r1, #189	; 0xbd
    41a6:	f003 ff12 	bl	7fce <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    41aa:	4b08      	ldr	r3, [pc, #32]	; (41cc <nrfx_clock_init+0x3c>)
    41ac:	791a      	ldrb	r2, [r3, #4]
    41ae:	b922      	cbnz	r2, 41ba <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    41b0:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    41b2:	4807      	ldr	r0, [pc, #28]	; (41d0 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    41b4:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    41b6:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    41b8:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    41ba:	4806      	ldr	r0, [pc, #24]	; (41d4 <nrfx_clock_init+0x44>)
    return err_code;
    41bc:	e7fc      	b.n	41b8 <nrfx_clock_init+0x28>
    41be:	bf00      	nop
    41c0:	00009654 	.word	0x00009654
    41c4:	00008fa5 	.word	0x00008fa5
    41c8:	00009617 	.word	0x00009617
    41cc:	20000b08 	.word	0x20000b08
    41d0:	0bad0000 	.word	0x0bad0000
    41d4:	0bad000c 	.word	0x0bad000c

000041d8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    41d8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    41da:	4b0b      	ldr	r3, [pc, #44]	; (4208 <nrfx_clock_enable+0x30>)
    41dc:	791b      	ldrb	r3, [r3, #4]
    41de:	b94b      	cbnz	r3, 41f4 <nrfx_clock_enable+0x1c>
    41e0:	490a      	ldr	r1, [pc, #40]	; (420c <nrfx_clock_enable+0x34>)
    41e2:	480b      	ldr	r0, [pc, #44]	; (4210 <nrfx_clock_enable+0x38>)
    41e4:	4a0b      	ldr	r2, [pc, #44]	; (4214 <nrfx_clock_enable+0x3c>)
    41e6:	23d6      	movs	r3, #214	; 0xd6
    41e8:	f003 ffc5 	bl	8176 <printk>
    41ec:	4809      	ldr	r0, [pc, #36]	; (4214 <nrfx_clock_enable+0x3c>)
    41ee:	21d6      	movs	r1, #214	; 0xd6
    41f0:	f003 feed 	bl	7fce <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    41f4:	2000      	movs	r0, #0
    41f6:	f7fe f867 	bl	22c8 <arch_irq_is_enabled>
    41fa:	b918      	cbnz	r0, 4204 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    41fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4200:	f7fe b852 	b.w	22a8 <arch_irq_enable>
    4204:	bd08      	pop	{r3, pc}
    4206:	bf00      	nop
    4208:	20000b08 	.word	0x20000b08
    420c:	00009662 	.word	0x00009662
    4210:	00008fa5 	.word	0x00008fa5
    4214:	00009617 	.word	0x00009617

00004218 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4218:	4b22      	ldr	r3, [pc, #136]	; (42a4 <nrfx_clock_start+0x8c>)
    421a:	791b      	ldrb	r3, [r3, #4]
{
    421c:	b513      	push	{r0, r1, r4, lr}
    421e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4220:	b95b      	cbnz	r3, 423a <nrfx_clock_start+0x22>
    4222:	4921      	ldr	r1, [pc, #132]	; (42a8 <nrfx_clock_start+0x90>)
    4224:	4821      	ldr	r0, [pc, #132]	; (42ac <nrfx_clock_start+0x94>)
    4226:	4a22      	ldr	r2, [pc, #136]	; (42b0 <nrfx_clock_start+0x98>)
    4228:	f44f 7389 	mov.w	r3, #274	; 0x112
    422c:	f003 ffa3 	bl	8176 <printk>
    4230:	481f      	ldr	r0, [pc, #124]	; (42b0 <nrfx_clock_start+0x98>)
    4232:	f44f 7189 	mov.w	r1, #274	; 0x112
    4236:	f003 feca 	bl	7fce <assert_post_action>
    switch (domain)
    423a:	b174      	cbz	r4, 425a <nrfx_clock_start+0x42>
    423c:	2c01      	cmp	r4, #1
    423e:	d027      	beq.n	4290 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4240:	4a1b      	ldr	r2, [pc, #108]	; (42b0 <nrfx_clock_start+0x98>)
    4242:	491c      	ldr	r1, [pc, #112]	; (42b4 <nrfx_clock_start+0x9c>)
    4244:	4819      	ldr	r0, [pc, #100]	; (42ac <nrfx_clock_start+0x94>)
    4246:	f44f 73a2 	mov.w	r3, #324	; 0x144
    424a:	f003 ff94 	bl	8176 <printk>
    424e:	4818      	ldr	r0, [pc, #96]	; (42b0 <nrfx_clock_start+0x98>)
    4250:	f44f 71a2 	mov.w	r1, #324	; 0x144
    4254:	f003 febb 	bl	7fce <assert_post_action>
            break;
    }
}
    4258:	e016      	b.n	4288 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    425a:	a901      	add	r1, sp, #4
    425c:	4620      	mov	r0, r4
    425e:	f7ff ff63 	bl	4128 <nrf_clock_is_running.constprop.0>
    4262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4266:	b188      	cbz	r0, 428c <nrfx_clock_start+0x74>
    4268:	9a01      	ldr	r2, [sp, #4]
    426a:	2a01      	cmp	r2, #1
    426c:	d10e      	bne.n	428c <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    426e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4272:	4b11      	ldr	r3, [pc, #68]	; (42b8 <nrfx_clock_start+0xa0>)
    4274:	2200      	movs	r2, #0
    4276:	601a      	str	r2, [r3, #0]
    4278:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    427a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    427e:	2202      	movs	r2, #2
    4280:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4284:	2201      	movs	r2, #1
    4286:	609a      	str	r2, [r3, #8]
}
    4288:	b002      	add	sp, #8
    428a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    428c:	2200      	movs	r2, #0
    428e:	e7ee      	b.n	426e <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4290:	4b0a      	ldr	r3, [pc, #40]	; (42bc <nrfx_clock_start+0xa4>)
    4292:	2200      	movs	r2, #0
    4294:	601a      	str	r2, [r3, #0]
    4296:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    429c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42a0:	601c      	str	r4, [r3, #0]
}
    42a2:	e7f1      	b.n	4288 <nrfx_clock_start+0x70>
    42a4:	20000b08 	.word	0x20000b08
    42a8:	00009662 	.word	0x00009662
    42ac:	00008fa5 	.word	0x00008fa5
    42b0:	00009617 	.word	0x00009617
    42b4:	0000978b 	.word	0x0000978b
    42b8:	40000104 	.word	0x40000104
    42bc:	40000100 	.word	0x40000100

000042c0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    42c2:	4d2f      	ldr	r5, [pc, #188]	; (4380 <nrfx_clock_stop+0xc0>)
    42c4:	792a      	ldrb	r2, [r5, #4]
{
    42c6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    42c8:	b95a      	cbnz	r2, 42e2 <nrfx_clock_stop+0x22>
    42ca:	492e      	ldr	r1, [pc, #184]	; (4384 <nrfx_clock_stop+0xc4>)
    42cc:	482e      	ldr	r0, [pc, #184]	; (4388 <nrfx_clock_stop+0xc8>)
    42ce:	4a2f      	ldr	r2, [pc, #188]	; (438c <nrfx_clock_stop+0xcc>)
    42d0:	f240 134b 	movw	r3, #331	; 0x14b
    42d4:	f003 ff4f 	bl	8176 <printk>
    42d8:	482c      	ldr	r0, [pc, #176]	; (438c <nrfx_clock_stop+0xcc>)
    42da:	f240 114b 	movw	r1, #331	; 0x14b
    42de:	f003 fe76 	bl	7fce <assert_post_action>
    switch (domain)
    42e2:	b17c      	cbz	r4, 4304 <nrfx_clock_stop+0x44>
    42e4:	2c01      	cmp	r4, #1
    42e6:	d028      	beq.n	433a <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    42e8:	4929      	ldr	r1, [pc, #164]	; (4390 <nrfx_clock_stop+0xd0>)
    42ea:	4827      	ldr	r0, [pc, #156]	; (4388 <nrfx_clock_stop+0xc8>)
    42ec:	4a27      	ldr	r2, [pc, #156]	; (438c <nrfx_clock_stop+0xcc>)
    42ee:	f240 1367 	movw	r3, #359	; 0x167
    42f2:	f003 ff40 	bl	8176 <printk>
    42f6:	4825      	ldr	r0, [pc, #148]	; (438c <nrfx_clock_stop+0xcc>)
    42f8:	f240 1167 	movw	r1, #359	; 0x167
    42fc:	f003 fe67 	bl	7fce <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4300:	b003      	add	sp, #12
    4302:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4308:	2202      	movs	r2, #2
    430a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    430e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    4312:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4316:	2201      	movs	r2, #1
    4318:	681b      	ldr	r3, [r3, #0]
    431a:	4b1e      	ldr	r3, [pc, #120]	; (4394 <nrfx_clock_stop+0xd4>)
    431c:	f242 7410 	movw	r4, #10000	; 0x2710
    4320:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    4322:	2100      	movs	r1, #0
    4324:	4608      	mov	r0, r1
    4326:	f7ff feff 	bl	4128 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    432a:	2800      	cmp	r0, #0
    432c:	d0e8      	beq.n	4300 <nrfx_clock_stop+0x40>
    432e:	2001      	movs	r0, #1
    4330:	f004 f9ad 	bl	868e <nrfx_busy_wait>
    4334:	3c01      	subs	r4, #1
    4336:	d1f4      	bne.n	4322 <nrfx_clock_stop+0x62>
    4338:	e7e2      	b.n	4300 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    433a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    433e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4340:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4344:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4348:	f503 7380 	add.w	r3, r3, #256	; 0x100
    434c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    434e:	4b12      	ldr	r3, [pc, #72]	; (4398 <nrfx_clock_stop+0xd8>)
    4350:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4352:	f88d 4007 	strb.w	r4, [sp, #7]
    4356:	f242 7410 	movw	r4, #10000	; 0x2710
    435a:	f10d 0107 	add.w	r1, sp, #7
    435e:	2001      	movs	r0, #1
    4360:	f7ff fee2 	bl	4128 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4364:	b910      	cbnz	r0, 436c <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    4366:	2300      	movs	r3, #0
    4368:	716b      	strb	r3, [r5, #5]
    436a:	e7c9      	b.n	4300 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    436c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4370:	2801      	cmp	r0, #1
    4372:	d1f8      	bne.n	4366 <nrfx_clock_stop+0xa6>
    4374:	f004 f98b 	bl	868e <nrfx_busy_wait>
    4378:	3c01      	subs	r4, #1
    437a:	d1ee      	bne.n	435a <nrfx_clock_stop+0x9a>
    437c:	e7f3      	b.n	4366 <nrfx_clock_stop+0xa6>
    437e:	bf00      	nop
    4380:	20000b08 	.word	0x20000b08
    4384:	00009662 	.word	0x00009662
    4388:	00008fa5 	.word	0x00008fa5
    438c:	00009617 	.word	0x00009617
    4390:	0000978b 	.word	0x0000978b
    4394:	4000000c 	.word	0x4000000c
    4398:	40000004 	.word	0x40000004

0000439c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    439c:	4b16      	ldr	r3, [pc, #88]	; (43f8 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    439e:	b507      	push	{r0, r1, r2, lr}
    43a0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    43a2:	b16a      	cbz	r2, 43c0 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43a4:	2200      	movs	r2, #0
    43a6:	601a      	str	r2, [r3, #0]
    43a8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    43aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43ae:	2201      	movs	r2, #1
    43b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    43b4:	4b11      	ldr	r3, [pc, #68]	; (43fc <nrfx_power_clock_irq_handler+0x60>)
    43b6:	7958      	ldrb	r0, [r3, #5]
    43b8:	b910      	cbnz	r0, 43c0 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    43ba:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    43bc:	681b      	ldr	r3, [r3, #0]
    43be:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    43c0:	4b0f      	ldr	r3, [pc, #60]	; (4400 <nrfx_power_clock_irq_handler+0x64>)
    43c2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    43c4:	b16a      	cbz	r2, 43e2 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43c6:	2000      	movs	r0, #0
    43c8:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    43ca:	a901      	add	r1, sp, #4
    43cc:	681b      	ldr	r3, [r3, #0]
    43ce:	f7ff feab 	bl	4128 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    43d2:	9a01      	ldr	r2, [sp, #4]
    43d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43d8:	b932      	cbnz	r2, 43e8 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    43da:	2201      	movs	r2, #1
    43dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43e0:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    43e2:	b003      	add	sp, #12
    43e4:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    43e8:	2202      	movs	r2, #2
    43ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    43ee:	4b03      	ldr	r3, [pc, #12]	; (43fc <nrfx_power_clock_irq_handler+0x60>)
    43f0:	2001      	movs	r0, #1
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	4798      	blx	r3
}
    43f6:	e7f4      	b.n	43e2 <nrfx_power_clock_irq_handler+0x46>
    43f8:	40000100 	.word	0x40000100
    43fc:	20000b08 	.word	0x20000b08
    4400:	40000104 	.word	0x40000104

00004404 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4404:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4406:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4408:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    440a:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    440e:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    4410:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    4414:	d014      	beq.n	4440 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4416:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    441a:	fa05 f204 	lsl.w	r2, r5, r4
    441e:	ea23 0202 	bic.w	r2, r3, r2
    4422:	e850 6f00 	ldrex	r6, [r0]
    4426:	429e      	cmp	r6, r3
    4428:	d104      	bne.n	4434 <nrfx_flag32_alloc+0x30>
    442a:	e840 2c00 	strex	ip, r2, [r0]
    442e:	f1bc 0f00 	cmp.w	ip, #0
    4432:	d1f6      	bne.n	4422 <nrfx_flag32_alloc+0x1e>
    4434:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4438:	d1e6      	bne.n	4408 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    443a:	4802      	ldr	r0, [pc, #8]	; (4444 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    443c:	700c      	strb	r4, [r1, #0]
}
    443e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4440:	4801      	ldr	r0, [pc, #4]	; (4448 <nrfx_flag32_alloc+0x44>)
    4442:	e7fc      	b.n	443e <nrfx_flag32_alloc+0x3a>
    4444:	0bad0000 	.word	0x0bad0000
    4448:	0bad0002 	.word	0x0bad0002

0000444c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    444c:	6803      	ldr	r3, [r0, #0]
    444e:	40cb      	lsrs	r3, r1
    4450:	07db      	lsls	r3, r3, #31
{
    4452:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4454:	d415      	bmi.n	4482 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4456:	2301      	movs	r3, #1
    4458:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    445c:	6803      	ldr	r3, [r0, #0]
    445e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4462:	ea41 0203 	orr.w	r2, r1, r3
    4466:	e850 4f00 	ldrex	r4, [r0]
    446a:	429c      	cmp	r4, r3
    446c:	d104      	bne.n	4478 <nrfx_flag32_free+0x2c>
    446e:	e840 2c00 	strex	ip, r2, [r0]
    4472:	f1bc 0f00 	cmp.w	ip, #0
    4476:	d1f6      	bne.n	4466 <nrfx_flag32_free+0x1a>
    4478:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    447c:	d1ee      	bne.n	445c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    447e:	4802      	ldr	r0, [pc, #8]	; (4488 <nrfx_flag32_free+0x3c>)
}
    4480:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4482:	4802      	ldr	r0, [pc, #8]	; (448c <nrfx_flag32_free+0x40>)
    4484:	e7fc      	b.n	4480 <nrfx_flag32_free+0x34>
    4486:	bf00      	nop
    4488:	0bad0000 	.word	0x0bad0000
    448c:	0bad0004 	.word	0x0bad0004

00004490 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4490:	4b05      	ldr	r3, [pc, #20]	; (44a8 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4492:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4494:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4498:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    449c:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    44a0:	4258      	negs	r0, r3
    44a2:	4158      	adcs	r0, r3
    44a4:	4770      	bx	lr
    44a6:	bf00      	nop
    44a8:	200000e8 	.word	0x200000e8

000044ac <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    44ac:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44ae:	f100 0308 	add.w	r3, r0, #8
    44b2:	4c0c      	ldr	r4, [pc, #48]	; (44e4 <call_handler+0x38>)
    44b4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    44b8:	05da      	lsls	r2, r3, #23
{
    44ba:	4605      	mov	r5, r0
    44bc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44be:	d507      	bpl.n	44d0 <call_handler+0x24>
    44c0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    44c4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    44c8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    44cc:	6852      	ldr	r2, [r2, #4]
    44ce:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    44d0:	68a3      	ldr	r3, [r4, #8]
    44d2:	b12b      	cbz	r3, 44e0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44d4:	68e2      	ldr	r2, [r4, #12]
    44d6:	4631      	mov	r1, r6
    44d8:	4628      	mov	r0, r5
    }
}
    44da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44de:	4718      	bx	r3
}
    44e0:	bd70      	pop	{r4, r5, r6, pc}
    44e2:	bf00      	nop
    44e4:	200000e8 	.word	0x200000e8

000044e8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44e8:	4b19      	ldr	r3, [pc, #100]	; (4550 <release_handler+0x68>)
    44ea:	3008      	adds	r0, #8
{
    44ec:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44ee:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    44f2:	05d1      	lsls	r1, r2, #23
    44f4:	d51d      	bpl.n	4532 <release_handler+0x4a>
    44f6:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    44fa:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    44fe:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4502:	f103 0410 	add.w	r4, r3, #16
    4506:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4508:	f834 2b02 	ldrh.w	r2, [r4], #2
    450c:	f412 7f80 	tst.w	r2, #256	; 0x100
    4510:	d003      	beq.n	451a <release_handler+0x32>
    4512:	f3c2 2243 	ubfx	r2, r2, #9, #4
    4516:	4291      	cmp	r1, r2
    4518:	d00b      	beq.n	4532 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    451a:	3001      	adds	r0, #1
    451c:	2830      	cmp	r0, #48	; 0x30
    451e:	d1f3      	bne.n	4508 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4520:	2200      	movs	r2, #0
    4522:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4526:	480b      	ldr	r0, [pc, #44]	; (4554 <release_handler+0x6c>)
    4528:	f7ff ff90 	bl	444c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    452c:	4b0a      	ldr	r3, [pc, #40]	; (4558 <release_handler+0x70>)
    452e:	4298      	cmp	r0, r3
    4530:	d100      	bne.n	4534 <release_handler+0x4c>
}
    4532:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4534:	4909      	ldr	r1, [pc, #36]	; (455c <release_handler+0x74>)
    4536:	480a      	ldr	r0, [pc, #40]	; (4560 <release_handler+0x78>)
    4538:	4a0a      	ldr	r2, [pc, #40]	; (4564 <release_handler+0x7c>)
    453a:	f44f 7399 	mov.w	r3, #306	; 0x132
    453e:	f003 fe1a 	bl	8176 <printk>
}
    4542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4546:	4807      	ldr	r0, [pc, #28]	; (4564 <release_handler+0x7c>)
    4548:	f44f 7199 	mov.w	r1, #306	; 0x132
    454c:	f003 bd3f 	b.w	7fce <assert_post_action>
    4550:	200000e8 	.word	0x200000e8
    4554:	2000015c 	.word	0x2000015c
    4558:	0bad0000 	.word	0x0bad0000
    455c:	000096e4 	.word	0x000096e4
    4560:	00008fa5 	.word	0x00008fa5
    4564:	00009680 	.word	0x00009680

00004568 <pin_handler_trigger_uninit>:
{
    4568:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    456a:	4c0a      	ldr	r4, [pc, #40]	; (4594 <pin_handler_trigger_uninit+0x2c>)
    456c:	f100 0508 	add.w	r5, r0, #8
    4570:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    4574:	069a      	lsls	r2, r3, #26
    4576:	d506      	bpl.n	4586 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4578:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    457a:	4a07      	ldr	r2, [pc, #28]	; (4598 <pin_handler_trigger_uninit+0x30>)
    457c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4580:	2100      	movs	r1, #0
    4582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    4586:	f7ff ffaf 	bl	44e8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    458a:	2300      	movs	r3, #0
    458c:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4590:	bd38      	pop	{r3, r4, r5, pc}
    4592:	bf00      	nop
    4594:	200000e8 	.word	0x200000e8
    4598:	40006000 	.word	0x40006000

0000459c <nrf_gpio_pin_port_decode>:
{
    459c:	b510      	push	{r4, lr}
    459e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    45a0:	6800      	ldr	r0, [r0, #0]
    45a2:	f004 f876 	bl	8692 <nrf_gpio_pin_present_check>
    45a6:	b958      	cbnz	r0, 45c0 <nrf_gpio_pin_port_decode+0x24>
    45a8:	4912      	ldr	r1, [pc, #72]	; (45f4 <nrf_gpio_pin_port_decode+0x58>)
    45aa:	4813      	ldr	r0, [pc, #76]	; (45f8 <nrf_gpio_pin_port_decode+0x5c>)
    45ac:	4a13      	ldr	r2, [pc, #76]	; (45fc <nrf_gpio_pin_port_decode+0x60>)
    45ae:	f240 2329 	movw	r3, #553	; 0x229
    45b2:	f003 fde0 	bl	8176 <printk>
    45b6:	4811      	ldr	r0, [pc, #68]	; (45fc <nrf_gpio_pin_port_decode+0x60>)
    45b8:	f240 2129 	movw	r1, #553	; 0x229
    45bc:	f003 fd07 	bl	7fce <assert_post_action>
    uint32_t pin_number = *p_pin;
    45c0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    45c2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    45c6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    45c8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    45ca:	d00d      	beq.n	45e8 <nrf_gpio_pin_port_decode+0x4c>
    45cc:	2b01      	cmp	r3, #1
    45ce:	d00e      	beq.n	45ee <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    45d0:	490b      	ldr	r1, [pc, #44]	; (4600 <nrf_gpio_pin_port_decode+0x64>)
    45d2:	4809      	ldr	r0, [pc, #36]	; (45f8 <nrf_gpio_pin_port_decode+0x5c>)
    45d4:	4a09      	ldr	r2, [pc, #36]	; (45fc <nrf_gpio_pin_port_decode+0x60>)
    45d6:	f240 232e 	movw	r3, #558	; 0x22e
    45da:	f003 fdcc 	bl	8176 <printk>
    45de:	4807      	ldr	r0, [pc, #28]	; (45fc <nrf_gpio_pin_port_decode+0x60>)
    45e0:	f240 212e 	movw	r1, #558	; 0x22e
    45e4:	f003 fcf3 	bl	7fce <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    45e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    45ec:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    45ee:	4805      	ldr	r0, [pc, #20]	; (4604 <nrf_gpio_pin_port_decode+0x68>)
    45f0:	e7fc      	b.n	45ec <nrf_gpio_pin_port_decode+0x50>
    45f2:	bf00      	nop
    45f4:	000095a4 	.word	0x000095a4
    45f8:	00008fa5 	.word	0x00008fa5
    45fc:	00009571 	.word	0x00009571
    4600:	0000978b 	.word	0x0000978b
    4604:	50000300 	.word	0x50000300

00004608 <nrfx_gpiote_input_configure>:
{
    4608:	b5f0      	push	{r4, r5, r6, r7, lr}
    460a:	4604      	mov	r4, r0
    460c:	b085      	sub	sp, #20
    460e:	4617      	mov	r7, r2
    4610:	461d      	mov	r5, r3
    if (p_input_config)
    4612:	b1f1      	cbz	r1, 4652 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4614:	f7ff ff3c 	bl	4490 <pin_is_task_output>
    4618:	b110      	cbz	r0, 4620 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    461a:	484a      	ldr	r0, [pc, #296]	; (4744 <nrfx_gpiote_input_configure+0x13c>)
}
    461c:	b005      	add	sp, #20
    461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4620:	460b      	mov	r3, r1
    4622:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4626:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    462a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    462e:	f10d 020f 	add.w	r2, sp, #15
    4632:	f10d 010e 	add.w	r1, sp, #14
    4636:	4620      	mov	r0, r4
    4638:	f004 f840 	bl	86bc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    463c:	4a42      	ldr	r2, [pc, #264]	; (4748 <nrfx_gpiote_input_configure+0x140>)
    463e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4642:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4646:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    464a:	f043 0301 	orr.w	r3, r3, #1
    464e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4652:	b197      	cbz	r7, 467a <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4654:	4b3c      	ldr	r3, [pc, #240]	; (4748 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4656:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4658:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    465a:	f104 0008 	add.w	r0, r4, #8
    465e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4662:	078f      	lsls	r7, r1, #30
    4664:	d50c      	bpl.n	4680 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    4666:	2a00      	cmp	r2, #0
    4668:	d1d7      	bne.n	461a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    466a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    466e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4672:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4676:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    467a:	bbcd      	cbnz	r5, 46f0 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    467c:	4833      	ldr	r0, [pc, #204]	; (474c <nrfx_gpiote_input_configure+0x144>)
    467e:	e7cd      	b.n	461c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4680:	f021 0120 	bic.w	r1, r1, #32
    4684:	04c9      	lsls	r1, r1, #19
    4686:	0cc9      	lsrs	r1, r1, #19
    4688:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    468c:	2a00      	cmp	r2, #0
    468e:	d0ec      	beq.n	466a <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    4690:	2e03      	cmp	r6, #3
    4692:	d8c2      	bhi.n	461a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4694:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4696:	b92e      	cbnz	r6, 46a4 <nrfx_gpiote_input_configure+0x9c>
    4698:	4a2d      	ldr	r2, [pc, #180]	; (4750 <nrfx_gpiote_input_configure+0x148>)
    469a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    469e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    46a2:	e7e2      	b.n	466a <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    46a4:	00ba      	lsls	r2, r7, #2
    46a6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    46aa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    46ae:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    46b2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    46b6:	f02c 0c03 	bic.w	ip, ip, #3
    46ba:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    46be:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    46c2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    46c6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    46ca:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    46ce:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    46d2:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    46d6:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    46da:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    46de:	ea4c 0c0e 	orr.w	ip, ip, lr
    46e2:	f041 0120 	orr.w	r1, r1, #32
    46e6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    46ea:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    46ee:	e7bc      	b.n	466a <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    46f0:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    46f4:	4620      	mov	r0, r4
    46f6:	f7ff fef7 	bl	44e8 <release_handler>
    if (!handler)
    46fa:	2e00      	cmp	r6, #0
    46fc:	d0be      	beq.n	467c <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    46fe:	4d12      	ldr	r5, [pc, #72]	; (4748 <nrfx_gpiote_input_configure+0x140>)
    4700:	682b      	ldr	r3, [r5, #0]
    4702:	429e      	cmp	r6, r3
    4704:	d104      	bne.n	4710 <nrfx_gpiote_input_configure+0x108>
    4706:	686b      	ldr	r3, [r5, #4]
    4708:	429f      	cmp	r7, r3
    470a:	d101      	bne.n	4710 <nrfx_gpiote_input_configure+0x108>
    470c:	2200      	movs	r2, #0
    470e:	e00a      	b.n	4726 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4710:	4810      	ldr	r0, [pc, #64]	; (4754 <nrfx_gpiote_input_configure+0x14c>)
    4712:	f10d 010f 	add.w	r1, sp, #15
    4716:	f7ff fe75 	bl	4404 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    471a:	4b0c      	ldr	r3, [pc, #48]	; (474c <nrfx_gpiote_input_configure+0x144>)
    471c:	4298      	cmp	r0, r3
    471e:	f47f af7d 	bne.w	461c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4722:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4726:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    472a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    472e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4730:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4732:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4736:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    473a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    473e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4742:	e79b      	b.n	467c <nrfx_gpiote_input_configure+0x74>
    4744:	0bad0004 	.word	0x0bad0004
    4748:	200000e8 	.word	0x200000e8
    474c:	0bad0000 	.word	0x0bad0000
    4750:	40006000 	.word	0x40006000
    4754:	2000015c 	.word	0x2000015c

00004758 <nrfx_gpiote_output_configure>:
{
    4758:	b5f0      	push	{r4, r5, r6, r7, lr}
    475a:	4604      	mov	r4, r0
    475c:	b085      	sub	sp, #20
    475e:	4615      	mov	r5, r2
    if (p_config)
    4760:	b309      	cbz	r1, 47a6 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4762:	f100 0708 	add.w	r7, r0, #8
    4766:	4e31      	ldr	r6, [pc, #196]	; (482c <nrfx_gpiote_output_configure+0xd4>)
    4768:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    476c:	0798      	lsls	r0, r3, #30
    476e:	d401      	bmi.n	4774 <nrfx_gpiote_output_configure+0x1c>
    4770:	069a      	lsls	r2, r3, #26
    4772:	d458      	bmi.n	4826 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4774:	f013 0f1c 	tst.w	r3, #28
    4778:	d002      	beq.n	4780 <nrfx_gpiote_output_configure+0x28>
    477a:	784b      	ldrb	r3, [r1, #1]
    477c:	2b01      	cmp	r3, #1
    477e:	d052      	beq.n	4826 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4780:	2301      	movs	r3, #1
    4782:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4786:	2300      	movs	r3, #0
    4788:	e9cd 1300 	strd	r1, r3, [sp]
    478c:	1c4a      	adds	r2, r1, #1
    478e:	1c8b      	adds	r3, r1, #2
    4790:	4620      	mov	r0, r4
    4792:	f10d 010f 	add.w	r1, sp, #15
    4796:	f003 ff91 	bl	86bc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    479a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    479e:	f043 0303 	orr.w	r3, r3, #3
    47a2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    47a6:	b915      	cbnz	r5, 47ae <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    47a8:	4821      	ldr	r0, [pc, #132]	; (4830 <nrfx_gpiote_output_configure+0xd8>)
}
    47aa:	b005      	add	sp, #20
    47ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47ae:	4e1f      	ldr	r6, [pc, #124]	; (482c <nrfx_gpiote_output_configure+0xd4>)
    47b0:	f104 0708 	add.w	r7, r4, #8
    47b4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    47b8:	0783      	lsls	r3, r0, #30
    47ba:	d534      	bpl.n	4826 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    47bc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    47c0:	4661      	mov	r1, ip
    47c2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    47c4:	f020 0020 	bic.w	r0, r0, #32
    47c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    47cc:	04c0      	lsls	r0, r0, #19
    47ce:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    47d2:	0cc0      	lsrs	r0, r0, #19
    47d4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    47d8:	2300      	movs	r3, #0
    47da:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    47de:	786a      	ldrb	r2, [r5, #1]
    47e0:	2a00      	cmp	r2, #0
    47e2:	d0e1      	beq.n	47a8 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    47e4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    47e8:	78ad      	ldrb	r5, [r5, #2]
    47ea:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    47ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    47f2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    47f6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    47fa:	0223      	lsls	r3, r4, #8
    47fc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4800:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4802:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4806:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    480a:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    480c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    480e:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4812:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4816:	432b      	orrs	r3, r5
    4818:	f040 0020 	orr.w	r0, r0, #32
    481c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4820:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4824:	e7c0      	b.n	47a8 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    4826:	4803      	ldr	r0, [pc, #12]	; (4834 <nrfx_gpiote_output_configure+0xdc>)
    4828:	e7bf      	b.n	47aa <nrfx_gpiote_output_configure+0x52>
    482a:	bf00      	nop
    482c:	200000e8 	.word	0x200000e8
    4830:	0bad0000 	.word	0x0bad0000
    4834:	0bad0004 	.word	0x0bad0004

00004838 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4838:	4b01      	ldr	r3, [pc, #4]	; (4840 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    483a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    483e:	4770      	bx	lr
    4840:	200000e8 	.word	0x200000e8

00004844 <nrfx_gpiote_channel_get>:
{
    4844:	b538      	push	{r3, r4, r5, lr}
    4846:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4848:	460d      	mov	r5, r1
    484a:	b959      	cbnz	r1, 4864 <nrfx_gpiote_channel_get+0x20>
    484c:	490b      	ldr	r1, [pc, #44]	; (487c <nrfx_gpiote_channel_get+0x38>)
    484e:	480c      	ldr	r0, [pc, #48]	; (4880 <nrfx_gpiote_channel_get+0x3c>)
    4850:	4a0c      	ldr	r2, [pc, #48]	; (4884 <nrfx_gpiote_channel_get+0x40>)
    4852:	f240 2335 	movw	r3, #565	; 0x235
    4856:	f003 fc8e 	bl	8176 <printk>
    485a:	480a      	ldr	r0, [pc, #40]	; (4884 <nrfx_gpiote_channel_get+0x40>)
    485c:	f240 2135 	movw	r1, #565	; 0x235
    4860:	f003 fbb5 	bl	7fce <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4864:	3408      	adds	r4, #8
    4866:	4b08      	ldr	r3, [pc, #32]	; (4888 <nrfx_gpiote_channel_get+0x44>)
    4868:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    486c:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    486e:	bf43      	ittte	mi
    4870:	0b5b      	lsrmi	r3, r3, #13
    4872:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    4874:	4805      	ldrmi	r0, [pc, #20]	; (488c <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    4876:	4806      	ldrpl	r0, [pc, #24]	; (4890 <nrfx_gpiote_channel_get+0x4c>)
}
    4878:	bd38      	pop	{r3, r4, r5, pc}
    487a:	bf00      	nop
    487c:	000096f8 	.word	0x000096f8
    4880:	00008fa5 	.word	0x00008fa5
    4884:	00009680 	.word	0x00009680
    4888:	200000e8 	.word	0x200000e8
    488c:	0bad0000 	.word	0x0bad0000
    4890:	0bad0004 	.word	0x0bad0004

00004894 <nrfx_gpiote_init>:
{
    4894:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4896:	4c0e      	ldr	r4, [pc, #56]	; (48d0 <nrfx_gpiote_init+0x3c>)
    4898:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    489c:	b9b5      	cbnz	r5, 48cc <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    489e:	2260      	movs	r2, #96	; 0x60
    48a0:	4629      	mov	r1, r5
    48a2:	f104 0010 	add.w	r0, r4, #16
    48a6:	f003 fcc7 	bl	8238 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    48aa:	2006      	movs	r0, #6
    48ac:	f7fd fcfc 	bl	22a8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    48b0:	4b08      	ldr	r3, [pc, #32]	; (48d4 <nrfx_gpiote_init+0x40>)
    return err_code;
    48b2:	4809      	ldr	r0, [pc, #36]	; (48d8 <nrfx_gpiote_init+0x44>)
    48b4:	601d      	str	r5, [r3, #0]
    48b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    48b8:	4b08      	ldr	r3, [pc, #32]	; (48dc <nrfx_gpiote_init+0x48>)
    48ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    48be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    48c2:	2301      	movs	r3, #1
    48c4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    48c8:	6763      	str	r3, [r4, #116]	; 0x74
}
    48ca:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    48cc:	4804      	ldr	r0, [pc, #16]	; (48e0 <nrfx_gpiote_init+0x4c>)
    48ce:	e7fc      	b.n	48ca <nrfx_gpiote_init+0x36>
    48d0:	200000e8 	.word	0x200000e8
    48d4:	4000617c 	.word	0x4000617c
    48d8:	0bad0000 	.word	0x0bad0000
    48dc:	40006000 	.word	0x40006000
    48e0:	0bad0005 	.word	0x0bad0005

000048e4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    48e4:	4b03      	ldr	r3, [pc, #12]	; (48f4 <nrfx_gpiote_is_init+0x10>)
    48e6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    48ea:	3800      	subs	r0, #0
    48ec:	bf18      	it	ne
    48ee:	2001      	movne	r0, #1
    48f0:	4770      	bx	lr
    48f2:	bf00      	nop
    48f4:	200000e8 	.word	0x200000e8

000048f8 <nrfx_gpiote_channel_free>:
{
    48f8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    48fa:	4801      	ldr	r0, [pc, #4]	; (4900 <nrfx_gpiote_channel_free+0x8>)
    48fc:	f7ff bda6 	b.w	444c <nrfx_flag32_free>
    4900:	20000158 	.word	0x20000158

00004904 <nrfx_gpiote_channel_alloc>:
{
    4904:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4906:	4801      	ldr	r0, [pc, #4]	; (490c <nrfx_gpiote_channel_alloc+0x8>)
    4908:	f7ff bd7c 	b.w	4404 <nrfx_flag32_alloc>
    490c:	20000158 	.word	0x20000158

00004910 <nrfx_gpiote_trigger_enable>:
{
    4910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4912:	4d31      	ldr	r5, [pc, #196]	; (49d8 <nrfx_gpiote_trigger_enable+0xc8>)
    4914:	f100 0708 	add.w	r7, r0, #8
{
    4918:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    491a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    491e:	f013 0f1c 	tst.w	r3, #28
{
    4922:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4924:	d10b      	bne.n	493e <nrfx_gpiote_trigger_enable+0x2e>
    4926:	492d      	ldr	r1, [pc, #180]	; (49dc <nrfx_gpiote_trigger_enable+0xcc>)
    4928:	482d      	ldr	r0, [pc, #180]	; (49e0 <nrfx_gpiote_trigger_enable+0xd0>)
    492a:	4a2e      	ldr	r2, [pc, #184]	; (49e4 <nrfx_gpiote_trigger_enable+0xd4>)
    492c:	f240 33df 	movw	r3, #991	; 0x3df
    4930:	f003 fc21 	bl	8176 <printk>
    4934:	482b      	ldr	r0, [pc, #172]	; (49e4 <nrfx_gpiote_trigger_enable+0xd4>)
    4936:	f240 31df 	movw	r1, #991	; 0x3df
    493a:	f003 fb48 	bl	7fce <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    493e:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4942:	0683      	lsls	r3, r0, #26
    4944:	d51f      	bpl.n	4986 <nrfx_gpiote_trigger_enable+0x76>
    4946:	f010 0302 	ands.w	r3, r0, #2
    494a:	d11c      	bne.n	4986 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    494c:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    494e:	4608      	mov	r0, r1
    4950:	f003 feb0 	bl	86b4 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    4954:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4958:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    495c:	6003      	str	r3, [r0, #0]
    495e:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4960:	008b      	lsls	r3, r1, #2
    4962:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4966:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    496a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    496e:	f042 0201 	orr.w	r2, r2, #1
    4972:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    4976:	b126      	cbz	r6, 4982 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    4978:	4a1b      	ldr	r2, [pc, #108]	; (49e8 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    497a:	2301      	movs	r3, #1
    497c:	408b      	lsls	r3, r1
    497e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4982:	b003      	add	sp, #12
    4984:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    4986:	b95e      	cbnz	r6, 49a0 <nrfx_gpiote_trigger_enable+0x90>
    4988:	4918      	ldr	r1, [pc, #96]	; (49ec <nrfx_gpiote_trigger_enable+0xdc>)
    498a:	4815      	ldr	r0, [pc, #84]	; (49e0 <nrfx_gpiote_trigger_enable+0xd0>)
    498c:	4a15      	ldr	r2, [pc, #84]	; (49e4 <nrfx_gpiote_trigger_enable+0xd4>)
    498e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4992:	f003 fbf0 	bl	8176 <printk>
    4996:	4813      	ldr	r0, [pc, #76]	; (49e4 <nrfx_gpiote_trigger_enable+0xd4>)
    4998:	f240 31ee 	movw	r1, #1006	; 0x3ee
    499c:	f003 fb17 	bl	7fce <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    49a0:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    49a4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    49a8:	2b04      	cmp	r3, #4
    49aa:	d010      	beq.n	49ce <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    49ac:	2b05      	cmp	r3, #5
    49ae:	d010      	beq.n	49d2 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49b0:	a801      	add	r0, sp, #4
    49b2:	9401      	str	r4, [sp, #4]
    49b4:	f7ff fdf2 	bl	459c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    49b8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    49ba:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    49be:	40d9      	lsrs	r1, r3
    49c0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    49c4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    49c6:	4620      	mov	r0, r4
    49c8:	f003 fec3 	bl	8752 <nrf_gpio_cfg_sense_set>
}
    49cc:	e7d9      	b.n	4982 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    49ce:	2103      	movs	r1, #3
    49d0:	e7f9      	b.n	49c6 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    49d2:	2102      	movs	r1, #2
    49d4:	e7f7      	b.n	49c6 <nrfx_gpiote_trigger_enable+0xb6>
    49d6:	bf00      	nop
    49d8:	200000e8 	.word	0x200000e8
    49dc:	00009702 	.word	0x00009702
    49e0:	00008fa5 	.word	0x00008fa5
    49e4:	00009680 	.word	0x00009680
    49e8:	40006000 	.word	0x40006000
    49ec:	00009717 	.word	0x00009717

000049f0 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    49f0:	4b0e      	ldr	r3, [pc, #56]	; (4a2c <nrfx_gpiote_trigger_disable+0x3c>)
    49f2:	f100 0208 	add.w	r2, r0, #8
    49f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    49fa:	0699      	lsls	r1, r3, #26
    49fc:	d513      	bpl.n	4a26 <nrfx_gpiote_trigger_disable+0x36>
    49fe:	079a      	lsls	r2, r3, #30
    4a00:	d411      	bmi.n	4a26 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4a02:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4a04:	2201      	movs	r2, #1
    4a06:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4a08:	009b      	lsls	r3, r3, #2
    4a0a:	4909      	ldr	r1, [pc, #36]	; (4a30 <nrfx_gpiote_trigger_disable+0x40>)
    4a0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a10:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4a14:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4a18:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4a1c:	f022 0203 	bic.w	r2, r2, #3
    4a20:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4a24:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4a26:	2100      	movs	r1, #0
    4a28:	f003 be93 	b.w	8752 <nrf_gpio_cfg_sense_set>
    4a2c:	200000e8 	.word	0x200000e8
    4a30:	40006000 	.word	0x40006000

00004a34 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4a34:	4b0e      	ldr	r3, [pc, #56]	; (4a70 <nrfx_gpiote_pin_uninit+0x3c>)
    4a36:	f100 0208 	add.w	r2, r0, #8
{
    4a3a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4a3c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4a40:	07db      	lsls	r3, r3, #31
{
    4a42:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4a44:	d511      	bpl.n	4a6a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4a46:	f7ff ffd3 	bl	49f0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4a4a:	4620      	mov	r0, r4
    4a4c:	f7ff fd8c 	bl	4568 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a50:	a801      	add	r0, sp, #4
    4a52:	9401      	str	r4, [sp, #4]
    4a54:	f7ff fda2 	bl	459c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4a58:	9b01      	ldr	r3, [sp, #4]
    4a5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a5e:	2202      	movs	r2, #2
    4a60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4a64:	4803      	ldr	r0, [pc, #12]	; (4a74 <nrfx_gpiote_pin_uninit+0x40>)
}
    4a66:	b002      	add	sp, #8
    4a68:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4a6a:	4803      	ldr	r0, [pc, #12]	; (4a78 <nrfx_gpiote_pin_uninit+0x44>)
    4a6c:	e7fb      	b.n	4a66 <nrfx_gpiote_pin_uninit+0x32>
    4a6e:	bf00      	nop
    4a70:	200000e8 	.word	0x200000e8
    4a74:	0bad0000 	.word	0x0bad0000
    4a78:	0bad0004 	.word	0x0bad0004

00004a7c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a80:	4b65      	ldr	r3, [pc, #404]	; (4c18 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    4a82:	4866      	ldr	r0, [pc, #408]	; (4c1c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4a84:	4966      	ldr	r1, [pc, #408]	; (4c20 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    4a86:	2500      	movs	r5, #0
{
    4a88:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4a8a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a8c:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a8e:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4a90:	b136      	cbz	r6, 4aa0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4a92:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4a96:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a98:	bf1e      	ittt	ne
    4a9a:	601c      	strne	r4, [r3, #0]
    4a9c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4a9e:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4aa0:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4aa2:	428b      	cmp	r3, r1
        mask <<= 1;
    4aa4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4aa8:	d1f1      	bne.n	4a8e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4aaa:	4f5e      	ldr	r7, [pc, #376]	; (4c24 <nrfx_gpiote_irq_handler+0x1a8>)
    4aac:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4aae:	b37b      	cbz	r3, 4b10 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4ab4:	4e5c      	ldr	r6, [pc, #368]	; (4c28 <nrfx_gpiote_irq_handler+0x1ac>)
    4ab6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4aba:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4abc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4ac0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4ac4:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4ac6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4aca:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4acc:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4ad0:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4ad4:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    4ad8:	f8d9 3000 	ldr.w	r3, [r9]
    4adc:	b9f3      	cbnz	r3, 4b1c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4ade:	f108 0820 	add.w	r8, r8, #32
    4ae2:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    4ae6:	f109 0904 	add.w	r9, r9, #4
    4aea:	d1f5      	bne.n	4ad8 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4aec:	603b      	str	r3, [r7, #0]
    4aee:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    4af0:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    4af2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4af6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4afa:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4afc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4b00:	9b01      	ldr	r3, [sp, #4]
    4b02:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    4b06:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4b08:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4b0c:	4313      	orrs	r3, r2
    4b0e:	d1dd      	bne.n	4acc <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    4b10:	2401      	movs	r4, #1
    while (mask)
    4b12:	2d00      	cmp	r5, #0
    4b14:	d168      	bne.n	4be8 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4b16:	b009      	add	sp, #36	; 0x24
    4b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4b1c:	fa93 f3a3 	rbit	r3, r3
    4b20:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    4b24:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4b28:	f106 0208 	add.w	r2, r6, #8
    4b2c:	4b3f      	ldr	r3, [pc, #252]	; (4c2c <nrfx_gpiote_irq_handler+0x1b0>)
    4b2e:	9605      	str	r6, [sp, #20]
    4b30:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    4b34:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4b38:	08f4      	lsrs	r4, r6, #3
    4b3a:	9302      	str	r3, [sp, #8]
    4b3c:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    4b3e:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    4b40:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4b44:	fa0b fc00 	lsl.w	ip, fp, r0
    4b48:	5d18      	ldrb	r0, [r3, r4]
    4b4a:	ea20 000c 	bic.w	r0, r0, ip
    4b4e:	5518      	strb	r0, [r3, r4]
    4b50:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b52:	a805      	add	r0, sp, #20
    4b54:	9103      	str	r1, [sp, #12]
    4b56:	f7ff fd21 	bl	459c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4b5a:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    4b5c:	9903      	ldr	r1, [sp, #12]
    4b5e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4b62:	074b      	lsls	r3, r1, #29
    4b64:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4b68:	f3c4 4401 	ubfx	r4, r4, #16, #2
    4b6c:	d523      	bpl.n	4bb6 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    4b6e:	4651      	mov	r1, sl
    4b70:	4630      	mov	r0, r6
    4b72:	f7ff fc9b 	bl	44ac <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b76:	a805      	add	r0, sp, #20
    4b78:	9605      	str	r6, [sp, #20]
    4b7a:	f7ff fd0f 	bl	459c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4b7e:	9a05      	ldr	r2, [sp, #20]
    4b80:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4b84:	b2e4      	uxtb	r4, r4
    4b86:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4b8a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4b8e:	4294      	cmp	r4, r2
    4b90:	d107      	bne.n	4ba2 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4b92:	2100      	movs	r1, #0
    4b94:	4630      	mov	r0, r6
    4b96:	f003 fddc 	bl	8752 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4b9a:	4621      	mov	r1, r4
    4b9c:	4630      	mov	r0, r6
    4b9e:	f003 fdd8 	bl	8752 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ba2:	a805      	add	r0, sp, #20
    4ba4:	9605      	str	r6, [sp, #20]
    4ba6:	f7ff fcf9 	bl	459c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4baa:	9b05      	ldr	r3, [sp, #20]
    4bac:	fa0b f303 	lsl.w	r3, fp, r3
    4bb0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4bb4:	e790      	b.n	4ad8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4bb6:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4bb8:	bf0c      	ite	eq
    4bba:	2103      	moveq	r1, #3
    4bbc:	2102      	movne	r1, #2
    4bbe:	4630      	mov	r0, r6
    4bc0:	f003 fdc7 	bl	8752 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4bc4:	9b02      	ldr	r3, [sp, #8]
    4bc6:	2b03      	cmp	r3, #3
    4bc8:	d004      	beq.n	4bd4 <nrfx_gpiote_irq_handler+0x158>
    4bca:	2c02      	cmp	r4, #2
    4bcc:	d107      	bne.n	4bde <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4bce:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4bd2:	d1e6      	bne.n	4ba2 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    4bd4:	4651      	mov	r1, sl
    4bd6:	4630      	mov	r0, r6
    4bd8:	f7ff fc68 	bl	44ac <call_handler>
    4bdc:	e7e1      	b.n	4ba2 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4bde:	2c03      	cmp	r4, #3
    4be0:	d1df      	bne.n	4ba2 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4be2:	f1ba 0f02 	cmp.w	sl, #2
    4be6:	e7f4      	b.n	4bd2 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    4be8:	fa95 f3a5 	rbit	r3, r5
    4bec:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4bf0:	fa04 f203 	lsl.w	r2, r4, r3
    4bf4:	009b      	lsls	r3, r3, #2
    4bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4bfa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4bfe:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4c02:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4c06:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4c0a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4c0e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4c12:	f7ff fc4b 	bl	44ac <call_handler>
    4c16:	e77c      	b.n	4b12 <nrfx_gpiote_irq_handler+0x96>
    4c18:	40006100 	.word	0x40006100
    4c1c:	40006000 	.word	0x40006000
    4c20:	40006120 	.word	0x40006120
    4c24:	4000617c 	.word	0x4000617c
    4c28:	50000300 	.word	0x50000300
    4c2c:	200000e8 	.word	0x200000e8

00004c30 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4c30:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4c32:	4801      	ldr	r0, [pc, #4]	; (4c38 <nrfx_ppi_channel_alloc+0x8>)
    4c34:	f7ff bbe6 	b.w	4404 <nrfx_flag32_alloc>
    4c38:	20000164 	.word	0x20000164

00004c3c <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    4c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c40:	4604      	mov	r4, r0
    4c42:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    4c44:	4615      	mov	r5, r2
    4c46:	b95a      	cbnz	r2, 4c60 <nrf_pwm_sequence_set+0x24>
    4c48:	4932      	ldr	r1, [pc, #200]	; (4d14 <nrf_pwm_sequence_set+0xd8>)
    4c4a:	4833      	ldr	r0, [pc, #204]	; (4d18 <nrf_pwm_sequence_set+0xdc>)
    4c4c:	4a33      	ldr	r2, [pc, #204]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4c4e:	f240 23a7 	movw	r3, #679	; 0x2a7
    4c52:	f003 fa90 	bl	8176 <printk>
    4c56:	4831      	ldr	r0, [pc, #196]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4c58:	f240 21a7 	movw	r1, #679	; 0x2a7
    4c5c:	f003 f9b7 	bl	7fce <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    4c60:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    4c62:	b95f      	cbnz	r7, 4c7c <nrf_pwm_sequence_set+0x40>
    4c64:	492e      	ldr	r1, [pc, #184]	; (4d20 <nrf_pwm_sequence_set+0xe4>)
    4c66:	482c      	ldr	r0, [pc, #176]	; (4d18 <nrf_pwm_sequence_set+0xdc>)
    4c68:	4a2c      	ldr	r2, [pc, #176]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4c6a:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    4c6e:	f003 fa82 	bl	8176 <printk>
    4c72:	482a      	ldr	r0, [pc, #168]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4c74:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    4c78:	f003 f9a9 	bl	7fce <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    4c7c:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    4c80:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    4c84:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    4c86:	2f00      	cmp	r7, #0
    4c88:	d138      	bne.n	4cfc <nrf_pwm_sequence_set+0xc0>
    4c8a:	4926      	ldr	r1, [pc, #152]	; (4d24 <nrf_pwm_sequence_set+0xe8>)
    4c8c:	4a23      	ldr	r2, [pc, #140]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4c8e:	4822      	ldr	r0, [pc, #136]	; (4d18 <nrf_pwm_sequence_set+0xdc>)
    4c90:	f240 23bd 	movw	r3, #701	; 0x2bd
    4c94:	f003 fa6f 	bl	8176 <printk>
    4c98:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    4c9c:	481f      	ldr	r0, [pc, #124]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4c9e:	f003 f996 	bl	7fce <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    4ca2:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    4ca6:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    4ca8:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    4cac:	d30b      	bcc.n	4cc6 <nrf_pwm_sequence_set+0x8a>
    4cae:	491e      	ldr	r1, [pc, #120]	; (4d28 <nrf_pwm_sequence_set+0xec>)
    4cb0:	4819      	ldr	r0, [pc, #100]	; (4d18 <nrf_pwm_sequence_set+0xdc>)
    4cb2:	4a1a      	ldr	r2, [pc, #104]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4cb4:	f240 23c7 	movw	r3, #711	; 0x2c7
    4cb8:	f003 fa5d 	bl	8176 <printk>
    4cbc:	4817      	ldr	r0, [pc, #92]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4cbe:	f240 21c7 	movw	r1, #711	; 0x2c7
    4cc2:	f003 f984 	bl	7fce <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    4cc6:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4cc8:	ea4f 1846 	mov.w	r8, r6, lsl #5
    4ccc:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    4cd0:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    4cd4:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    4cd8:	d30b      	bcc.n	4cf2 <nrf_pwm_sequence_set+0xb6>
    4cda:	4914      	ldr	r1, [pc, #80]	; (4d2c <nrf_pwm_sequence_set+0xf0>)
    4cdc:	480e      	ldr	r0, [pc, #56]	; (4d18 <nrf_pwm_sequence_set+0xdc>)
    4cde:	4a0f      	ldr	r2, [pc, #60]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4ce0:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    4ce4:	f003 fa47 	bl	8176 <printk>
    4ce8:	480c      	ldr	r0, [pc, #48]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4cea:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    4cee:	f003 f96e 	bl	7fce <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    4cf2:	4444      	add	r4, r8
    4cf4:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    4cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    4cfc:	043b      	lsls	r3, r7, #16
    4cfe:	d5d0      	bpl.n	4ca2 <nrf_pwm_sequence_set+0x66>
    4d00:	490b      	ldr	r1, [pc, #44]	; (4d30 <nrf_pwm_sequence_set+0xf4>)
    4d02:	4a06      	ldr	r2, [pc, #24]	; (4d1c <nrf_pwm_sequence_set+0xe0>)
    4d04:	4804      	ldr	r0, [pc, #16]	; (4d18 <nrf_pwm_sequence_set+0xdc>)
    4d06:	f240 23be 	movw	r3, #702	; 0x2be
    4d0a:	f003 fa34 	bl	8176 <printk>
    4d0e:	f240 21be 	movw	r1, #702	; 0x2be
    4d12:	e7c3      	b.n	4c9c <nrf_pwm_sequence_set+0x60>
    4d14:	00009754 	.word	0x00009754
    4d18:	00008fa5 	.word	0x00008fa5
    4d1c:	00009722 	.word	0x00009722
    4d20:	00009769 	.word	0x00009769
    4d24:	00009781 	.word	0x00009781
    4d28:	000097ab 	.word	0x000097ab
    4d2c:	000097cc 	.word	0x000097cc
    4d30:	0000978d 	.word	0x0000978d

00004d34 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d34:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4d36:	0953      	lsrs	r3, r2, #5
{
    4d38:	b510      	push	{r4, lr}
    4d3a:	4604      	mov	r4, r0
    switch (port)
    4d3c:	d02c      	beq.n	4d98 <nrf_gpio_pin_port_decode+0x64>
    4d3e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    4d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4d44:	bf18      	it	ne
    4d46:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4d48:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4d4c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d4e:	07db      	lsls	r3, r3, #31
    4d50:	d40b      	bmi.n	4d6a <nrf_gpio_pin_port_decode+0x36>
    4d52:	4914      	ldr	r1, [pc, #80]	; (4da4 <nrf_gpio_pin_port_decode+0x70>)
    4d54:	4814      	ldr	r0, [pc, #80]	; (4da8 <nrf_gpio_pin_port_decode+0x74>)
    4d56:	4a15      	ldr	r2, [pc, #84]	; (4dac <nrf_gpio_pin_port_decode+0x78>)
    4d58:	f240 2329 	movw	r3, #553	; 0x229
    4d5c:	f003 fa0b 	bl	8176 <printk>
    4d60:	4812      	ldr	r0, [pc, #72]	; (4dac <nrf_gpio_pin_port_decode+0x78>)
    4d62:	f240 2129 	movw	r1, #553	; 0x229
    4d66:	f003 f932 	bl	7fce <assert_post_action>
    uint32_t pin_number = *p_pin;
    4d6a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4d6c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d70:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4d72:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d74:	d00d      	beq.n	4d92 <nrf_gpio_pin_port_decode+0x5e>
    4d76:	2b01      	cmp	r3, #1
    4d78:	d011      	beq.n	4d9e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    4d7a:	490d      	ldr	r1, [pc, #52]	; (4db0 <nrf_gpio_pin_port_decode+0x7c>)
    4d7c:	480a      	ldr	r0, [pc, #40]	; (4da8 <nrf_gpio_pin_port_decode+0x74>)
    4d7e:	4a0b      	ldr	r2, [pc, #44]	; (4dac <nrf_gpio_pin_port_decode+0x78>)
    4d80:	f240 232e 	movw	r3, #558	; 0x22e
    4d84:	f003 f9f7 	bl	8176 <printk>
    4d88:	4808      	ldr	r0, [pc, #32]	; (4dac <nrf_gpio_pin_port_decode+0x78>)
    4d8a:	f240 212e 	movw	r1, #558	; 0x22e
    4d8e:	f003 f91e 	bl	7fce <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d92:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4d96:	bd10      	pop	{r4, pc}
    switch (port)
    4d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d9c:	e7d4      	b.n	4d48 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    4d9e:	4805      	ldr	r0, [pc, #20]	; (4db4 <nrf_gpio_pin_port_decode+0x80>)
    4da0:	e7f9      	b.n	4d96 <nrf_gpio_pin_port_decode+0x62>
    4da2:	bf00      	nop
    4da4:	000095a4 	.word	0x000095a4
    4da8:	00008fa5 	.word	0x00008fa5
    4dac:	00009571 	.word	0x00009571
    4db0:	0000978b 	.word	0x0000978b
    4db4:	50000300 	.word	0x50000300

00004db8 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    4db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dbc:	4606      	mov	r6, r0
    4dbe:	b087      	sub	sp, #28
    4dc0:	4691      	mov	r9, r2
    4dc2:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    4dc4:	460c      	mov	r4, r1
    4dc6:	b949      	cbnz	r1, 4ddc <nrfx_pwm_init+0x24>
    4dc8:	4959      	ldr	r1, [pc, #356]	; (4f30 <nrfx_pwm_init+0x178>)
    4dca:	485a      	ldr	r0, [pc, #360]	; (4f34 <nrfx_pwm_init+0x17c>)
    4dcc:	4a5a      	ldr	r2, [pc, #360]	; (4f38 <nrfx_pwm_init+0x180>)
    4dce:	238c      	movs	r3, #140	; 0x8c
    4dd0:	f003 f9d1 	bl	8176 <printk>
    4dd4:	4858      	ldr	r0, [pc, #352]	; (4f38 <nrfx_pwm_init+0x180>)
    4dd6:	218c      	movs	r1, #140	; 0x8c
    4dd8:	f003 f8f9 	bl	7fce <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4ddc:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4dde:	4d57      	ldr	r5, [pc, #348]	; (4f3c <nrfx_pwm_init+0x184>)
    4de0:	210c      	movs	r1, #12
    4de2:	4379      	muls	r1, r7
    4de4:	186b      	adds	r3, r5, r1
    4de6:	7a1a      	ldrb	r2, [r3, #8]
    4de8:	2a00      	cmp	r2, #0
    4dea:	f040 809f 	bne.w	4f2c <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    4dee:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    4df0:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    4df4:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    4df8:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    4dfa:	2a00      	cmp	r2, #0
    4dfc:	d04d      	beq.n	4e9a <nrfx_pwm_init+0xe2>
    4dfe:	7b63      	ldrb	r3, [r4, #13]
    4e00:	2b00      	cmp	r3, #0
    4e02:	d04a      	beq.n	4e9a <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    4e04:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    4e08:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    4e0c:	2301      	movs	r3, #1
    4e0e:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    4e12:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    4e16:	f894 b005 	ldrb.w	fp, [r4, #5]
    4e1a:	f894 a006 	ldrb.w	sl, [r4, #6]
    4e1e:	2b00      	cmp	r3, #0
    4e20:	da0b      	bge.n	4e3a <nrfx_pwm_init+0x82>
    4e22:	4947      	ldr	r1, [pc, #284]	; (4f40 <nrfx_pwm_init+0x188>)
    4e24:	4843      	ldr	r0, [pc, #268]	; (4f34 <nrfx_pwm_init+0x17c>)
    4e26:	4a47      	ldr	r2, [pc, #284]	; (4f44 <nrfx_pwm_init+0x18c>)
    4e28:	f44f 7327 	mov.w	r3, #668	; 0x29c
    4e2c:	f003 f9a3 	bl	8176 <printk>
    4e30:	4844      	ldr	r0, [pc, #272]	; (4f44 <nrfx_pwm_init+0x18c>)
    4e32:	f44f 7127 	mov.w	r1, #668	; 0x29c
    4e36:	f003 f8ca 	bl	7fce <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    4e3a:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    4e3e:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    4e40:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    4e44:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    4e48:	8963      	ldrh	r3, [r4, #10]
    4e4a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    4e4e:	2300      	movs	r3, #0
    4e50:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    4e54:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e58:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    4e5c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    4e60:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    4e64:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    4e68:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    4e6c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    4e70:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4e74:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    4e78:	230c      	movs	r3, #12
    4e7a:	437b      	muls	r3, r7
    4e7c:	58eb      	ldr	r3, [r5, r3]
    4e7e:	b11b      	cbz	r3, 4e88 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4e80:	f340 3007 	sbfx	r0, r0, #12, #8
    4e84:	f7fd fa10 	bl	22a8 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4e88:	230c      	movs	r3, #12
    4e8a:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4e8e:	482e      	ldr	r0, [pc, #184]	; (4f48 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4e90:	2301      	movs	r3, #1
    4e92:	722b      	strb	r3, [r5, #8]
}
    4e94:	b007      	add	sp, #28
    4e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e9a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    4e9e:	f10d 0808 	add.w	r8, sp, #8
    4ea2:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    4ea6:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    4eaa:	2aff      	cmp	r2, #255	; 0xff
    4eac:	d039      	beq.n	4f22 <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    4eae:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    4eb0:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    4eb4:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    4eb8:	b9b1      	cbnz	r1, 4ee8 <nrfx_pwm_init+0x130>
    if (value == 0)
    4eba:	0613      	lsls	r3, r2, #24
    4ebc:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ec0:	a801      	add	r0, sp, #4
    if (value == 0)
    4ec2:	d426      	bmi.n	4f12 <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ec4:	f7ff ff36 	bl	4d34 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4ec8:	9901      	ldr	r1, [sp, #4]
    4eca:	2201      	movs	r2, #1
    4ecc:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    4ece:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ed2:	a801      	add	r0, sp, #4
    4ed4:	f8cd b004 	str.w	fp, [sp, #4]
    4ed8:	f7ff ff2c 	bl	4d34 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4edc:	9b01      	ldr	r3, [sp, #4]
    4ede:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4ee2:	2203      	movs	r2, #3
    4ee4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4ee8:	45d1      	cmp	r9, sl
    4eea:	f108 0804 	add.w	r8, r8, #4
    4eee:	d1da      	bne.n	4ea6 <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    4ef0:	7b63      	ldrb	r3, [r4, #13]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d186      	bne.n	4e04 <nrfx_pwm_init+0x4c>
    4ef6:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    4ef8:	9a02      	ldr	r2, [sp, #8]
    4efa:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    4efe:	9a03      	ldr	r2, [sp, #12]
    4f00:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    4f04:	9a04      	ldr	r2, [sp, #16]
    4f06:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    4f0a:	9a05      	ldr	r2, [sp, #20]
    4f0c:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4f10:	e778      	b.n	4e04 <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f12:	f7ff ff0f 	bl	4d34 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4f16:	9901      	ldr	r1, [sp, #4]
    4f18:	2201      	movs	r2, #1
    4f1a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    4f1c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    4f20:	e7d7      	b.n	4ed2 <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f26:	f8c8 3000 	str.w	r3, [r8]
    4f2a:	e7dd      	b.n	4ee8 <nrfx_pwm_init+0x130>
        return err_code;
    4f2c:	4807      	ldr	r0, [pc, #28]	; (4f4c <nrfx_pwm_init+0x194>)
    4f2e:	e7b1      	b.n	4e94 <nrfx_pwm_init+0xdc>
    4f30:	0000982a 	.word	0x0000982a
    4f34:	00008fa5 	.word	0x00008fa5
    4f38:	000097ef 	.word	0x000097ef
    4f3c:	20000b10 	.word	0x20000b10
    4f40:	00009833 	.word	0x00009833
    4f44:	00009722 	.word	0x00009722
    4f48:	0bad0000 	.word	0x0bad0000
    4f4c:	0bad0005 	.word	0x0bad0005

00004f50 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    4f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f54:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4f56:	7903      	ldrb	r3, [r0, #4]
{
    4f58:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4f5a:	4a31      	ldr	r2, [pc, #196]	; (5020 <nrfx_pwm_simple_playback+0xd0>)
{
    4f5c:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4f5e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4f62:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4f66:	210c      	movs	r1, #12
    4f68:	fb01 2303 	mla	r3, r1, r3, r2
{
    4f6c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    4f6e:	7a1b      	ldrb	r3, [r3, #8]
    4f70:	b95b      	cbnz	r3, 4f8a <nrfx_pwm_simple_playback+0x3a>
    4f72:	492c      	ldr	r1, [pc, #176]	; (5024 <nrfx_pwm_simple_playback+0xd4>)
    4f74:	482c      	ldr	r0, [pc, #176]	; (5028 <nrfx_pwm_simple_playback+0xd8>)
    4f76:	4a2d      	ldr	r2, [pc, #180]	; (502c <nrfx_pwm_simple_playback+0xdc>)
    4f78:	f44f 7396 	mov.w	r3, #300	; 0x12c
    4f7c:	f003 f8fb 	bl	8176 <printk>
    4f80:	482a      	ldr	r0, [pc, #168]	; (502c <nrfx_pwm_simple_playback+0xdc>)
    4f82:	f44f 7196 	mov.w	r1, #300	; 0x12c
    4f86:	f003 f822 	bl	7fce <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    4f8a:	b95c      	cbnz	r4, 4fa4 <nrfx_pwm_simple_playback+0x54>
    4f8c:	4928      	ldr	r1, [pc, #160]	; (5030 <nrfx_pwm_simple_playback+0xe0>)
    4f8e:	4826      	ldr	r0, [pc, #152]	; (5028 <nrfx_pwm_simple_playback+0xd8>)
    4f90:	4a26      	ldr	r2, [pc, #152]	; (502c <nrfx_pwm_simple_playback+0xdc>)
    4f92:	f240 132d 	movw	r3, #301	; 0x12d
    4f96:	f003 f8ee 	bl	8176 <printk>
    4f9a:	4824      	ldr	r0, [pc, #144]	; (502c <nrfx_pwm_simple_playback+0xdc>)
    4f9c:	f240 112d 	movw	r1, #301	; 0x12d
    4fa0:	f003 f815 	bl	7fce <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4fa4:	6833      	ldr	r3, [r6, #0]
    4fa6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    4faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4fae:	d00b      	beq.n	4fc8 <nrfx_pwm_simple_playback+0x78>
    4fb0:	4920      	ldr	r1, [pc, #128]	; (5034 <nrfx_pwm_simple_playback+0xe4>)
    4fb2:	481d      	ldr	r0, [pc, #116]	; (5028 <nrfx_pwm_simple_playback+0xd8>)
    4fb4:	4a1d      	ldr	r2, [pc, #116]	; (502c <nrfx_pwm_simple_playback+0xdc>)
    4fb6:	f44f 7397 	mov.w	r3, #302	; 0x12e
    4fba:	f003 f8dc 	bl	8176 <printk>
    4fbe:	481b      	ldr	r0, [pc, #108]	; (502c <nrfx_pwm_simple_playback+0xdc>)
    4fc0:	f44f 7197 	mov.w	r1, #302	; 0x12e
    4fc4:	f003 f803 	bl	7fce <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    4fc8:	6828      	ldr	r0, [r5, #0]
    4fca:	4632      	mov	r2, r6
    4fcc:	2100      	movs	r1, #0
    4fce:	f7ff fe35 	bl	4c3c <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    4fd2:	6828      	ldr	r0, [r5, #0]
    4fd4:	4632      	mov	r2, r6
    4fd6:	2101      	movs	r1, #1
    4fd8:	f7ff fe30 	bl	4c3c <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    4fdc:	6828      	ldr	r0, [r5, #0]
    4fde:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    4fe2:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    4fe6:	f018 0f01 	tst.w	r8, #1
    4fea:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    4fee:	d114      	bne.n	501a <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    4ff0:	f018 0202 	ands.w	r2, r8, #2
    4ff4:	d003      	beq.n	4ffe <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	bf14      	ite	ne
    4ffa:	2208      	movne	r2, #8
    4ffc:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    4ffe:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    5000:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    5004:	4639      	mov	r1, r7
    5006:	fa5f f288 	uxtb.w	r2, r8
    500a:	bf18      	it	ne
    500c:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    500e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    5012:	bf08      	it	eq
    5014:	2308      	moveq	r3, #8
    5016:	f003 bbab 	b.w	8770 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    501a:	2210      	movs	r2, #16
    501c:	e7ef      	b.n	4ffe <nrfx_pwm_simple_playback+0xae>
    501e:	bf00      	nop
    5020:	20000b10 	.word	0x20000b10
    5024:	00009854 	.word	0x00009854
    5028:	00008fa5 	.word	0x00008fa5
    502c:	000097ef 	.word	0x000097ef
    5030:	00009880 	.word	0x00009880
    5034:	00009893 	.word	0x00009893

00005038 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    5038:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    503a:	4e12      	ldr	r6, [pc, #72]	; (5084 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    503c:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    503e:	220c      	movs	r2, #12
    5040:	fb02 6204 	mla	r2, r2, r4, r6
{
    5044:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5046:	7a12      	ldrb	r2, [r2, #8]
    5048:	b95a      	cbnz	r2, 5062 <nrfx_pwm_is_stopped+0x2a>
    504a:	490f      	ldr	r1, [pc, #60]	; (5088 <nrfx_pwm_is_stopped+0x50>)
    504c:	480f      	ldr	r0, [pc, #60]	; (508c <nrfx_pwm_is_stopped+0x54>)
    504e:	4a10      	ldr	r2, [pc, #64]	; (5090 <nrfx_pwm_is_stopped+0x58>)
    5050:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    5054:	f003 f88f 	bl	8176 <printk>
    5058:	480d      	ldr	r0, [pc, #52]	; (5090 <nrfx_pwm_is_stopped+0x58>)
    505a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    505e:	f002 ffb6 	bl	7fce <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5062:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    5064:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5066:	fb03 6404 	mla	r4, r3, r4, r6
    506a:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    506c:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    5070:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    5072:	b91a      	cbnz	r2, 507c <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    5074:	1e98      	subs	r0, r3, #2
    5076:	bf18      	it	ne
    5078:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    507a:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    507c:	2001      	movs	r0, #1
    507e:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    5080:	e7fb      	b.n	507a <nrfx_pwm_is_stopped+0x42>
    5082:	bf00      	nop
    5084:	20000b10 	.word	0x20000b10
    5088:	00009854 	.word	0x00009854
    508c:	00008fa5 	.word	0x00008fa5
    5090:	000097ef 	.word	0x000097ef

00005094 <nrfx_pwm_stop>:
{
    5094:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    5096:	4a14      	ldr	r2, [pc, #80]	; (50e8 <nrfx_pwm_stop+0x54>)
    5098:	7903      	ldrb	r3, [r0, #4]
{
    509a:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    509c:	210c      	movs	r1, #12
    509e:	fb01 2303 	mla	r3, r1, r3, r2
{
    50a2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    50a4:	7a1b      	ldrb	r3, [r3, #8]
    50a6:	b95b      	cbnz	r3, 50c0 <nrfx_pwm_stop+0x2c>
    50a8:	4910      	ldr	r1, [pc, #64]	; (50ec <nrfx_pwm_stop+0x58>)
    50aa:	4811      	ldr	r0, [pc, #68]	; (50f0 <nrfx_pwm_stop+0x5c>)
    50ac:	4a11      	ldr	r2, [pc, #68]	; (50f4 <nrfx_pwm_stop+0x60>)
    50ae:	f240 1385 	movw	r3, #389	; 0x185
    50b2:	f003 f860 	bl	8176 <printk>
    50b6:	480f      	ldr	r0, [pc, #60]	; (50f4 <nrfx_pwm_stop+0x60>)
    50b8:	f240 1185 	movw	r1, #389	; 0x185
    50bc:	f002 ff87 	bl	7fce <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    50c0:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    50c2:	2200      	movs	r2, #0
    50c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50c8:	2201      	movs	r2, #1
    50ca:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    50cc:	4620      	mov	r0, r4
    50ce:	f7ff ffb3 	bl	5038 <nrfx_pwm_is_stopped>
    50d2:	b938      	cbnz	r0, 50e4 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    50d4:	4620      	mov	r0, r4
    50d6:	f7ff ffaf 	bl	5038 <nrfx_pwm_is_stopped>
    50da:	b918      	cbnz	r0, 50e4 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    50dc:	2d00      	cmp	r5, #0
    50de:	d1f9      	bne.n	50d4 <nrfx_pwm_stop+0x40>
}
    50e0:	4628      	mov	r0, r5
    50e2:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    50e4:	2501      	movs	r5, #1
    50e6:	e7fb      	b.n	50e0 <nrfx_pwm_stop+0x4c>
    50e8:	20000b10 	.word	0x20000b10
    50ec:	000098bc 	.word	0x000098bc
    50f0:	00008fa5 	.word	0x00008fa5
    50f4:	000097ef 	.word	0x000097ef

000050f8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    50f8:	4b03      	ldr	r3, [pc, #12]	; (5108 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    50fa:	6818      	ldr	r0, [r3, #0]
}
    50fc:	f1a0 0308 	sub.w	r3, r0, #8
    5100:	4258      	negs	r0, r3
    5102:	4158      	adcs	r0, r3
    5104:	4770      	bx	lr
    5106:	bf00      	nop
    5108:	10000130 	.word	0x10000130

0000510c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    510c:	4b06      	ldr	r3, [pc, #24]	; (5128 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    510e:	681b      	ldr	r3, [r3, #0]
    5110:	2b08      	cmp	r3, #8
    5112:	d106      	bne.n	5122 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5114:	4b05      	ldr	r3, [pc, #20]	; (512c <nrf52_errata_103+0x20>)
    5116:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    5118:	2b05      	cmp	r3, #5
    511a:	d802      	bhi.n	5122 <nrf52_errata_103+0x16>
    511c:	4a04      	ldr	r2, [pc, #16]	; (5130 <nrf52_errata_103+0x24>)
    511e:	5cd0      	ldrb	r0, [r2, r3]
    5120:	4770      	bx	lr
        return false;
    5122:	2000      	movs	r0, #0
}
    5124:	4770      	bx	lr
    5126:	bf00      	nop
    5128:	10000130 	.word	0x10000130
    512c:	10000134 	.word	0x10000134
    5130:	00009907 	.word	0x00009907

00005134 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5134:	4a02      	ldr	r2, [pc, #8]	; (5140 <nvmc_wait+0xc>)
    5136:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    513a:	2b00      	cmp	r3, #0
    513c:	d0fb      	beq.n	5136 <nvmc_wait+0x2>
}
    513e:	4770      	bx	lr
    5140:	4001e000 	.word	0x4001e000

00005144 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5144:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5146:	f7ff ffd7 	bl	50f8 <nrf52_errata_136>
    514a:	b140      	cbz	r0, 515e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    514c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5150:	2200      	movs	r2, #0
    5152:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5156:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    515a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    515e:	f7ff ffcb 	bl	50f8 <nrf52_errata_136>
    5162:	2800      	cmp	r0, #0
    5164:	d046      	beq.n	51f4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    516a:	4b5b      	ldr	r3, [pc, #364]	; (52d8 <SystemInit+0x194>)
    516c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5170:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5174:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5178:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    517c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5180:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5184:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5188:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    518c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5190:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5194:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5198:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    519c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    51a0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    51a4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    51a8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    51ac:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    51b0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    51b4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    51b8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    51bc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    51c0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    51c4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    51c8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    51cc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    51d0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    51d4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    51d8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    51dc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    51e0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    51e4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    51e8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    51ec:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    51f0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    51f4:	f7ff ff8a 	bl	510c <nrf52_errata_103>
    51f8:	b110      	cbz	r0, 5200 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    51fa:	4b38      	ldr	r3, [pc, #224]	; (52dc <SystemInit+0x198>)
    51fc:	4a38      	ldr	r2, [pc, #224]	; (52e0 <SystemInit+0x19c>)
    51fe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5200:	f7ff ff84 	bl	510c <nrf52_errata_103>
    5204:	b118      	cbz	r0, 520e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5206:	4b37      	ldr	r3, [pc, #220]	; (52e4 <SystemInit+0x1a0>)
    5208:	22fb      	movs	r2, #251	; 0xfb
    520a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    520e:	f7ff ff7d 	bl	510c <nrf52_errata_103>
    5212:	b148      	cbz	r0, 5228 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5214:	4934      	ldr	r1, [pc, #208]	; (52e8 <SystemInit+0x1a4>)
    5216:	4b35      	ldr	r3, [pc, #212]	; (52ec <SystemInit+0x1a8>)
    5218:	680a      	ldr	r2, [r1, #0]
    521a:	681b      	ldr	r3, [r3, #0]
    521c:	f022 020f 	bic.w	r2, r2, #15
    5220:	f003 030f 	and.w	r3, r3, #15
    5224:	4313      	orrs	r3, r2
    5226:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5228:	f7ff ff70 	bl	510c <nrf52_errata_103>
    522c:	b118      	cbz	r0, 5236 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    522e:	4b30      	ldr	r3, [pc, #192]	; (52f0 <SystemInit+0x1ac>)
    5230:	f44f 7200 	mov.w	r2, #512	; 0x200
    5234:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5236:	f7ff ff5f 	bl	50f8 <nrf52_errata_136>
    523a:	b148      	cbz	r0, 5250 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    523c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5240:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5244:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5246:	bf44      	itt	mi
    5248:	f06f 0201 	mvnmi.w	r2, #1
    524c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5250:	4b28      	ldr	r3, [pc, #160]	; (52f4 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5252:	681b      	ldr	r3, [r3, #0]
    5254:	2b08      	cmp	r3, #8
    5256:	d10e      	bne.n	5276 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5258:	4b27      	ldr	r3, [pc, #156]	; (52f8 <SystemInit+0x1b4>)
    525a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    525c:	2b05      	cmp	r3, #5
    525e:	d802      	bhi.n	5266 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5260:	4a26      	ldr	r2, [pc, #152]	; (52fc <SystemInit+0x1b8>)
    5262:	5cd3      	ldrb	r3, [r2, r3]
    5264:	b13b      	cbz	r3, 5276 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5266:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    526a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    526e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5272:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5276:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    527a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    527e:	2a00      	cmp	r2, #0
    5280:	db03      	blt.n	528a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5282:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5286:	2b00      	cmp	r3, #0
    5288:	da22      	bge.n	52d0 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    528a:	491d      	ldr	r1, [pc, #116]	; (5300 <SystemInit+0x1bc>)
    528c:	2301      	movs	r3, #1
    528e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5292:	f7ff ff4f 	bl	5134 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5296:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    529a:	2412      	movs	r4, #18
    529c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    52a0:	f7ff ff48 	bl	5134 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    52a4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    52a8:	f7ff ff44 	bl	5134 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    52ac:	2300      	movs	r3, #0
    52ae:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    52b2:	f7ff ff3f 	bl	5134 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    52b6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    52ba:	4912      	ldr	r1, [pc, #72]	; (5304 <SystemInit+0x1c0>)
    52bc:	4b12      	ldr	r3, [pc, #72]	; (5308 <SystemInit+0x1c4>)
    52be:	68ca      	ldr	r2, [r1, #12]
    52c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    52c4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    52c6:	60cb      	str	r3, [r1, #12]
    52c8:	f3bf 8f4f 	dsb	sy
    __NOP();
    52cc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    52ce:	e7fd      	b.n	52cc <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    52d0:	4b0e      	ldr	r3, [pc, #56]	; (530c <SystemInit+0x1c8>)
    52d2:	4a0f      	ldr	r2, [pc, #60]	; (5310 <SystemInit+0x1cc>)
    52d4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    52d6:	bd10      	pop	{r4, pc}
    52d8:	4000c000 	.word	0x4000c000
    52dc:	4000568c 	.word	0x4000568c
    52e0:	00038148 	.word	0x00038148
    52e4:	4000f000 	.word	0x4000f000
    52e8:	40000ee4 	.word	0x40000ee4
    52ec:	10000258 	.word	0x10000258
    52f0:	40029640 	.word	0x40029640
    52f4:	10000130 	.word	0x10000130
    52f8:	10000134 	.word	0x10000134
    52fc:	00009901 	.word	0x00009901
    5300:	4001e000 	.word	0x4001e000
    5304:	e000ed00 	.word	0xe000ed00
    5308:	05fa0004 	.word	0x05fa0004
    530c:	20000168 	.word	0x20000168
    5310:	03d09000 	.word	0x03d09000

00005314 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5314:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5316:	4c14      	ldr	r4, [pc, #80]	; (5368 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5318:	4a14      	ldr	r2, [pc, #80]	; (536c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    531a:	4915      	ldr	r1, [pc, #84]	; (5370 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    531c:	2303      	movs	r3, #3
    531e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5320:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5322:	4b14      	ldr	r3, [pc, #80]	; (5374 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    5324:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5326:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5328:	f44f 6380 	mov.w	r3, #1024	; 0x400
    532c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    532e:	2300      	movs	r3, #0
    5330:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5332:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5334:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    5336:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5338:	4a0f      	ldr	r2, [pc, #60]	; (5378 <_DoInit+0x64>)
    533a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    533c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    533e:	2210      	movs	r2, #16
    5340:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5342:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5344:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5346:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5348:	f002 ff45 	bl	81d6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    534c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    5350:	490a      	ldr	r1, [pc, #40]	; (537c <_DoInit+0x68>)
    5352:	4620      	mov	r0, r4
    5354:	f002 ff3f 	bl	81d6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5358:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    535c:	2320      	movs	r3, #32
    535e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    5360:	f3bf 8f5f 	dmb	sy
}
    5364:	bd10      	pop	{r4, pc}
    5366:	bf00      	nop
    5368:	20000b1c 	.word	0x20000b1c
    536c:	0000990d 	.word	0x0000990d
    5370:	00009916 	.word	0x00009916
    5374:	20000c3f 	.word	0x20000c3f
    5378:	20000c2f 	.word	0x20000c2f
    537c:	0000991a 	.word	0x0000991a

00005380 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5380:	4b0e      	ldr	r3, [pc, #56]	; (53bc <z_sys_init_run_level+0x3c>)
{
    5382:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5384:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5388:	3001      	adds	r0, #1
    538a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    538e:	42a6      	cmp	r6, r4
    5390:	d800      	bhi.n	5394 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5392:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5394:	e9d4 3500 	ldrd	r3, r5, [r4]
    5398:	4628      	mov	r0, r5
    539a:	4798      	blx	r3
		if (dev != NULL) {
    539c:	b165      	cbz	r5, 53b8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    539e:	68eb      	ldr	r3, [r5, #12]
    53a0:	b130      	cbz	r0, 53b0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    53a2:	2800      	cmp	r0, #0
    53a4:	bfb8      	it	lt
    53a6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    53a8:	28ff      	cmp	r0, #255	; 0xff
    53aa:	bfa8      	it	ge
    53ac:	20ff      	movge	r0, #255	; 0xff
    53ae:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    53b0:	785a      	ldrb	r2, [r3, #1]
    53b2:	f042 0201 	orr.w	r2, r2, #1
    53b6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    53b8:	3408      	adds	r4, #8
    53ba:	e7e8      	b.n	538e <z_sys_init_run_level+0xe>
    53bc:	00008d18 	.word	0x00008d18

000053c0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    53c0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    53c2:	4605      	mov	r5, r0
    53c4:	b910      	cbnz	r0, 53cc <z_impl_device_get_binding+0xc>
		return NULL;
    53c6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    53c8:	4620      	mov	r0, r4
    53ca:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    53cc:	7803      	ldrb	r3, [r0, #0]
    53ce:	2b00      	cmp	r3, #0
    53d0:	d0f9      	beq.n	53c6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    53d2:	4a0f      	ldr	r2, [pc, #60]	; (5410 <z_impl_device_get_binding+0x50>)
    53d4:	4c0f      	ldr	r4, [pc, #60]	; (5414 <z_impl_device_get_binding+0x54>)
    53d6:	4616      	mov	r6, r2
    53d8:	4294      	cmp	r4, r2
    53da:	d108      	bne.n	53ee <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    53dc:	4c0d      	ldr	r4, [pc, #52]	; (5414 <z_impl_device_get_binding+0x54>)
    53de:	42b4      	cmp	r4, r6
    53e0:	d0f1      	beq.n	53c6 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    53e2:	4620      	mov	r0, r4
    53e4:	f003 f9ef 	bl	87c6 <z_device_ready>
    53e8:	b950      	cbnz	r0, 5400 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    53ea:	3418      	adds	r4, #24
    53ec:	e7f7      	b.n	53de <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    53ee:	4620      	mov	r0, r4
    53f0:	f003 f9e9 	bl	87c6 <z_device_ready>
    53f4:	b110      	cbz	r0, 53fc <z_impl_device_get_binding+0x3c>
    53f6:	6823      	ldr	r3, [r4, #0]
    53f8:	42ab      	cmp	r3, r5
    53fa:	d0e5      	beq.n	53c8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    53fc:	3418      	adds	r4, #24
    53fe:	e7eb      	b.n	53d8 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5400:	6821      	ldr	r1, [r4, #0]
    5402:	4628      	mov	r0, r5
    5404:	f002 ff01 	bl	820a <strcmp>
    5408:	2800      	cmp	r0, #0
    540a:	d1ee      	bne.n	53ea <z_impl_device_get_binding+0x2a>
    540c:	e7dc      	b.n	53c8 <z_impl_device_get_binding+0x8>
    540e:	bf00      	nop
    5410:	00008a04 	.word	0x00008a04
    5414:	0000895c 	.word	0x0000895c

00005418 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    541a:	4604      	mov	r4, r0
    541c:	460e      	mov	r6, r1
	__asm__ volatile(
    541e:	f04f 0320 	mov.w	r3, #32
    5422:	f3ef 8711 	mrs	r7, BASEPRI
    5426:	f383 8812 	msr	BASEPRI_MAX, r3
    542a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    542e:	f001 fc95 	bl	6d5c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5432:	4631      	mov	r1, r6
    5434:	4605      	mov	r5, r0
    5436:	4620      	mov	r0, r4
    5438:	f003 f919 	bl	866e <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    543c:	2c04      	cmp	r4, #4
    543e:	d10c      	bne.n	545a <z_fatal_error+0x42>
    5440:	490a      	ldr	r1, [pc, #40]	; (546c <z_fatal_error+0x54>)
    5442:	4a0b      	ldr	r2, [pc, #44]	; (5470 <z_fatal_error+0x58>)
    5444:	480b      	ldr	r0, [pc, #44]	; (5474 <z_fatal_error+0x5c>)
    5446:	238f      	movs	r3, #143	; 0x8f
    5448:	f002 fe95 	bl	8176 <printk>
    544c:	480a      	ldr	r0, [pc, #40]	; (5478 <z_fatal_error+0x60>)
    544e:	f002 fe92 	bl	8176 <printk>
    5452:	4807      	ldr	r0, [pc, #28]	; (5470 <z_fatal_error+0x58>)
    5454:	218f      	movs	r1, #143	; 0x8f
    5456:	f002 fdba 	bl	7fce <assert_post_action>
	__asm__ volatile(
    545a:	f387 8811 	msr	BASEPRI, r7
    545e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5462:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5464:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5468:	f7fd b9ca 	b.w	2800 <z_impl_k_thread_abort>
    546c:	00009943 	.word	0x00009943
    5470:	00009921 	.word	0x00009921
    5474:	00008fa5 	.word	0x00008fa5
    5478:	00009960 	.word	0x00009960

0000547c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    547c:	4c11      	ldr	r4, [pc, #68]	; (54c4 <idle+0x48>)
    547e:	68a2      	ldr	r2, [r4, #8]
    5480:	f992 200e 	ldrsb.w	r2, [r2, #14]
    5484:	2a00      	cmp	r2, #0
{
    5486:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5488:	da09      	bge.n	549e <idle+0x22>
    548a:	490f      	ldr	r1, [pc, #60]	; (54c8 <idle+0x4c>)
    548c:	480f      	ldr	r0, [pc, #60]	; (54cc <idle+0x50>)
    548e:	4a10      	ldr	r2, [pc, #64]	; (54d0 <idle+0x54>)
    5490:	2327      	movs	r3, #39	; 0x27
    5492:	f002 fe70 	bl	8176 <printk>
    5496:	480e      	ldr	r0, [pc, #56]	; (54d0 <idle+0x54>)
    5498:	2127      	movs	r1, #39	; 0x27
    549a:	f002 fd98 	bl	7fce <assert_post_action>
	__asm__ volatile(
    549e:	f04f 0220 	mov.w	r2, #32
    54a2:	f3ef 8311 	mrs	r3, BASEPRI
    54a6:	f382 8812 	msr	BASEPRI_MAX, r2
    54aa:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    54ae:	f002 f8b1 	bl	7614 <z_get_next_timeout_expiry>
    54b2:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    54b4:	f7fc fdcc 	bl	2050 <pm_system_suspend>
    54b8:	2800      	cmp	r0, #0
    54ba:	d1f0      	bne.n	549e <idle+0x22>
	arch_cpu_idle();
    54bc:	f7fc fe7e 	bl	21bc <arch_cpu_idle>
}
    54c0:	e7ed      	b.n	549e <idle+0x22>
    54c2:	bf00      	nop
    54c4:	20000bc4 	.word	0x20000bc4
    54c8:	000099b6 	.word	0x000099b6
    54cc:	00008fa5 	.word	0x00008fa5
    54d0:	00009995 	.word	0x00009995

000054d4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    54d4:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    54d6:	2300      	movs	r3, #0
{
    54d8:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    54da:	2201      	movs	r2, #1
    54dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    54e0:	220f      	movs	r2, #15
    54e2:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    54e6:	4c0d      	ldr	r4, [pc, #52]	; (551c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    54e8:	4a0d      	ldr	r2, [pc, #52]	; (5520 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    54ea:	9301      	str	r3, [sp, #4]
    54ec:	490d      	ldr	r1, [pc, #52]	; (5524 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    54ee:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    54f0:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    54f4:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    54f8:	f44f 75b0 	mov.w	r5, #352	; 0x160
    54fc:	9300      	str	r3, [sp, #0]
    54fe:	fb05 1100 	mla	r1, r5, r0, r1
    5502:	4b09      	ldr	r3, [pc, #36]	; (5528 <init_idle_thread+0x54>)
    5504:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5508:	4620      	mov	r0, r4
    550a:	f001 fda9 	bl	7060 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    550e:	7b63      	ldrb	r3, [r4, #13]
    5510:	f023 0304 	bic.w	r3, r3, #4
    5514:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    5516:	b007      	add	sp, #28
    5518:	bd30      	pop	{r4, r5, pc}
    551a:	bf00      	nop
    551c:	200003e0 	.word	0x200003e0
    5520:	20000bc4 	.word	0x20000bc4
    5524:	20002280 	.word	0x20002280
    5528:	0000547d 	.word	0x0000547d

0000552c <bg_thread_main>:
{
    552c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    552e:	4b0a      	ldr	r3, [pc, #40]	; (5558 <bg_thread_main+0x2c>)
    5530:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5532:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5534:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5536:	f7ff ff23 	bl	5380 <z_sys_init_run_level>
	boot_banner();
    553a:	f002 fb4d 	bl	7bd8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    553e:	2003      	movs	r0, #3
    5540:	f7ff ff1e 	bl	5380 <z_sys_init_run_level>
	z_init_static_threads();
    5544:	f001 fe3e 	bl	71c4 <z_init_static_threads>
	main();
    5548:	f7fb fcd0 	bl	eec <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    554c:	4a03      	ldr	r2, [pc, #12]	; (555c <bg_thread_main+0x30>)
    554e:	7b13      	ldrb	r3, [r2, #12]
    5550:	f023 0301 	bic.w	r3, r3, #1
    5554:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5556:	bd08      	pop	{r3, pc}
    5558:	2000103f 	.word	0x2000103f
    555c:	20000460 	.word	0x20000460

00005560 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5560:	4802      	ldr	r0, [pc, #8]	; (556c <z_bss_zero+0xc>)
    5562:	4a03      	ldr	r2, [pc, #12]	; (5570 <z_bss_zero+0x10>)
    5564:	2100      	movs	r1, #0
    5566:	1a12      	subs	r2, r2, r0
    5568:	f002 be66 	b.w	8238 <memset>
    556c:	20000240 	.word	0x20000240
    5570:	200011fc 	.word	0x200011fc

00005574 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5574:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5576:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5650 <z_cstart+0xdc>
    557a:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    557c:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5580:	4d2d      	ldr	r5, [pc, #180]	; (5638 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5582:	4e2e      	ldr	r6, [pc, #184]	; (563c <z_cstart+0xc8>)
    5584:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5586:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5654 <z_cstart+0xe0>
    558a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    558e:	2400      	movs	r4, #0
    5590:	616b      	str	r3, [r5, #20]
    5592:	23e0      	movs	r3, #224	; 0xe0
    5594:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5598:	77ec      	strb	r4, [r5, #31]
    559a:	762c      	strb	r4, [r5, #24]
    559c:	766c      	strb	r4, [r5, #25]
    559e:	76ac      	strb	r4, [r5, #26]
    55a0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    55a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    55a6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    55aa:	626b      	str	r3, [r5, #36]	; 0x24
    55ac:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    55b0:	f7fd f8d0 	bl	2754 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    55b4:	f7fc fdfc 	bl	21b0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    55b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    55bc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    55be:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    55c0:	f7fd f9f8 	bl	29b4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    55c4:	f7fd f92e 	bl	2824 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    55c8:	f240 1301 	movw	r3, #257	; 0x101
    55cc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    55d0:	ab06      	add	r3, sp, #24
    55d2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    55d4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    55d8:	f003 f8f4 	bl	87c4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    55dc:	4620      	mov	r0, r4
    55de:	f7ff fecf 	bl	5380 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    55e2:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    55e4:	4d16      	ldr	r5, [pc, #88]	; (5640 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    55e6:	f7ff fecb 	bl	5380 <z_sys_init_run_level>
	z_sched_init();
    55ea:	f001 fa21 	bl	6a30 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    55ee:	4b15      	ldr	r3, [pc, #84]	; (5644 <z_cstart+0xd0>)
    55f0:	9305      	str	r3, [sp, #20]
    55f2:	2301      	movs	r3, #1
    55f4:	4914      	ldr	r1, [pc, #80]	; (5648 <z_cstart+0xd4>)
    55f6:	9400      	str	r4, [sp, #0]
    55f8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    55fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5600:	464b      	mov	r3, r9
    5602:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5606:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    5608:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    560a:	f001 fd29 	bl	7060 <z_setup_new_thread>
    560e:	7b6a      	ldrb	r2, [r5, #13]
    5610:	f022 0204 	bic.w	r2, r2, #4
    5614:	736a      	strb	r2, [r5, #13]
    5616:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    5618:	4628      	mov	r0, r5
    561a:	f000 fe09 	bl	6230 <z_ready_thread>
		init_idle_thread(i);
    561e:	4620      	mov	r0, r4
    5620:	f7ff ff58 	bl	54d4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5624:	4b09      	ldr	r3, [pc, #36]	; (564c <z_cstart+0xd8>)
    5626:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5628:	464a      	mov	r2, r9
    562a:	4639      	mov	r1, r7
    562c:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    562e:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    5630:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5634:	f7fc fef6 	bl	2424 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5638:	e000ed00 	.word	0xe000ed00
    563c:	20000bc4 	.word	0x20000bc4
    5640:	20000460 	.word	0x20000460
    5644:	000099de 	.word	0x000099de
    5648:	20001e60 	.word	0x20001e60
    564c:	200003e0 	.word	0x200003e0
    5650:	20002c00 	.word	0x20002c00
    5654:	0000552d 	.word	0x0000552d

00005658 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    5658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    565c:	4d16      	ldr	r5, [pc, #88]	; (56b8 <init_mem_slab_module+0x60>)
    565e:	4c17      	ldr	r4, [pc, #92]	; (56bc <init_mem_slab_module+0x64>)
    5660:	4e17      	ldr	r6, [pc, #92]	; (56c0 <init_mem_slab_module+0x68>)
    5662:	46a8      	mov	r8, r5
    5664:	42ac      	cmp	r4, r5
    5666:	d90c      	bls.n	5682 <init_mem_slab_module+0x2a>
    5668:	4916      	ldr	r1, [pc, #88]	; (56c4 <init_mem_slab_module+0x6c>)
    566a:	4817      	ldr	r0, [pc, #92]	; (56c8 <init_mem_slab_module+0x70>)
    566c:	233c      	movs	r3, #60	; 0x3c
    566e:	4632      	mov	r2, r6
    5670:	f002 fd81 	bl	8176 <printk>
    5674:	4815      	ldr	r0, [pc, #84]	; (56cc <init_mem_slab_module+0x74>)
    5676:	f002 fd7e 	bl	8176 <printk>
    567a:	213c      	movs	r1, #60	; 0x3c
    567c:	4630      	mov	r0, r6
    567e:	f002 fca6 	bl	7fce <assert_post_action>
    5682:	4544      	cmp	r4, r8
    5684:	d302      	bcc.n	568c <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5686:	2000      	movs	r0, #0
	return rc;
}
    5688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    568c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5690:	ea41 0302 	orr.w	r3, r1, r2
    5694:	f013 0303 	ands.w	r3, r3, #3
    5698:	d10b      	bne.n	56b2 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    569a:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    569c:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    569e:	4283      	cmp	r3, r0
    56a0:	d101      	bne.n	56a6 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    56a2:	3420      	adds	r4, #32
    56a4:	e7de      	b.n	5664 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    56a6:	69a7      	ldr	r7, [r4, #24]
    56a8:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    56aa:	3301      	adds	r3, #1
		slab->free_list = p;
    56ac:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    56ae:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    56b0:	e7f5      	b.n	569e <init_mem_slab_module+0x46>
		return -EINVAL;
    56b2:	f06f 0015 	mvn.w	r0, #21
	return rc;
    56b6:	e7e7      	b.n	5688 <init_mem_slab_module+0x30>
    56b8:	200001f0 	.word	0x200001f0
    56bc:	200001f0 	.word	0x200001f0
    56c0:	000099e3 	.word	0x000099e3
    56c4:	00009a08 	.word	0x00009a08
    56c8:	00008fa5 	.word	0x00008fa5
    56cc:	00009a25 	.word	0x00009a25

000056d0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    56d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    56d4:	4604      	mov	r4, r0
    56d6:	460e      	mov	r6, r1
    56d8:	4690      	mov	r8, r2
    56da:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    56dc:	f100 0508 	add.w	r5, r0, #8
    56e0:	f04f 0320 	mov.w	r3, #32
    56e4:	f3ef 8711 	mrs	r7, BASEPRI
    56e8:	f383 8812 	msr	BASEPRI_MAX, r3
    56ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56f0:	4628      	mov	r0, r5
    56f2:	f001 fdf7 	bl	72e4 <z_spin_lock_valid>
    56f6:	b968      	cbnz	r0, 5714 <k_mem_slab_alloc+0x44>
    56f8:	4a24      	ldr	r2, [pc, #144]	; (578c <k_mem_slab_alloc+0xbc>)
    56fa:	4925      	ldr	r1, [pc, #148]	; (5790 <k_mem_slab_alloc+0xc0>)
    56fc:	4825      	ldr	r0, [pc, #148]	; (5794 <k_mem_slab_alloc+0xc4>)
    56fe:	2381      	movs	r3, #129	; 0x81
    5700:	f002 fd39 	bl	8176 <printk>
    5704:	4824      	ldr	r0, [pc, #144]	; (5798 <k_mem_slab_alloc+0xc8>)
    5706:	4629      	mov	r1, r5
    5708:	f002 fd35 	bl	8176 <printk>
    570c:	481f      	ldr	r0, [pc, #124]	; (578c <k_mem_slab_alloc+0xbc>)
    570e:	2181      	movs	r1, #129	; 0x81
    5710:	f002 fc5d 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    5714:	4628      	mov	r0, r5
    5716:	f001 fe03 	bl	7320 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    571a:	69a3      	ldr	r3, [r4, #24]
    571c:	b1eb      	cbz	r3, 575a <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    571e:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5724:	69e3      	ldr	r3, [r4, #28]
    5726:	3301      	adds	r3, #1
    5728:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    572a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    572c:	4628      	mov	r0, r5
    572e:	f001 fde7 	bl	7300 <z_spin_unlock_valid>
    5732:	b968      	cbnz	r0, 5750 <k_mem_slab_alloc+0x80>
    5734:	4a15      	ldr	r2, [pc, #84]	; (578c <k_mem_slab_alloc+0xbc>)
    5736:	4919      	ldr	r1, [pc, #100]	; (579c <k_mem_slab_alloc+0xcc>)
    5738:	4816      	ldr	r0, [pc, #88]	; (5794 <k_mem_slab_alloc+0xc4>)
    573a:	23ac      	movs	r3, #172	; 0xac
    573c:	f002 fd1b 	bl	8176 <printk>
    5740:	4817      	ldr	r0, [pc, #92]	; (57a0 <k_mem_slab_alloc+0xd0>)
    5742:	4629      	mov	r1, r5
    5744:	f002 fd17 	bl	8176 <printk>
    5748:	4810      	ldr	r0, [pc, #64]	; (578c <k_mem_slab_alloc+0xbc>)
    574a:	21ac      	movs	r1, #172	; 0xac
    574c:	f002 fc3f 	bl	7fce <assert_post_action>
	__asm__ volatile(
    5750:	f387 8811 	msr	BASEPRI, r7
    5754:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5758:	e013      	b.n	5782 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    575a:	ea58 0209 	orrs.w	r2, r8, r9
    575e:	d103      	bne.n	5768 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5760:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5762:	f06f 040b 	mvn.w	r4, #11
    5766:	e7e1      	b.n	572c <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5768:	4622      	mov	r2, r4
    576a:	e9cd 8900 	strd	r8, r9, [sp]
    576e:	4639      	mov	r1, r7
    5770:	4628      	mov	r0, r5
    5772:	f000 ff0f 	bl	6594 <z_pend_curr>
		if (result == 0) {
    5776:	4604      	mov	r4, r0
    5778:	b918      	cbnz	r0, 5782 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    577a:	4b0a      	ldr	r3, [pc, #40]	; (57a4 <k_mem_slab_alloc+0xd4>)
    577c:	689b      	ldr	r3, [r3, #8]
    577e:	695b      	ldr	r3, [r3, #20]
    5780:	6033      	str	r3, [r6, #0]
}
    5782:	4620      	mov	r0, r4
    5784:	b003      	add	sp, #12
    5786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    578a:	bf00      	nop
    578c:	000090b8 	.word	0x000090b8
    5790:	0000910a 	.word	0x0000910a
    5794:	00008fa5 	.word	0x00008fa5
    5798:	0000911f 	.word	0x0000911f
    579c:	000090de 	.word	0x000090de
    57a0:	000090f5 	.word	0x000090f5
    57a4:	20000bc4 	.word	0x20000bc4

000057a8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    57a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57ac:	4604      	mov	r4, r0
    57ae:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    57b0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    57b4:	f04f 0320 	mov.w	r3, #32
    57b8:	f3ef 8711 	mrs	r7, BASEPRI
    57bc:	f383 8812 	msr	BASEPRI_MAX, r3
    57c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57c4:	4628      	mov	r0, r5
    57c6:	f001 fd8d 	bl	72e4 <z_spin_lock_valid>
    57ca:	b968      	cbnz	r0, 57e8 <k_mem_slab_free+0x40>
    57cc:	4a22      	ldr	r2, [pc, #136]	; (5858 <k_mem_slab_free+0xb0>)
    57ce:	4923      	ldr	r1, [pc, #140]	; (585c <k_mem_slab_free+0xb4>)
    57d0:	4823      	ldr	r0, [pc, #140]	; (5860 <k_mem_slab_free+0xb8>)
    57d2:	2381      	movs	r3, #129	; 0x81
    57d4:	f002 fccf 	bl	8176 <printk>
    57d8:	4822      	ldr	r0, [pc, #136]	; (5864 <k_mem_slab_free+0xbc>)
    57da:	4629      	mov	r1, r5
    57dc:	f002 fccb 	bl	8176 <printk>
    57e0:	481d      	ldr	r0, [pc, #116]	; (5858 <k_mem_slab_free+0xb0>)
    57e2:	2181      	movs	r1, #129	; 0x81
    57e4:	f002 fbf3 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    57e8:	4628      	mov	r0, r5
    57ea:	f001 fd99 	bl	7320 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    57ee:	f8d4 8018 	ldr.w	r8, [r4, #24]
    57f2:	f1b8 0f00 	cmp.w	r8, #0
    57f6:	d10f      	bne.n	5818 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    57f8:	4620      	mov	r0, r4
    57fa:	f001 f8c9 	bl	6990 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    57fe:	b158      	cbz	r0, 5818 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5800:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5802:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5804:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    5808:	f000 fd12 	bl	6230 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    580c:	4639      	mov	r1, r7
    580e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5814:	f000 bab8 	b.w	5d88 <z_reschedule>
	**(char ***) mem = slab->free_list;
    5818:	6833      	ldr	r3, [r6, #0]
    581a:	69a2      	ldr	r2, [r4, #24]
    581c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    581e:	6833      	ldr	r3, [r6, #0]
    5820:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5822:	69e3      	ldr	r3, [r4, #28]
    5824:	3b01      	subs	r3, #1
    5826:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5828:	4628      	mov	r0, r5
    582a:	f001 fd69 	bl	7300 <z_spin_unlock_valid>
    582e:	b968      	cbnz	r0, 584c <k_mem_slab_free+0xa4>
    5830:	4a09      	ldr	r2, [pc, #36]	; (5858 <k_mem_slab_free+0xb0>)
    5832:	490d      	ldr	r1, [pc, #52]	; (5868 <k_mem_slab_free+0xc0>)
    5834:	480a      	ldr	r0, [pc, #40]	; (5860 <k_mem_slab_free+0xb8>)
    5836:	23ac      	movs	r3, #172	; 0xac
    5838:	f002 fc9d 	bl	8176 <printk>
    583c:	480b      	ldr	r0, [pc, #44]	; (586c <k_mem_slab_free+0xc4>)
    583e:	4629      	mov	r1, r5
    5840:	f002 fc99 	bl	8176 <printk>
    5844:	4804      	ldr	r0, [pc, #16]	; (5858 <k_mem_slab_free+0xb0>)
    5846:	21ac      	movs	r1, #172	; 0xac
    5848:	f002 fbc1 	bl	7fce <assert_post_action>
	__asm__ volatile(
    584c:	f387 8811 	msr	BASEPRI, r7
    5850:	f3bf 8f6f 	isb	sy
}
    5854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5858:	000090b8 	.word	0x000090b8
    585c:	0000910a 	.word	0x0000910a
    5860:	00008fa5 	.word	0x00008fa5
    5864:	0000911f 	.word	0x0000911f
    5868:	000090de 	.word	0x000090de
    586c:	000090f5 	.word	0x000090f5

00005870 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5874:	4604      	mov	r4, r0
    5876:	4616      	mov	r6, r2
    5878:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    587a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    587e:	b163      	cbz	r3, 589a <z_impl_k_mutex_lock+0x2a>
    5880:	4970      	ldr	r1, [pc, #448]	; (5a44 <z_impl_k_mutex_lock+0x1d4>)
    5882:	4a71      	ldr	r2, [pc, #452]	; (5a48 <z_impl_k_mutex_lock+0x1d8>)
    5884:	4871      	ldr	r0, [pc, #452]	; (5a4c <z_impl_k_mutex_lock+0x1dc>)
    5886:	2365      	movs	r3, #101	; 0x65
    5888:	f002 fc75 	bl	8176 <printk>
    588c:	4870      	ldr	r0, [pc, #448]	; (5a50 <z_impl_k_mutex_lock+0x1e0>)
    588e:	f002 fc72 	bl	8176 <printk>
    5892:	486d      	ldr	r0, [pc, #436]	; (5a48 <z_impl_k_mutex_lock+0x1d8>)
    5894:	2165      	movs	r1, #101	; 0x65
    5896:	f002 fb9a 	bl	7fce <assert_post_action>
	__asm__ volatile(
    589a:	f04f 0320 	mov.w	r3, #32
    589e:	f3ef 8811 	mrs	r8, BASEPRI
    58a2:	f383 8812 	msr	BASEPRI_MAX, r3
    58a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58aa:	486a      	ldr	r0, [pc, #424]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    58ac:	f001 fd1a 	bl	72e4 <z_spin_lock_valid>
    58b0:	b968      	cbnz	r0, 58ce <z_impl_k_mutex_lock+0x5e>
    58b2:	4a69      	ldr	r2, [pc, #420]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    58b4:	4969      	ldr	r1, [pc, #420]	; (5a5c <z_impl_k_mutex_lock+0x1ec>)
    58b6:	4865      	ldr	r0, [pc, #404]	; (5a4c <z_impl_k_mutex_lock+0x1dc>)
    58b8:	2381      	movs	r3, #129	; 0x81
    58ba:	f002 fc5c 	bl	8176 <printk>
    58be:	4965      	ldr	r1, [pc, #404]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    58c0:	4867      	ldr	r0, [pc, #412]	; (5a60 <z_impl_k_mutex_lock+0x1f0>)
    58c2:	f002 fc58 	bl	8176 <printk>
    58c6:	4864      	ldr	r0, [pc, #400]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    58c8:	2181      	movs	r1, #129	; 0x81
    58ca:	f002 fb80 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    58ce:	4861      	ldr	r0, [pc, #388]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    58d0:	f001 fd26 	bl	7320 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    58d4:	68e3      	ldr	r3, [r4, #12]
    58d6:	4a63      	ldr	r2, [pc, #396]	; (5a64 <z_impl_k_mutex_lock+0x1f4>)
    58d8:	b1fb      	cbz	r3, 591a <z_impl_k_mutex_lock+0xaa>
    58da:	68a0      	ldr	r0, [r4, #8]
    58dc:	6891      	ldr	r1, [r2, #8]
    58de:	4288      	cmp	r0, r1
    58e0:	d03d      	beq.n	595e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    58e2:	ea56 0307 	orrs.w	r3, r6, r7
    58e6:	d13c      	bne.n	5962 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58e8:	485a      	ldr	r0, [pc, #360]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    58ea:	f001 fd09 	bl	7300 <z_spin_unlock_valid>
    58ee:	b968      	cbnz	r0, 590c <z_impl_k_mutex_lock+0x9c>
    58f0:	4a59      	ldr	r2, [pc, #356]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    58f2:	495d      	ldr	r1, [pc, #372]	; (5a68 <z_impl_k_mutex_lock+0x1f8>)
    58f4:	4855      	ldr	r0, [pc, #340]	; (5a4c <z_impl_k_mutex_lock+0x1dc>)
    58f6:	23ac      	movs	r3, #172	; 0xac
    58f8:	f002 fc3d 	bl	8176 <printk>
    58fc:	4955      	ldr	r1, [pc, #340]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    58fe:	485b      	ldr	r0, [pc, #364]	; (5a6c <z_impl_k_mutex_lock+0x1fc>)
    5900:	f002 fc39 	bl	8176 <printk>
    5904:	4854      	ldr	r0, [pc, #336]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    5906:	21ac      	movs	r1, #172	; 0xac
    5908:	f002 fb61 	bl	7fce <assert_post_action>
	__asm__ volatile(
    590c:	f388 8811 	msr	BASEPRI, r8
    5910:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5914:	f06f 000f 	mvn.w	r0, #15
    5918:	e01e      	b.n	5958 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    591a:	6891      	ldr	r1, [r2, #8]
    591c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5920:	484c      	ldr	r0, [pc, #304]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5922:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5924:	3301      	adds	r3, #1
    5926:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5928:	6893      	ldr	r3, [r2, #8]
    592a:	60a3      	str	r3, [r4, #8]
    592c:	f001 fce8 	bl	7300 <z_spin_unlock_valid>
    5930:	b968      	cbnz	r0, 594e <z_impl_k_mutex_lock+0xde>
    5932:	4a49      	ldr	r2, [pc, #292]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    5934:	494c      	ldr	r1, [pc, #304]	; (5a68 <z_impl_k_mutex_lock+0x1f8>)
    5936:	4845      	ldr	r0, [pc, #276]	; (5a4c <z_impl_k_mutex_lock+0x1dc>)
    5938:	23ac      	movs	r3, #172	; 0xac
    593a:	f002 fc1c 	bl	8176 <printk>
    593e:	4945      	ldr	r1, [pc, #276]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    5940:	484a      	ldr	r0, [pc, #296]	; (5a6c <z_impl_k_mutex_lock+0x1fc>)
    5942:	f002 fc18 	bl	8176 <printk>
    5946:	4844      	ldr	r0, [pc, #272]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    5948:	21ac      	movs	r1, #172	; 0xac
    594a:	f002 fb40 	bl	7fce <assert_post_action>
    594e:	f388 8811 	msr	BASEPRI, r8
    5952:	f3bf 8f6f 	isb	sy
		return 0;
    5956:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5958:	b002      	add	sp, #8
    595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    595e:	6921      	ldr	r1, [r4, #16]
    5960:	e7de      	b.n	5920 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5962:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5966:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    596a:	4299      	cmp	r1, r3
    596c:	bfa8      	it	ge
    596e:	4619      	movge	r1, r3
    5970:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5974:	4291      	cmp	r1, r2
    5976:	bfb8      	it	lt
    5978:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    597a:	428b      	cmp	r3, r1
    597c:	dd44      	ble.n	5a08 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    597e:	f000 fe39 	bl	65f4 <z_set_prio>
    5982:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5984:	e9cd 6700 	strd	r6, r7, [sp]
    5988:	4832      	ldr	r0, [pc, #200]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    598a:	4622      	mov	r2, r4
    598c:	4641      	mov	r1, r8
    598e:	f000 fe01 	bl	6594 <z_pend_curr>
	if (got_mutex == 0) {
    5992:	2800      	cmp	r0, #0
    5994:	d0e0      	beq.n	5958 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    5996:	f04f 0320 	mov.w	r3, #32
    599a:	f3ef 8611 	mrs	r6, BASEPRI
    599e:	f383 8812 	msr	BASEPRI_MAX, r3
    59a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59a6:	482b      	ldr	r0, [pc, #172]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    59a8:	f001 fc9c 	bl	72e4 <z_spin_lock_valid>
    59ac:	b968      	cbnz	r0, 59ca <z_impl_k_mutex_lock+0x15a>
    59ae:	4a2a      	ldr	r2, [pc, #168]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    59b0:	492a      	ldr	r1, [pc, #168]	; (5a5c <z_impl_k_mutex_lock+0x1ec>)
    59b2:	4826      	ldr	r0, [pc, #152]	; (5a4c <z_impl_k_mutex_lock+0x1dc>)
    59b4:	2381      	movs	r3, #129	; 0x81
    59b6:	f002 fbde 	bl	8176 <printk>
    59ba:	4926      	ldr	r1, [pc, #152]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    59bc:	4828      	ldr	r0, [pc, #160]	; (5a60 <z_impl_k_mutex_lock+0x1f0>)
    59be:	f002 fbda 	bl	8176 <printk>
    59c2:	4825      	ldr	r0, [pc, #148]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    59c4:	2181      	movs	r1, #129	; 0x81
    59c6:	f002 fb02 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    59ca:	4822      	ldr	r0, [pc, #136]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    59cc:	f001 fca8 	bl	7320 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    59d0:	6823      	ldr	r3, [r4, #0]
    59d2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59d4:	429c      	cmp	r4, r3
    59d6:	d00a      	beq.n	59ee <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    59d8:	b14b      	cbz	r3, 59ee <z_impl_k_mutex_lock+0x17e>
    59da:	f993 300e 	ldrsb.w	r3, [r3, #14]
    59de:	4299      	cmp	r1, r3
    59e0:	bfa8      	it	ge
    59e2:	4619      	movge	r1, r3
    59e4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    59e8:	4299      	cmp	r1, r3
    59ea:	bfb8      	it	lt
    59ec:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    59ee:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    59f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    59f4:	4299      	cmp	r1, r3
    59f6:	d109      	bne.n	5a0c <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    59f8:	b16d      	cbz	r5, 5a16 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    59fa:	4816      	ldr	r0, [pc, #88]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    59fc:	4631      	mov	r1, r6
    59fe:	f000 f9c3 	bl	5d88 <z_reschedule>
	return -EAGAIN;
    5a02:	f06f 000a 	mvn.w	r0, #10
    5a06:	e7a7      	b.n	5958 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    5a08:	2500      	movs	r5, #0
    5a0a:	e7bb      	b.n	5984 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    5a0c:	f000 fdf2 	bl	65f4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5a10:	2800      	cmp	r0, #0
    5a12:	d1f2      	bne.n	59fa <z_impl_k_mutex_lock+0x18a>
    5a14:	e7f0      	b.n	59f8 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a16:	480f      	ldr	r0, [pc, #60]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    5a18:	f001 fc72 	bl	7300 <z_spin_unlock_valid>
    5a1c:	b968      	cbnz	r0, 5a3a <z_impl_k_mutex_lock+0x1ca>
    5a1e:	4a0e      	ldr	r2, [pc, #56]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    5a20:	4911      	ldr	r1, [pc, #68]	; (5a68 <z_impl_k_mutex_lock+0x1f8>)
    5a22:	480a      	ldr	r0, [pc, #40]	; (5a4c <z_impl_k_mutex_lock+0x1dc>)
    5a24:	23ac      	movs	r3, #172	; 0xac
    5a26:	f002 fba6 	bl	8176 <printk>
    5a2a:	490a      	ldr	r1, [pc, #40]	; (5a54 <z_impl_k_mutex_lock+0x1e4>)
    5a2c:	480f      	ldr	r0, [pc, #60]	; (5a6c <z_impl_k_mutex_lock+0x1fc>)
    5a2e:	f002 fba2 	bl	8176 <printk>
    5a32:	4809      	ldr	r0, [pc, #36]	; (5a58 <z_impl_k_mutex_lock+0x1e8>)
    5a34:	21ac      	movs	r1, #172	; 0xac
    5a36:	f002 faca 	bl	7fce <assert_post_action>
	__asm__ volatile(
    5a3a:	f386 8811 	msr	BASEPRI, r6
    5a3e:	f3bf 8f6f 	isb	sy
    5a42:	e7de      	b.n	5a02 <z_impl_k_mutex_lock+0x192>
    5a44:	00009a66 	.word	0x00009a66
    5a48:	00009a44 	.word	0x00009a44
    5a4c:	00008fa5 	.word	0x00008fa5
    5a50:	00009a78 	.word	0x00009a78
    5a54:	20000bec 	.word	0x20000bec
    5a58:	000090b8 	.word	0x000090b8
    5a5c:	0000910a 	.word	0x0000910a
    5a60:	0000911f 	.word	0x0000911f
    5a64:	20000bc4 	.word	0x20000bc4
    5a68:	000090de 	.word	0x000090de
    5a6c:	000090f5 	.word	0x000090f5

00005a70 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5a70:	b538      	push	{r3, r4, r5, lr}
    5a72:	4604      	mov	r4, r0
    5a74:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5a78:	b163      	cbz	r3, 5a94 <z_impl_k_mutex_unlock+0x24>
    5a7a:	4952      	ldr	r1, [pc, #328]	; (5bc4 <z_impl_k_mutex_unlock+0x154>)
    5a7c:	4a52      	ldr	r2, [pc, #328]	; (5bc8 <z_impl_k_mutex_unlock+0x158>)
    5a7e:	4853      	ldr	r0, [pc, #332]	; (5bcc <z_impl_k_mutex_unlock+0x15c>)
    5a80:	23c7      	movs	r3, #199	; 0xc7
    5a82:	f002 fb78 	bl	8176 <printk>
    5a86:	4852      	ldr	r0, [pc, #328]	; (5bd0 <z_impl_k_mutex_unlock+0x160>)
    5a88:	f002 fb75 	bl	8176 <printk>
    5a8c:	484e      	ldr	r0, [pc, #312]	; (5bc8 <z_impl_k_mutex_unlock+0x158>)
    5a8e:	21c7      	movs	r1, #199	; 0xc7
    5a90:	f002 fa9d 	bl	7fce <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5a94:	68a3      	ldr	r3, [r4, #8]
    5a96:	2b00      	cmp	r3, #0
    5a98:	f000 808d 	beq.w	5bb6 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5a9c:	4d4d      	ldr	r5, [pc, #308]	; (5bd4 <z_impl_k_mutex_unlock+0x164>)
    5a9e:	68aa      	ldr	r2, [r5, #8]
    5aa0:	4293      	cmp	r3, r2
    5aa2:	f040 808b 	bne.w	5bbc <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5aa6:	68e3      	ldr	r3, [r4, #12]
    5aa8:	b94b      	cbnz	r3, 5abe <z_impl_k_mutex_unlock+0x4e>
    5aaa:	494b      	ldr	r1, [pc, #300]	; (5bd8 <z_impl_k_mutex_unlock+0x168>)
    5aac:	4847      	ldr	r0, [pc, #284]	; (5bcc <z_impl_k_mutex_unlock+0x15c>)
    5aae:	4a46      	ldr	r2, [pc, #280]	; (5bc8 <z_impl_k_mutex_unlock+0x158>)
    5ab0:	23df      	movs	r3, #223	; 0xdf
    5ab2:	f002 fb60 	bl	8176 <printk>
    5ab6:	4844      	ldr	r0, [pc, #272]	; (5bc8 <z_impl_k_mutex_unlock+0x158>)
    5ab8:	21df      	movs	r1, #223	; 0xdf
    5aba:	f002 fa88 	bl	7fce <assert_post_action>
    5abe:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5ac2:	b163      	cbz	r3, 5ade <z_impl_k_mutex_unlock+0x6e>
    5ac4:	493f      	ldr	r1, [pc, #252]	; (5bc4 <z_impl_k_mutex_unlock+0x154>)
    5ac6:	4a45      	ldr	r2, [pc, #276]	; (5bdc <z_impl_k_mutex_unlock+0x16c>)
    5ac8:	4840      	ldr	r0, [pc, #256]	; (5bcc <z_impl_k_mutex_unlock+0x15c>)
    5aca:	23fd      	movs	r3, #253	; 0xfd
    5acc:	f002 fb53 	bl	8176 <printk>
    5ad0:	4843      	ldr	r0, [pc, #268]	; (5be0 <z_impl_k_mutex_unlock+0x170>)
    5ad2:	f002 fb50 	bl	8176 <printk>
    5ad6:	4841      	ldr	r0, [pc, #260]	; (5bdc <z_impl_k_mutex_unlock+0x16c>)
    5ad8:	21fd      	movs	r1, #253	; 0xfd
    5ada:	f002 fa78 	bl	7fce <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5ade:	68ab      	ldr	r3, [r5, #8]
    5ae0:	7bdb      	ldrb	r3, [r3, #15]
    5ae2:	2b01      	cmp	r3, #1
    5ae4:	d10c      	bne.n	5b00 <z_impl_k_mutex_unlock+0x90>
    5ae6:	493f      	ldr	r1, [pc, #252]	; (5be4 <z_impl_k_mutex_unlock+0x174>)
    5ae8:	4a3c      	ldr	r2, [pc, #240]	; (5bdc <z_impl_k_mutex_unlock+0x16c>)
    5aea:	4838      	ldr	r0, [pc, #224]	; (5bcc <z_impl_k_mutex_unlock+0x15c>)
    5aec:	23fe      	movs	r3, #254	; 0xfe
    5aee:	f002 fb42 	bl	8176 <printk>
    5af2:	483b      	ldr	r0, [pc, #236]	; (5be0 <z_impl_k_mutex_unlock+0x170>)
    5af4:	f002 fb3f 	bl	8176 <printk>
    5af8:	4838      	ldr	r0, [pc, #224]	; (5bdc <z_impl_k_mutex_unlock+0x16c>)
    5afa:	21fe      	movs	r1, #254	; 0xfe
    5afc:	f002 fa67 	bl	7fce <assert_post_action>

	--_current->base.sched_locked;
    5b00:	68aa      	ldr	r2, [r5, #8]
    5b02:	7bd3      	ldrb	r3, [r2, #15]
    5b04:	3b01      	subs	r3, #1
    5b06:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5b08:	68e3      	ldr	r3, [r4, #12]
    5b0a:	2b01      	cmp	r3, #1
    5b0c:	d905      	bls.n	5b1a <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    5b0e:	3b01      	subs	r3, #1
    5b10:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5b12:	f000 fe75 	bl	6800 <k_sched_unlock>

	return 0;
    5b16:	2000      	movs	r0, #0
}
    5b18:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5b1a:	f04f 0320 	mov.w	r3, #32
    5b1e:	f3ef 8511 	mrs	r5, BASEPRI
    5b22:	f383 8812 	msr	BASEPRI_MAX, r3
    5b26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b2a:	482f      	ldr	r0, [pc, #188]	; (5be8 <z_impl_k_mutex_unlock+0x178>)
    5b2c:	f001 fbda 	bl	72e4 <z_spin_lock_valid>
    5b30:	b968      	cbnz	r0, 5b4e <z_impl_k_mutex_unlock+0xde>
    5b32:	4a2e      	ldr	r2, [pc, #184]	; (5bec <z_impl_k_mutex_unlock+0x17c>)
    5b34:	492e      	ldr	r1, [pc, #184]	; (5bf0 <z_impl_k_mutex_unlock+0x180>)
    5b36:	4825      	ldr	r0, [pc, #148]	; (5bcc <z_impl_k_mutex_unlock+0x15c>)
    5b38:	2381      	movs	r3, #129	; 0x81
    5b3a:	f002 fb1c 	bl	8176 <printk>
    5b3e:	492a      	ldr	r1, [pc, #168]	; (5be8 <z_impl_k_mutex_unlock+0x178>)
    5b40:	482c      	ldr	r0, [pc, #176]	; (5bf4 <z_impl_k_mutex_unlock+0x184>)
    5b42:	f002 fb18 	bl	8176 <printk>
    5b46:	4829      	ldr	r0, [pc, #164]	; (5bec <z_impl_k_mutex_unlock+0x17c>)
    5b48:	2181      	movs	r1, #129	; 0x81
    5b4a:	f002 fa40 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    5b4e:	4826      	ldr	r0, [pc, #152]	; (5be8 <z_impl_k_mutex_unlock+0x178>)
    5b50:	f001 fbe6 	bl	7320 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5b54:	68a0      	ldr	r0, [r4, #8]
    5b56:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    5b58:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5b5c:	4299      	cmp	r1, r3
    5b5e:	d001      	beq.n	5b64 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    5b60:	f000 fd48 	bl	65f4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5b64:	4620      	mov	r0, r4
    5b66:	f000 ff13 	bl	6990 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5b6a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5b6c:	b158      	cbz	r0, 5b86 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    5b6e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5b72:	6122      	str	r2, [r4, #16]
    5b74:	2200      	movs	r2, #0
    5b76:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5b78:	f000 fb5a 	bl	6230 <z_ready_thread>
		z_reschedule(&lock, key);
    5b7c:	481a      	ldr	r0, [pc, #104]	; (5be8 <z_impl_k_mutex_unlock+0x178>)
    5b7e:	4629      	mov	r1, r5
    5b80:	f000 f902 	bl	5d88 <z_reschedule>
    5b84:	e7c5      	b.n	5b12 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    5b86:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b88:	4817      	ldr	r0, [pc, #92]	; (5be8 <z_impl_k_mutex_unlock+0x178>)
    5b8a:	f001 fbb9 	bl	7300 <z_spin_unlock_valid>
    5b8e:	b968      	cbnz	r0, 5bac <z_impl_k_mutex_unlock+0x13c>
    5b90:	4a16      	ldr	r2, [pc, #88]	; (5bec <z_impl_k_mutex_unlock+0x17c>)
    5b92:	4919      	ldr	r1, [pc, #100]	; (5bf8 <z_impl_k_mutex_unlock+0x188>)
    5b94:	480d      	ldr	r0, [pc, #52]	; (5bcc <z_impl_k_mutex_unlock+0x15c>)
    5b96:	23ac      	movs	r3, #172	; 0xac
    5b98:	f002 faed 	bl	8176 <printk>
    5b9c:	4912      	ldr	r1, [pc, #72]	; (5be8 <z_impl_k_mutex_unlock+0x178>)
    5b9e:	4817      	ldr	r0, [pc, #92]	; (5bfc <z_impl_k_mutex_unlock+0x18c>)
    5ba0:	f002 fae9 	bl	8176 <printk>
    5ba4:	4811      	ldr	r0, [pc, #68]	; (5bec <z_impl_k_mutex_unlock+0x17c>)
    5ba6:	21ac      	movs	r1, #172	; 0xac
    5ba8:	f002 fa11 	bl	7fce <assert_post_action>
	__asm__ volatile(
    5bac:	f385 8811 	msr	BASEPRI, r5
    5bb0:	f3bf 8f6f 	isb	sy
    5bb4:	e7ad      	b.n	5b12 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    5bb6:	f06f 0015 	mvn.w	r0, #21
    5bba:	e7ad      	b.n	5b18 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5bc0:	e7aa      	b.n	5b18 <z_impl_k_mutex_unlock+0xa8>
    5bc2:	bf00      	nop
    5bc4:	00009a66 	.word	0x00009a66
    5bc8:	00009a44 	.word	0x00009a44
    5bcc:	00008fa5 	.word	0x00008fa5
    5bd0:	00009a78 	.word	0x00009a78
    5bd4:	20000bc4 	.word	0x20000bc4
    5bd8:	00009a9d 	.word	0x00009a9d
    5bdc:	00009ab4 	.word	0x00009ab4
    5be0:	00009adf 	.word	0x00009adf
    5be4:	00009ae2 	.word	0x00009ae2
    5be8:	20000bec 	.word	0x20000bec
    5bec:	000090b8 	.word	0x000090b8
    5bf0:	0000910a 	.word	0x0000910a
    5bf4:	0000911f 	.word	0x0000911f
    5bf8:	000090de 	.word	0x000090de
    5bfc:	000090f5 	.word	0x000090f5

00005c00 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    5c00:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    5c02:	4c08      	ldr	r4, [pc, #32]	; (5c24 <z_reset_time_slice+0x24>)
    5c04:	6823      	ldr	r3, [r4, #0]
    5c06:	b15b      	cbz	r3, 5c20 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5c08:	f7fe fa84 	bl	4114 <sys_clock_elapsed>
    5c0c:	4603      	mov	r3, r0
    5c0e:	6820      	ldr	r0, [r4, #0]
    5c10:	4a05      	ldr	r2, [pc, #20]	; (5c28 <z_reset_time_slice+0x28>)
    5c12:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    5c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5c18:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    5c1a:	2100      	movs	r1, #0
    5c1c:	f001 bd42 	b.w	76a4 <z_set_timeout_expiry>
}
    5c20:	bd10      	pop	{r4, pc}
    5c22:	bf00      	nop
    5c24:	20000bfc 	.word	0x20000bfc
    5c28:	20000bc4 	.word	0x20000bc4

00005c2c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c2e:	4604      	mov	r4, r0
    5c30:	460d      	mov	r5, r1
	__asm__ volatile(
    5c32:	f04f 0320 	mov.w	r3, #32
    5c36:	f3ef 8611 	mrs	r6, BASEPRI
    5c3a:	f383 8812 	msr	BASEPRI_MAX, r3
    5c3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c42:	4823      	ldr	r0, [pc, #140]	; (5cd0 <k_sched_time_slice_set+0xa4>)
    5c44:	f001 fb4e 	bl	72e4 <z_spin_lock_valid>
    5c48:	b968      	cbnz	r0, 5c66 <k_sched_time_slice_set+0x3a>
    5c4a:	4a22      	ldr	r2, [pc, #136]	; (5cd4 <k_sched_time_slice_set+0xa8>)
    5c4c:	4922      	ldr	r1, [pc, #136]	; (5cd8 <k_sched_time_slice_set+0xac>)
    5c4e:	4823      	ldr	r0, [pc, #140]	; (5cdc <k_sched_time_slice_set+0xb0>)
    5c50:	2381      	movs	r3, #129	; 0x81
    5c52:	f002 fa90 	bl	8176 <printk>
    5c56:	491e      	ldr	r1, [pc, #120]	; (5cd0 <k_sched_time_slice_set+0xa4>)
    5c58:	4821      	ldr	r0, [pc, #132]	; (5ce0 <k_sched_time_slice_set+0xb4>)
    5c5a:	f002 fa8c 	bl	8176 <printk>
    5c5e:	481d      	ldr	r0, [pc, #116]	; (5cd4 <k_sched_time_slice_set+0xa8>)
    5c60:	2181      	movs	r1, #129	; 0x81
    5c62:	f002 f9b4 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    5c66:	481a      	ldr	r0, [pc, #104]	; (5cd0 <k_sched_time_slice_set+0xa4>)
    5c68:	f001 fb5a 	bl	7320 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5c6c:	4b1d      	ldr	r3, [pc, #116]	; (5ce4 <k_sched_time_slice_set+0xb8>)
    5c6e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5c70:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5c74:	f240 30e7 	movw	r0, #999	; 0x3e7
    5c78:	2100      	movs	r1, #0
    5c7a:	611a      	str	r2, [r3, #16]
    5c7c:	fbe7 0104 	umlal	r0, r1, r7, r4
    5c80:	2300      	movs	r3, #0
    5c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c86:	f7fa fe29 	bl	8dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5c8a:	2c00      	cmp	r4, #0
    5c8c:	4b16      	ldr	r3, [pc, #88]	; (5ce8 <k_sched_time_slice_set+0xbc>)
    5c8e:	dc1b      	bgt.n	5cc8 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    5c90:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5c92:	4b16      	ldr	r3, [pc, #88]	; (5cec <k_sched_time_slice_set+0xc0>)
    5c94:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5c96:	f7ff ffb3 	bl	5c00 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c9a:	480d      	ldr	r0, [pc, #52]	; (5cd0 <k_sched_time_slice_set+0xa4>)
    5c9c:	f001 fb30 	bl	7300 <z_spin_unlock_valid>
    5ca0:	b968      	cbnz	r0, 5cbe <k_sched_time_slice_set+0x92>
    5ca2:	4a0c      	ldr	r2, [pc, #48]	; (5cd4 <k_sched_time_slice_set+0xa8>)
    5ca4:	4912      	ldr	r1, [pc, #72]	; (5cf0 <k_sched_time_slice_set+0xc4>)
    5ca6:	480d      	ldr	r0, [pc, #52]	; (5cdc <k_sched_time_slice_set+0xb0>)
    5ca8:	23ac      	movs	r3, #172	; 0xac
    5caa:	f002 fa64 	bl	8176 <printk>
    5cae:	4908      	ldr	r1, [pc, #32]	; (5cd0 <k_sched_time_slice_set+0xa4>)
    5cb0:	4810      	ldr	r0, [pc, #64]	; (5cf4 <k_sched_time_slice_set+0xc8>)
    5cb2:	f002 fa60 	bl	8176 <printk>
    5cb6:	4807      	ldr	r0, [pc, #28]	; (5cd4 <k_sched_time_slice_set+0xa8>)
    5cb8:	21ac      	movs	r1, #172	; 0xac
    5cba:	f002 f988 	bl	7fce <assert_post_action>
	__asm__ volatile(
    5cbe:	f386 8811 	msr	BASEPRI, r6
    5cc2:	f3bf 8f6f 	isb	sy
	}
}
    5cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    5cc8:	2802      	cmp	r0, #2
    5cca:	bfb8      	it	lt
    5ccc:	2002      	movlt	r0, #2
    5cce:	e7df      	b.n	5c90 <k_sched_time_slice_set+0x64>
    5cd0:	20000bf4 	.word	0x20000bf4
    5cd4:	000090b8 	.word	0x000090b8
    5cd8:	0000910a 	.word	0x0000910a
    5cdc:	00008fa5 	.word	0x00008fa5
    5ce0:	0000911f 	.word	0x0000911f
    5ce4:	20000bc4 	.word	0x20000bc4
    5ce8:	20000bfc 	.word	0x20000bfc
    5cec:	20000bf8 	.word	0x20000bf8
    5cf0:	000090de 	.word	0x000090de
    5cf4:	000090f5 	.word	0x000090f5

00005cf8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    5cf8:	b538      	push	{r3, r4, r5, lr}
    5cfa:	4604      	mov	r4, r0
	__asm__ volatile(
    5cfc:	f04f 0320 	mov.w	r3, #32
    5d00:	f3ef 8511 	mrs	r5, BASEPRI
    5d04:	f383 8812 	msr	BASEPRI_MAX, r3
    5d08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d0c:	4817      	ldr	r0, [pc, #92]	; (5d6c <z_unpend_thread_no_timeout+0x74>)
    5d0e:	f001 fae9 	bl	72e4 <z_spin_lock_valid>
    5d12:	b968      	cbnz	r0, 5d30 <z_unpend_thread_no_timeout+0x38>
    5d14:	4a16      	ldr	r2, [pc, #88]	; (5d70 <z_unpend_thread_no_timeout+0x78>)
    5d16:	4917      	ldr	r1, [pc, #92]	; (5d74 <z_unpend_thread_no_timeout+0x7c>)
    5d18:	4817      	ldr	r0, [pc, #92]	; (5d78 <z_unpend_thread_no_timeout+0x80>)
    5d1a:	2381      	movs	r3, #129	; 0x81
    5d1c:	f002 fa2b 	bl	8176 <printk>
    5d20:	4912      	ldr	r1, [pc, #72]	; (5d6c <z_unpend_thread_no_timeout+0x74>)
    5d22:	4816      	ldr	r0, [pc, #88]	; (5d7c <z_unpend_thread_no_timeout+0x84>)
    5d24:	f002 fa27 	bl	8176 <printk>
    5d28:	4811      	ldr	r0, [pc, #68]	; (5d70 <z_unpend_thread_no_timeout+0x78>)
    5d2a:	2181      	movs	r1, #129	; 0x81
    5d2c:	f002 f94f 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    5d30:	480e      	ldr	r0, [pc, #56]	; (5d6c <z_unpend_thread_no_timeout+0x74>)
    5d32:	f001 faf5 	bl	7320 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    5d36:	4620      	mov	r0, r4
    5d38:	f000 f900 	bl	5f3c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d3c:	480b      	ldr	r0, [pc, #44]	; (5d6c <z_unpend_thread_no_timeout+0x74>)
    5d3e:	f001 fadf 	bl	7300 <z_spin_unlock_valid>
    5d42:	b968      	cbnz	r0, 5d60 <z_unpend_thread_no_timeout+0x68>
    5d44:	4a0a      	ldr	r2, [pc, #40]	; (5d70 <z_unpend_thread_no_timeout+0x78>)
    5d46:	490e      	ldr	r1, [pc, #56]	; (5d80 <z_unpend_thread_no_timeout+0x88>)
    5d48:	480b      	ldr	r0, [pc, #44]	; (5d78 <z_unpend_thread_no_timeout+0x80>)
    5d4a:	23ac      	movs	r3, #172	; 0xac
    5d4c:	f002 fa13 	bl	8176 <printk>
    5d50:	4906      	ldr	r1, [pc, #24]	; (5d6c <z_unpend_thread_no_timeout+0x74>)
    5d52:	480c      	ldr	r0, [pc, #48]	; (5d84 <z_unpend_thread_no_timeout+0x8c>)
    5d54:	f002 fa0f 	bl	8176 <printk>
    5d58:	4805      	ldr	r0, [pc, #20]	; (5d70 <z_unpend_thread_no_timeout+0x78>)
    5d5a:	21ac      	movs	r1, #172	; 0xac
    5d5c:	f002 f937 	bl	7fce <assert_post_action>
	__asm__ volatile(
    5d60:	f385 8811 	msr	BASEPRI, r5
    5d64:	f3bf 8f6f 	isb	sy
	}
}
    5d68:	bd38      	pop	{r3, r4, r5, pc}
    5d6a:	bf00      	nop
    5d6c:	20000bf4 	.word	0x20000bf4
    5d70:	000090b8 	.word	0x000090b8
    5d74:	0000910a 	.word	0x0000910a
    5d78:	00008fa5 	.word	0x00008fa5
    5d7c:	0000911f 	.word	0x0000911f
    5d80:	000090de 	.word	0x000090de
    5d84:	000090f5 	.word	0x000090f5

00005d88 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    5d88:	b538      	push	{r3, r4, r5, lr}
    5d8a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5d8c:	460d      	mov	r5, r1
    5d8e:	b9e9      	cbnz	r1, 5dcc <z_reschedule+0x44>
    5d90:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    5d94:	b9d3      	cbnz	r3, 5dcc <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    5d96:	4b19      	ldr	r3, [pc, #100]	; (5dfc <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    5d98:	69da      	ldr	r2, [r3, #28]
    5d9a:	689b      	ldr	r3, [r3, #8]
    5d9c:	429a      	cmp	r2, r3
    5d9e:	d015      	beq.n	5dcc <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5da0:	f001 faae 	bl	7300 <z_spin_unlock_valid>
    5da4:	b968      	cbnz	r0, 5dc2 <z_reschedule+0x3a>
    5da6:	4a16      	ldr	r2, [pc, #88]	; (5e00 <z_reschedule+0x78>)
    5da8:	4916      	ldr	r1, [pc, #88]	; (5e04 <z_reschedule+0x7c>)
    5daa:	4817      	ldr	r0, [pc, #92]	; (5e08 <z_reschedule+0x80>)
    5dac:	23c3      	movs	r3, #195	; 0xc3
    5dae:	f002 f9e2 	bl	8176 <printk>
    5db2:	4816      	ldr	r0, [pc, #88]	; (5e0c <z_reschedule+0x84>)
    5db4:	4621      	mov	r1, r4
    5db6:	f002 f9de 	bl	8176 <printk>
    5dba:	4811      	ldr	r0, [pc, #68]	; (5e00 <z_reschedule+0x78>)
    5dbc:	21c3      	movs	r1, #195	; 0xc3
    5dbe:	f002 f906 	bl	7fce <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    5dc6:	2000      	movs	r0, #0
    5dc8:	f7fc badc 	b.w	2384 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5dcc:	4620      	mov	r0, r4
    5dce:	f001 fa97 	bl	7300 <z_spin_unlock_valid>
    5dd2:	b968      	cbnz	r0, 5df0 <z_reschedule+0x68>
    5dd4:	4a0a      	ldr	r2, [pc, #40]	; (5e00 <z_reschedule+0x78>)
    5dd6:	490b      	ldr	r1, [pc, #44]	; (5e04 <z_reschedule+0x7c>)
    5dd8:	480b      	ldr	r0, [pc, #44]	; (5e08 <z_reschedule+0x80>)
    5dda:	23ac      	movs	r3, #172	; 0xac
    5ddc:	f002 f9cb 	bl	8176 <printk>
    5de0:	480a      	ldr	r0, [pc, #40]	; (5e0c <z_reschedule+0x84>)
    5de2:	4621      	mov	r1, r4
    5de4:	f002 f9c7 	bl	8176 <printk>
    5de8:	4805      	ldr	r0, [pc, #20]	; (5e00 <z_reschedule+0x78>)
    5dea:	21ac      	movs	r1, #172	; 0xac
    5dec:	f002 f8ef 	bl	7fce <assert_post_action>
    5df0:	f385 8811 	msr	BASEPRI, r5
    5df4:	f3bf 8f6f 	isb	sy
    5df8:	bd38      	pop	{r3, r4, r5, pc}
    5dfa:	bf00      	nop
    5dfc:	20000bc4 	.word	0x20000bc4
    5e00:	000090b8 	.word	0x000090b8
    5e04:	000090de 	.word	0x000090de
    5e08:	00008fa5 	.word	0x00008fa5
    5e0c:	000090f5 	.word	0x000090f5

00005e10 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5e10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5e12:	f04f 0320 	mov.w	r3, #32
    5e16:	f3ef 8511 	mrs	r5, BASEPRI
    5e1a:	f383 8812 	msr	BASEPRI_MAX, r3
    5e1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e22:	4829      	ldr	r0, [pc, #164]	; (5ec8 <k_sched_lock+0xb8>)
    5e24:	f001 fa5e 	bl	72e4 <z_spin_lock_valid>
    5e28:	b968      	cbnz	r0, 5e46 <k_sched_lock+0x36>
    5e2a:	4a28      	ldr	r2, [pc, #160]	; (5ecc <k_sched_lock+0xbc>)
    5e2c:	4928      	ldr	r1, [pc, #160]	; (5ed0 <k_sched_lock+0xc0>)
    5e2e:	4829      	ldr	r0, [pc, #164]	; (5ed4 <k_sched_lock+0xc4>)
    5e30:	2381      	movs	r3, #129	; 0x81
    5e32:	f002 f9a0 	bl	8176 <printk>
    5e36:	4924      	ldr	r1, [pc, #144]	; (5ec8 <k_sched_lock+0xb8>)
    5e38:	4827      	ldr	r0, [pc, #156]	; (5ed8 <k_sched_lock+0xc8>)
    5e3a:	f002 f99c 	bl	8176 <printk>
    5e3e:	4823      	ldr	r0, [pc, #140]	; (5ecc <k_sched_lock+0xbc>)
    5e40:	2181      	movs	r1, #129	; 0x81
    5e42:	f002 f8c4 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    5e46:	4820      	ldr	r0, [pc, #128]	; (5ec8 <k_sched_lock+0xb8>)
    5e48:	f001 fa6a 	bl	7320 <z_spin_lock_set_owner>
    5e4c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5e50:	b163      	cbz	r3, 5e6c <k_sched_lock+0x5c>
    5e52:	4922      	ldr	r1, [pc, #136]	; (5edc <k_sched_lock+0xcc>)
    5e54:	4a22      	ldr	r2, [pc, #136]	; (5ee0 <k_sched_lock+0xd0>)
    5e56:	481f      	ldr	r0, [pc, #124]	; (5ed4 <k_sched_lock+0xc4>)
    5e58:	23fd      	movs	r3, #253	; 0xfd
    5e5a:	f002 f98c 	bl	8176 <printk>
    5e5e:	4821      	ldr	r0, [pc, #132]	; (5ee4 <k_sched_lock+0xd4>)
    5e60:	f002 f989 	bl	8176 <printk>
    5e64:	481e      	ldr	r0, [pc, #120]	; (5ee0 <k_sched_lock+0xd0>)
    5e66:	21fd      	movs	r1, #253	; 0xfd
    5e68:	f002 f8b1 	bl	7fce <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5e6c:	4c1e      	ldr	r4, [pc, #120]	; (5ee8 <k_sched_lock+0xd8>)
    5e6e:	68a2      	ldr	r2, [r4, #8]
    5e70:	7bd2      	ldrb	r2, [r2, #15]
    5e72:	2a01      	cmp	r2, #1
    5e74:	d10c      	bne.n	5e90 <k_sched_lock+0x80>
    5e76:	491d      	ldr	r1, [pc, #116]	; (5eec <k_sched_lock+0xdc>)
    5e78:	4a19      	ldr	r2, [pc, #100]	; (5ee0 <k_sched_lock+0xd0>)
    5e7a:	4816      	ldr	r0, [pc, #88]	; (5ed4 <k_sched_lock+0xc4>)
    5e7c:	23fe      	movs	r3, #254	; 0xfe
    5e7e:	f002 f97a 	bl	8176 <printk>
    5e82:	4818      	ldr	r0, [pc, #96]	; (5ee4 <k_sched_lock+0xd4>)
    5e84:	f002 f977 	bl	8176 <printk>
    5e88:	4815      	ldr	r0, [pc, #84]	; (5ee0 <k_sched_lock+0xd0>)
    5e8a:	21fe      	movs	r1, #254	; 0xfe
    5e8c:	f002 f89f 	bl	7fce <assert_post_action>
	--_current->base.sched_locked;
    5e90:	68a2      	ldr	r2, [r4, #8]
    5e92:	7bd3      	ldrb	r3, [r2, #15]
    5e94:	3b01      	subs	r3, #1
    5e96:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e98:	480b      	ldr	r0, [pc, #44]	; (5ec8 <k_sched_lock+0xb8>)
    5e9a:	f001 fa31 	bl	7300 <z_spin_unlock_valid>
    5e9e:	b968      	cbnz	r0, 5ebc <k_sched_lock+0xac>
    5ea0:	4a0a      	ldr	r2, [pc, #40]	; (5ecc <k_sched_lock+0xbc>)
    5ea2:	4913      	ldr	r1, [pc, #76]	; (5ef0 <k_sched_lock+0xe0>)
    5ea4:	480b      	ldr	r0, [pc, #44]	; (5ed4 <k_sched_lock+0xc4>)
    5ea6:	23ac      	movs	r3, #172	; 0xac
    5ea8:	f002 f965 	bl	8176 <printk>
    5eac:	4906      	ldr	r1, [pc, #24]	; (5ec8 <k_sched_lock+0xb8>)
    5eae:	4811      	ldr	r0, [pc, #68]	; (5ef4 <k_sched_lock+0xe4>)
    5eb0:	f002 f961 	bl	8176 <printk>
    5eb4:	4805      	ldr	r0, [pc, #20]	; (5ecc <k_sched_lock+0xbc>)
    5eb6:	21ac      	movs	r1, #172	; 0xac
    5eb8:	f002 f889 	bl	7fce <assert_post_action>
	__asm__ volatile(
    5ebc:	f385 8811 	msr	BASEPRI, r5
    5ec0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5ec4:	bd38      	pop	{r3, r4, r5, pc}
    5ec6:	bf00      	nop
    5ec8:	20000bf4 	.word	0x20000bf4
    5ecc:	000090b8 	.word	0x000090b8
    5ed0:	0000910a 	.word	0x0000910a
    5ed4:	00008fa5 	.word	0x00008fa5
    5ed8:	0000911f 	.word	0x0000911f
    5edc:	00009a66 	.word	0x00009a66
    5ee0:	00009ab4 	.word	0x00009ab4
    5ee4:	00009adf 	.word	0x00009adf
    5ee8:	20000bc4 	.word	0x20000bc4
    5eec:	00009ae2 	.word	0x00009ae2
    5ef0:	000090de 	.word	0x000090de
    5ef4:	000090f5 	.word	0x000090f5

00005ef8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5ef8:	4b0c      	ldr	r3, [pc, #48]	; (5f2c <z_priq_dumb_remove+0x34>)
    5efa:	4299      	cmp	r1, r3
{
    5efc:	b510      	push	{r4, lr}
    5efe:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5f00:	d10b      	bne.n	5f1a <z_priq_dumb_remove+0x22>
    5f02:	490b      	ldr	r1, [pc, #44]	; (5f30 <z_priq_dumb_remove+0x38>)
    5f04:	480b      	ldr	r0, [pc, #44]	; (5f34 <z_priq_dumb_remove+0x3c>)
    5f06:	4a0c      	ldr	r2, [pc, #48]	; (5f38 <z_priq_dumb_remove+0x40>)
    5f08:	f240 33e7 	movw	r3, #999	; 0x3e7
    5f0c:	f002 f933 	bl	8176 <printk>
    5f10:	4809      	ldr	r0, [pc, #36]	; (5f38 <z_priq_dumb_remove+0x40>)
    5f12:	f240 31e7 	movw	r1, #999	; 0x3e7
    5f16:	f002 f85a 	bl	7fce <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5f1a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    5f1e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5f20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5f22:	2300      	movs	r3, #0
	node->prev = NULL;
    5f24:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5f28:	bd10      	pop	{r4, pc}
    5f2a:	bf00      	nop
    5f2c:	200003e0 	.word	0x200003e0
    5f30:	00009b35 	.word	0x00009b35
    5f34:	00008fa5 	.word	0x00008fa5
    5f38:	00009b13 	.word	0x00009b13

00005f3c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5f3c:	6883      	ldr	r3, [r0, #8]
{
    5f3e:	b510      	push	{r4, lr}
    5f40:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5f42:	b95b      	cbnz	r3, 5f5c <unpend_thread_no_timeout+0x20>
    5f44:	490b      	ldr	r1, [pc, #44]	; (5f74 <unpend_thread_no_timeout+0x38>)
    5f46:	480c      	ldr	r0, [pc, #48]	; (5f78 <unpend_thread_no_timeout+0x3c>)
    5f48:	4a0c      	ldr	r2, [pc, #48]	; (5f7c <unpend_thread_no_timeout+0x40>)
    5f4a:	f240 2383 	movw	r3, #643	; 0x283
    5f4e:	f002 f912 	bl	8176 <printk>
    5f52:	480a      	ldr	r0, [pc, #40]	; (5f7c <unpend_thread_no_timeout+0x40>)
    5f54:	f240 2183 	movw	r1, #643	; 0x283
    5f58:	f002 f839 	bl	7fce <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5f5c:	68a0      	ldr	r0, [r4, #8]
    5f5e:	4621      	mov	r1, r4
    5f60:	f7ff ffca 	bl	5ef8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5f64:	7b63      	ldrb	r3, [r4, #13]
    5f66:	f023 0302 	bic.w	r3, r3, #2
    5f6a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5f6c:	2300      	movs	r3, #0
    5f6e:	60a3      	str	r3, [r4, #8]
}
    5f70:	bd10      	pop	{r4, pc}
    5f72:	bf00      	nop
    5f74:	00009b56 	.word	0x00009b56
    5f78:	00008fa5 	.word	0x00008fa5
    5f7c:	00009b13 	.word	0x00009b13

00005f80 <update_cache>:
{
    5f80:	b538      	push	{r3, r4, r5, lr}
    5f82:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5f84:	4814      	ldr	r0, [pc, #80]	; (5fd8 <update_cache+0x58>)
    5f86:	4d15      	ldr	r5, [pc, #84]	; (5fdc <update_cache+0x5c>)
    5f88:	f002 fc67 	bl	885a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5f8c:	4604      	mov	r4, r0
    5f8e:	b900      	cbnz	r0, 5f92 <update_cache+0x12>
    5f90:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    5f92:	b9ca      	cbnz	r2, 5fc8 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    5f94:	68ab      	ldr	r3, [r5, #8]
    5f96:	b963      	cbnz	r3, 5fb2 <update_cache+0x32>
    5f98:	4911      	ldr	r1, [pc, #68]	; (5fe0 <update_cache+0x60>)
    5f9a:	4a12      	ldr	r2, [pc, #72]	; (5fe4 <update_cache+0x64>)
    5f9c:	4812      	ldr	r0, [pc, #72]	; (5fe8 <update_cache+0x68>)
    5f9e:	2389      	movs	r3, #137	; 0x89
    5fa0:	f002 f8e9 	bl	8176 <printk>
    5fa4:	4811      	ldr	r0, [pc, #68]	; (5fec <update_cache+0x6c>)
    5fa6:	f002 f8e6 	bl	8176 <printk>
    5faa:	480e      	ldr	r0, [pc, #56]	; (5fe4 <update_cache+0x64>)
    5fac:	2189      	movs	r1, #137	; 0x89
    5fae:	f002 f80e 	bl	7fce <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5fb2:	68ab      	ldr	r3, [r5, #8]
    5fb4:	7b5a      	ldrb	r2, [r3, #13]
    5fb6:	06d2      	lsls	r2, r2, #27
    5fb8:	d106      	bne.n	5fc8 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5fba:	69a2      	ldr	r2, [r4, #24]
    5fbc:	b922      	cbnz	r2, 5fc8 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    5fbe:	89da      	ldrh	r2, [r3, #14]
    5fc0:	2a7f      	cmp	r2, #127	; 0x7f
    5fc2:	d901      	bls.n	5fc8 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    5fc4:	61eb      	str	r3, [r5, #28]
}
    5fc6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5fc8:	68ab      	ldr	r3, [r5, #8]
    5fca:	42a3      	cmp	r3, r4
    5fcc:	d001      	beq.n	5fd2 <update_cache+0x52>
			z_reset_time_slice();
    5fce:	f7ff fe17 	bl	5c00 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5fd2:	61ec      	str	r4, [r5, #28]
}
    5fd4:	e7f7      	b.n	5fc6 <update_cache+0x46>
    5fd6:	bf00      	nop
    5fd8:	20000be4 	.word	0x20000be4
    5fdc:	20000bc4 	.word	0x20000bc4
    5fe0:	00009b6d 	.word	0x00009b6d
    5fe4:	00009b13 	.word	0x00009b13
    5fe8:	00008fa5 	.word	0x00008fa5
    5fec:	00009adf 	.word	0x00009adf

00005ff0 <move_thread_to_end_of_prio_q>:
{
    5ff0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5ff2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5ff6:	7b43      	ldrb	r3, [r0, #13]
    5ff8:	2a00      	cmp	r2, #0
{
    5ffa:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5ffc:	da06      	bge.n	600c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6002:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6004:	4601      	mov	r1, r0
    6006:	481f      	ldr	r0, [pc, #124]	; (6084 <move_thread_to_end_of_prio_q+0x94>)
    6008:	f7ff ff76 	bl	5ef8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    600c:	7b63      	ldrb	r3, [r4, #13]
    600e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6012:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6014:	4b1c      	ldr	r3, [pc, #112]	; (6088 <move_thread_to_end_of_prio_q+0x98>)
    6016:	429c      	cmp	r4, r3
    6018:	d109      	bne.n	602e <move_thread_to_end_of_prio_q+0x3e>
    601a:	491c      	ldr	r1, [pc, #112]	; (608c <move_thread_to_end_of_prio_q+0x9c>)
    601c:	481c      	ldr	r0, [pc, #112]	; (6090 <move_thread_to_end_of_prio_q+0xa0>)
    601e:	4a1d      	ldr	r2, [pc, #116]	; (6094 <move_thread_to_end_of_prio_q+0xa4>)
    6020:	23ba      	movs	r3, #186	; 0xba
    6022:	f002 f8a8 	bl	8176 <printk>
    6026:	481b      	ldr	r0, [pc, #108]	; (6094 <move_thread_to_end_of_prio_q+0xa4>)
    6028:	21ba      	movs	r1, #186	; 0xba
    602a:	f001 ffd0 	bl	7fce <assert_post_action>
	return list->head == list;
    602e:	4a1a      	ldr	r2, [pc, #104]	; (6098 <move_thread_to_end_of_prio_q+0xa8>)
    6030:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6032:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    6034:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6038:	428b      	cmp	r3, r1
    603a:	bf08      	it	eq
    603c:	2300      	moveq	r3, #0
    603e:	2b00      	cmp	r3, #0
    6040:	bf38      	it	cc
    6042:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6044:	b1cb      	cbz	r3, 607a <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    6046:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    604a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    604e:	4286      	cmp	r6, r0
    6050:	d00f      	beq.n	6072 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    6052:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6054:	2800      	cmp	r0, #0
    6056:	dd0c      	ble.n	6072 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    6058:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    605a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    605e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6060:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    6062:	6890      	ldr	r0, [r2, #8]
    6064:	1b03      	subs	r3, r0, r4
    6066:	4258      	negs	r0, r3
}
    6068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    606c:	4158      	adcs	r0, r3
    606e:	f7ff bf87 	b.w	5f80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6072:	42ab      	cmp	r3, r5
    6074:	d001      	beq.n	607a <move_thread_to_end_of_prio_q+0x8a>
    6076:	681b      	ldr	r3, [r3, #0]
    6078:	e7e4      	b.n	6044 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    607a:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    607e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6080:	6254      	str	r4, [r2, #36]	; 0x24
}
    6082:	e7ee      	b.n	6062 <move_thread_to_end_of_prio_q+0x72>
    6084:	20000be4 	.word	0x20000be4
    6088:	200003e0 	.word	0x200003e0
    608c:	00009b35 	.word	0x00009b35
    6090:	00008fa5 	.word	0x00008fa5
    6094:	00009b13 	.word	0x00009b13
    6098:	20000bc4 	.word	0x20000bc4

0000609c <z_time_slice>:
{
    609c:	b570      	push	{r4, r5, r6, lr}
    609e:	4604      	mov	r4, r0
	__asm__ volatile(
    60a0:	f04f 0320 	mov.w	r3, #32
    60a4:	f3ef 8511 	mrs	r5, BASEPRI
    60a8:	f383 8812 	msr	BASEPRI_MAX, r3
    60ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60b0:	482a      	ldr	r0, [pc, #168]	; (615c <z_time_slice+0xc0>)
    60b2:	f001 f917 	bl	72e4 <z_spin_lock_valid>
    60b6:	b968      	cbnz	r0, 60d4 <z_time_slice+0x38>
    60b8:	4a29      	ldr	r2, [pc, #164]	; (6160 <z_time_slice+0xc4>)
    60ba:	492a      	ldr	r1, [pc, #168]	; (6164 <z_time_slice+0xc8>)
    60bc:	482a      	ldr	r0, [pc, #168]	; (6168 <z_time_slice+0xcc>)
    60be:	2381      	movs	r3, #129	; 0x81
    60c0:	f002 f859 	bl	8176 <printk>
    60c4:	4925      	ldr	r1, [pc, #148]	; (615c <z_time_slice+0xc0>)
    60c6:	4829      	ldr	r0, [pc, #164]	; (616c <z_time_slice+0xd0>)
    60c8:	f002 f855 	bl	8176 <printk>
    60cc:	4824      	ldr	r0, [pc, #144]	; (6160 <z_time_slice+0xc4>)
    60ce:	2181      	movs	r1, #129	; 0x81
    60d0:	f001 ff7d 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    60d4:	4821      	ldr	r0, [pc, #132]	; (615c <z_time_slice+0xc0>)
    60d6:	f001 f923 	bl	7320 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    60da:	4b25      	ldr	r3, [pc, #148]	; (6170 <z_time_slice+0xd4>)
    60dc:	4a25      	ldr	r2, [pc, #148]	; (6174 <z_time_slice+0xd8>)
    60de:	6898      	ldr	r0, [r3, #8]
    60e0:	6811      	ldr	r1, [r2, #0]
    60e2:	4288      	cmp	r0, r1
    60e4:	4619      	mov	r1, r3
    60e6:	d118      	bne.n	611a <z_time_slice+0x7e>
			z_reset_time_slice();
    60e8:	f7ff fd8a 	bl	5c00 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60ec:	481b      	ldr	r0, [pc, #108]	; (615c <z_time_slice+0xc0>)
    60ee:	f001 f907 	bl	7300 <z_spin_unlock_valid>
    60f2:	b968      	cbnz	r0, 6110 <z_time_slice+0x74>
    60f4:	4a1a      	ldr	r2, [pc, #104]	; (6160 <z_time_slice+0xc4>)
    60f6:	4920      	ldr	r1, [pc, #128]	; (6178 <z_time_slice+0xdc>)
    60f8:	481b      	ldr	r0, [pc, #108]	; (6168 <z_time_slice+0xcc>)
    60fa:	23ac      	movs	r3, #172	; 0xac
    60fc:	f002 f83b 	bl	8176 <printk>
    6100:	4916      	ldr	r1, [pc, #88]	; (615c <z_time_slice+0xc0>)
    6102:	481e      	ldr	r0, [pc, #120]	; (617c <z_time_slice+0xe0>)
    6104:	f002 f837 	bl	8176 <printk>
    6108:	4815      	ldr	r0, [pc, #84]	; (6160 <z_time_slice+0xc4>)
    610a:	21ac      	movs	r1, #172	; 0xac
    610c:	f001 ff5f 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6110:	f385 8811 	msr	BASEPRI, r5
    6114:	f3bf 8f6f 	isb	sy
}
    6118:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    611a:	2600      	movs	r6, #0
    611c:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    611e:	4a18      	ldr	r2, [pc, #96]	; (6180 <z_time_slice+0xe4>)
    6120:	6812      	ldr	r2, [r2, #0]
    6122:	b1ba      	cbz	r2, 6154 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    6124:	89c2      	ldrh	r2, [r0, #14]
    6126:	2a7f      	cmp	r2, #127	; 0x7f
    6128:	d814      	bhi.n	6154 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    612a:	7b42      	ldrb	r2, [r0, #13]
    612c:	06d2      	lsls	r2, r2, #27
    612e:	d111      	bne.n	6154 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6130:	4a14      	ldr	r2, [pc, #80]	; (6184 <z_time_slice+0xe8>)
    6132:	f990 600e 	ldrsb.w	r6, [r0, #14]
    6136:	6812      	ldr	r2, [r2, #0]
    6138:	4296      	cmp	r6, r2
    613a:	db0b      	blt.n	6154 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    613c:	4a12      	ldr	r2, [pc, #72]	; (6188 <z_time_slice+0xec>)
    613e:	4290      	cmp	r0, r2
    6140:	d008      	beq.n	6154 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    6142:	691a      	ldr	r2, [r3, #16]
    6144:	42a2      	cmp	r2, r4
    6146:	dc02      	bgt.n	614e <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    6148:	f7ff ff52 	bl	5ff0 <move_thread_to_end_of_prio_q>
    614c:	e7cc      	b.n	60e8 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    614e:	1b12      	subs	r2, r2, r4
    6150:	611a      	str	r2, [r3, #16]
    6152:	e7cb      	b.n	60ec <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    6154:	2300      	movs	r3, #0
    6156:	610b      	str	r3, [r1, #16]
    6158:	e7c8      	b.n	60ec <z_time_slice+0x50>
    615a:	bf00      	nop
    615c:	20000bf4 	.word	0x20000bf4
    6160:	000090b8 	.word	0x000090b8
    6164:	0000910a 	.word	0x0000910a
    6168:	00008fa5 	.word	0x00008fa5
    616c:	0000911f 	.word	0x0000911f
    6170:	20000bc4 	.word	0x20000bc4
    6174:	20000bf0 	.word	0x20000bf0
    6178:	000090de 	.word	0x000090de
    617c:	000090f5 	.word	0x000090f5
    6180:	20000bfc 	.word	0x20000bfc
    6184:	20000bf8 	.word	0x20000bf8
    6188:	200003e0 	.word	0x200003e0

0000618c <ready_thread>:
{
    618c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    618e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6192:	7b43      	ldrb	r3, [r0, #13]
    6194:	2a00      	cmp	r2, #0
{
    6196:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6198:	db3e      	blt.n	6218 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    619a:	06da      	lsls	r2, r3, #27
    619c:	d13c      	bne.n	6218 <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    619e:	6985      	ldr	r5, [r0, #24]
    61a0:	2d00      	cmp	r5, #0
    61a2:	d139      	bne.n	6218 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    61a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    61a8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    61aa:	4b1c      	ldr	r3, [pc, #112]	; (621c <ready_thread+0x90>)
    61ac:	4298      	cmp	r0, r3
    61ae:	d109      	bne.n	61c4 <ready_thread+0x38>
    61b0:	491b      	ldr	r1, [pc, #108]	; (6220 <ready_thread+0x94>)
    61b2:	481c      	ldr	r0, [pc, #112]	; (6224 <ready_thread+0x98>)
    61b4:	4a1c      	ldr	r2, [pc, #112]	; (6228 <ready_thread+0x9c>)
    61b6:	23ba      	movs	r3, #186	; 0xba
    61b8:	f001 ffdd 	bl	8176 <printk>
    61bc:	481a      	ldr	r0, [pc, #104]	; (6228 <ready_thread+0x9c>)
    61be:	21ba      	movs	r1, #186	; 0xba
    61c0:	f001 ff05 	bl	7fce <assert_post_action>
	return list->head == list;
    61c4:	4919      	ldr	r1, [pc, #100]	; (622c <ready_thread+0xa0>)
    61c6:	460b      	mov	r3, r1
    61c8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61cc:	4298      	cmp	r0, r3
    61ce:	bf18      	it	ne
    61d0:	4605      	movne	r5, r0
    61d2:	2d00      	cmp	r5, #0
    61d4:	461a      	mov	r2, r3
    61d6:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    61d8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    61da:	bf38      	it	cc
    61dc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    61de:	b1b3      	cbz	r3, 620e <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    61e0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    61e4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    61e8:	4286      	cmp	r6, r0
    61ea:	d00c      	beq.n	6206 <ready_thread+0x7a>
		return b2 - b1;
    61ec:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    61ee:	2800      	cmp	r0, #0
    61f0:	dd09      	ble.n	6206 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    61f2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    61f4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    61f8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    61fa:	605c      	str	r4, [r3, #4]
}
    61fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    6200:	2000      	movs	r0, #0
    6202:	f7ff bebd 	b.w	5f80 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6206:	42ab      	cmp	r3, r5
    6208:	d001      	beq.n	620e <ready_thread+0x82>
    620a:	681b      	ldr	r3, [r3, #0]
    620c:	e7e7      	b.n	61de <ready_thread+0x52>
	node->prev = tail;
    620e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6212:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6214:	624c      	str	r4, [r1, #36]	; 0x24
}
    6216:	e7f1      	b.n	61fc <ready_thread+0x70>
}
    6218:	bd70      	pop	{r4, r5, r6, pc}
    621a:	bf00      	nop
    621c:	200003e0 	.word	0x200003e0
    6220:	00009b35 	.word	0x00009b35
    6224:	00008fa5 	.word	0x00008fa5
    6228:	00009b13 	.word	0x00009b13
    622c:	20000bc4 	.word	0x20000bc4

00006230 <z_ready_thread>:
{
    6230:	b538      	push	{r3, r4, r5, lr}
    6232:	4604      	mov	r4, r0
	__asm__ volatile(
    6234:	f04f 0320 	mov.w	r3, #32
    6238:	f3ef 8511 	mrs	r5, BASEPRI
    623c:	f383 8812 	msr	BASEPRI_MAX, r3
    6240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6244:	4817      	ldr	r0, [pc, #92]	; (62a4 <z_ready_thread+0x74>)
    6246:	f001 f84d 	bl	72e4 <z_spin_lock_valid>
    624a:	b968      	cbnz	r0, 6268 <z_ready_thread+0x38>
    624c:	4a16      	ldr	r2, [pc, #88]	; (62a8 <z_ready_thread+0x78>)
    624e:	4917      	ldr	r1, [pc, #92]	; (62ac <z_ready_thread+0x7c>)
    6250:	4817      	ldr	r0, [pc, #92]	; (62b0 <z_ready_thread+0x80>)
    6252:	2381      	movs	r3, #129	; 0x81
    6254:	f001 ff8f 	bl	8176 <printk>
    6258:	4912      	ldr	r1, [pc, #72]	; (62a4 <z_ready_thread+0x74>)
    625a:	4816      	ldr	r0, [pc, #88]	; (62b4 <z_ready_thread+0x84>)
    625c:	f001 ff8b 	bl	8176 <printk>
    6260:	4811      	ldr	r0, [pc, #68]	; (62a8 <z_ready_thread+0x78>)
    6262:	2181      	movs	r1, #129	; 0x81
    6264:	f001 feb3 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    6268:	480e      	ldr	r0, [pc, #56]	; (62a4 <z_ready_thread+0x74>)
    626a:	f001 f859 	bl	7320 <z_spin_lock_set_owner>
			ready_thread(thread);
    626e:	4620      	mov	r0, r4
    6270:	f7ff ff8c 	bl	618c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6274:	480b      	ldr	r0, [pc, #44]	; (62a4 <z_ready_thread+0x74>)
    6276:	f001 f843 	bl	7300 <z_spin_unlock_valid>
    627a:	b968      	cbnz	r0, 6298 <z_ready_thread+0x68>
    627c:	4a0a      	ldr	r2, [pc, #40]	; (62a8 <z_ready_thread+0x78>)
    627e:	490e      	ldr	r1, [pc, #56]	; (62b8 <z_ready_thread+0x88>)
    6280:	480b      	ldr	r0, [pc, #44]	; (62b0 <z_ready_thread+0x80>)
    6282:	23ac      	movs	r3, #172	; 0xac
    6284:	f001 ff77 	bl	8176 <printk>
    6288:	4906      	ldr	r1, [pc, #24]	; (62a4 <z_ready_thread+0x74>)
    628a:	480c      	ldr	r0, [pc, #48]	; (62bc <z_ready_thread+0x8c>)
    628c:	f001 ff73 	bl	8176 <printk>
    6290:	4805      	ldr	r0, [pc, #20]	; (62a8 <z_ready_thread+0x78>)
    6292:	21ac      	movs	r1, #172	; 0xac
    6294:	f001 fe9b 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6298:	f385 8811 	msr	BASEPRI, r5
    629c:	f3bf 8f6f 	isb	sy
}
    62a0:	bd38      	pop	{r3, r4, r5, pc}
    62a2:	bf00      	nop
    62a4:	20000bf4 	.word	0x20000bf4
    62a8:	000090b8 	.word	0x000090b8
    62ac:	0000910a 	.word	0x0000910a
    62b0:	00008fa5 	.word	0x00008fa5
    62b4:	0000911f 	.word	0x0000911f
    62b8:	000090de 	.word	0x000090de
    62bc:	000090f5 	.word	0x000090f5

000062c0 <z_sched_start>:
{
    62c0:	b538      	push	{r3, r4, r5, lr}
    62c2:	4604      	mov	r4, r0
	__asm__ volatile(
    62c4:	f04f 0320 	mov.w	r3, #32
    62c8:	f3ef 8511 	mrs	r5, BASEPRI
    62cc:	f383 8812 	msr	BASEPRI_MAX, r3
    62d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62d4:	481d      	ldr	r0, [pc, #116]	; (634c <z_sched_start+0x8c>)
    62d6:	f001 f805 	bl	72e4 <z_spin_lock_valid>
    62da:	b968      	cbnz	r0, 62f8 <z_sched_start+0x38>
    62dc:	4a1c      	ldr	r2, [pc, #112]	; (6350 <z_sched_start+0x90>)
    62de:	491d      	ldr	r1, [pc, #116]	; (6354 <z_sched_start+0x94>)
    62e0:	481d      	ldr	r0, [pc, #116]	; (6358 <z_sched_start+0x98>)
    62e2:	2381      	movs	r3, #129	; 0x81
    62e4:	f001 ff47 	bl	8176 <printk>
    62e8:	4918      	ldr	r1, [pc, #96]	; (634c <z_sched_start+0x8c>)
    62ea:	481c      	ldr	r0, [pc, #112]	; (635c <z_sched_start+0x9c>)
    62ec:	f001 ff43 	bl	8176 <printk>
    62f0:	4817      	ldr	r0, [pc, #92]	; (6350 <z_sched_start+0x90>)
    62f2:	2181      	movs	r1, #129	; 0x81
    62f4:	f001 fe6b 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    62f8:	4814      	ldr	r0, [pc, #80]	; (634c <z_sched_start+0x8c>)
    62fa:	f001 f811 	bl	7320 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    62fe:	7b63      	ldrb	r3, [r4, #13]
    6300:	075a      	lsls	r2, r3, #29
    6302:	d416      	bmi.n	6332 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6304:	4811      	ldr	r0, [pc, #68]	; (634c <z_sched_start+0x8c>)
    6306:	f000 fffb 	bl	7300 <z_spin_unlock_valid>
    630a:	b968      	cbnz	r0, 6328 <z_sched_start+0x68>
    630c:	4a10      	ldr	r2, [pc, #64]	; (6350 <z_sched_start+0x90>)
    630e:	4914      	ldr	r1, [pc, #80]	; (6360 <z_sched_start+0xa0>)
    6310:	4811      	ldr	r0, [pc, #68]	; (6358 <z_sched_start+0x98>)
    6312:	23ac      	movs	r3, #172	; 0xac
    6314:	f001 ff2f 	bl	8176 <printk>
    6318:	490c      	ldr	r1, [pc, #48]	; (634c <z_sched_start+0x8c>)
    631a:	4812      	ldr	r0, [pc, #72]	; (6364 <z_sched_start+0xa4>)
    631c:	f001 ff2b 	bl	8176 <printk>
    6320:	480b      	ldr	r0, [pc, #44]	; (6350 <z_sched_start+0x90>)
    6322:	21ac      	movs	r1, #172	; 0xac
    6324:	f001 fe53 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6328:	f385 8811 	msr	BASEPRI, r5
    632c:	f3bf 8f6f 	isb	sy
}
    6330:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6332:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    6336:	4620      	mov	r0, r4
    6338:	7363      	strb	r3, [r4, #13]
    633a:	f7ff ff27 	bl	618c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    633e:	4629      	mov	r1, r5
    6340:	4802      	ldr	r0, [pc, #8]	; (634c <z_sched_start+0x8c>)
}
    6342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    6346:	f7ff bd1f 	b.w	5d88 <z_reschedule>
    634a:	bf00      	nop
    634c:	20000bf4 	.word	0x20000bf4
    6350:	000090b8 	.word	0x000090b8
    6354:	0000910a 	.word	0x0000910a
    6358:	00008fa5 	.word	0x00008fa5
    635c:	0000911f 	.word	0x0000911f
    6360:	000090de 	.word	0x000090de
    6364:	000090f5 	.word	0x000090f5

00006368 <z_thread_timeout>:
{
    6368:	b570      	push	{r4, r5, r6, lr}
    636a:	4604      	mov	r4, r0
	__asm__ volatile(
    636c:	f04f 0320 	mov.w	r3, #32
    6370:	f3ef 8611 	mrs	r6, BASEPRI
    6374:	f383 8812 	msr	BASEPRI_MAX, r3
    6378:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    637c:	4820      	ldr	r0, [pc, #128]	; (6400 <z_thread_timeout+0x98>)
    637e:	f000 ffb1 	bl	72e4 <z_spin_lock_valid>
    6382:	b968      	cbnz	r0, 63a0 <z_thread_timeout+0x38>
    6384:	4a1f      	ldr	r2, [pc, #124]	; (6404 <z_thread_timeout+0x9c>)
    6386:	4920      	ldr	r1, [pc, #128]	; (6408 <z_thread_timeout+0xa0>)
    6388:	4820      	ldr	r0, [pc, #128]	; (640c <z_thread_timeout+0xa4>)
    638a:	2381      	movs	r3, #129	; 0x81
    638c:	f001 fef3 	bl	8176 <printk>
    6390:	491b      	ldr	r1, [pc, #108]	; (6400 <z_thread_timeout+0x98>)
    6392:	481f      	ldr	r0, [pc, #124]	; (6410 <z_thread_timeout+0xa8>)
    6394:	f001 feef 	bl	8176 <printk>
    6398:	481a      	ldr	r0, [pc, #104]	; (6404 <z_thread_timeout+0x9c>)
    639a:	2181      	movs	r1, #129	; 0x81
    639c:	f001 fe17 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    63a0:	4817      	ldr	r0, [pc, #92]	; (6400 <z_thread_timeout+0x98>)
    63a2:	f000 ffbd 	bl	7320 <z_spin_lock_set_owner>
		if (!killed) {
    63a6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    63aa:	f013 0f28 	tst.w	r3, #40	; 0x28
    63ae:	d110      	bne.n	63d2 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    63b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    63b4:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    63b8:	b113      	cbz	r3, 63c0 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    63ba:	4628      	mov	r0, r5
    63bc:	f7ff fdbe 	bl	5f3c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    63c0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    63c4:	f023 0314 	bic.w	r3, r3, #20
    63c8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    63cc:	4628      	mov	r0, r5
    63ce:	f7ff fedd 	bl	618c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63d2:	480b      	ldr	r0, [pc, #44]	; (6400 <z_thread_timeout+0x98>)
    63d4:	f000 ff94 	bl	7300 <z_spin_unlock_valid>
    63d8:	b968      	cbnz	r0, 63f6 <z_thread_timeout+0x8e>
    63da:	4a0a      	ldr	r2, [pc, #40]	; (6404 <z_thread_timeout+0x9c>)
    63dc:	490d      	ldr	r1, [pc, #52]	; (6414 <z_thread_timeout+0xac>)
    63de:	480b      	ldr	r0, [pc, #44]	; (640c <z_thread_timeout+0xa4>)
    63e0:	23ac      	movs	r3, #172	; 0xac
    63e2:	f001 fec8 	bl	8176 <printk>
    63e6:	4906      	ldr	r1, [pc, #24]	; (6400 <z_thread_timeout+0x98>)
    63e8:	480b      	ldr	r0, [pc, #44]	; (6418 <z_thread_timeout+0xb0>)
    63ea:	f001 fec4 	bl	8176 <printk>
    63ee:	4805      	ldr	r0, [pc, #20]	; (6404 <z_thread_timeout+0x9c>)
    63f0:	21ac      	movs	r1, #172	; 0xac
    63f2:	f001 fdec 	bl	7fce <assert_post_action>
	__asm__ volatile(
    63f6:	f386 8811 	msr	BASEPRI, r6
    63fa:	f3bf 8f6f 	isb	sy
}
    63fe:	bd70      	pop	{r4, r5, r6, pc}
    6400:	20000bf4 	.word	0x20000bf4
    6404:	000090b8 	.word	0x000090b8
    6408:	0000910a 	.word	0x0000910a
    640c:	00008fa5 	.word	0x00008fa5
    6410:	0000911f 	.word	0x0000911f
    6414:	000090de 	.word	0x000090de
    6418:	000090f5 	.word	0x000090f5

0000641c <unready_thread>:
{
    641c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    641e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6422:	7b43      	ldrb	r3, [r0, #13]
    6424:	2a00      	cmp	r2, #0
{
    6426:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6428:	da06      	bge.n	6438 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    642e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6430:	4601      	mov	r1, r0
    6432:	4806      	ldr	r0, [pc, #24]	; (644c <unready_thread+0x30>)
    6434:	f7ff fd60 	bl	5ef8 <z_priq_dumb_remove>
	update_cache(thread == _current);
    6438:	4b05      	ldr	r3, [pc, #20]	; (6450 <unready_thread+0x34>)
    643a:	6898      	ldr	r0, [r3, #8]
    643c:	1b03      	subs	r3, r0, r4
    643e:	4258      	negs	r0, r3
}
    6440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    6444:	4158      	adcs	r0, r3
    6446:	f7ff bd9b 	b.w	5f80 <update_cache>
    644a:	bf00      	nop
    644c:	20000be4 	.word	0x20000be4
    6450:	20000bc4 	.word	0x20000bc4

00006454 <add_to_waitq_locked>:
{
    6454:	b538      	push	{r3, r4, r5, lr}
    6456:	4604      	mov	r4, r0
    6458:	460d      	mov	r5, r1
	unready_thread(thread);
    645a:	f7ff ffdf 	bl	641c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    645e:	7b63      	ldrb	r3, [r4, #13]
    6460:	f043 0302 	orr.w	r3, r3, #2
    6464:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6466:	b31d      	cbz	r5, 64b0 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6468:	4b17      	ldr	r3, [pc, #92]	; (64c8 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    646a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    646c:	429c      	cmp	r4, r3
    646e:	d109      	bne.n	6484 <add_to_waitq_locked+0x30>
    6470:	4916      	ldr	r1, [pc, #88]	; (64cc <add_to_waitq_locked+0x78>)
    6472:	4817      	ldr	r0, [pc, #92]	; (64d0 <add_to_waitq_locked+0x7c>)
    6474:	4a17      	ldr	r2, [pc, #92]	; (64d4 <add_to_waitq_locked+0x80>)
    6476:	23ba      	movs	r3, #186	; 0xba
    6478:	f001 fe7d 	bl	8176 <printk>
    647c:	4815      	ldr	r0, [pc, #84]	; (64d4 <add_to_waitq_locked+0x80>)
    647e:	21ba      	movs	r1, #186	; 0xba
    6480:	f001 fda5 	bl	7fce <assert_post_action>
	return list->head == list;
    6484:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6486:	429d      	cmp	r5, r3
    6488:	bf08      	it	eq
    648a:	2300      	moveq	r3, #0
    648c:	2b00      	cmp	r3, #0
    648e:	bf38      	it	cc
    6490:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6492:	b19b      	cbz	r3, 64bc <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    6494:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6498:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    649c:	4291      	cmp	r1, r2
    649e:	d008      	beq.n	64b2 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    64a0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    64a2:	2a00      	cmp	r2, #0
    64a4:	dd05      	ble.n	64b2 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    64a6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    64a8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    64ac:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    64ae:	605c      	str	r4, [r3, #4]
}
    64b0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    64b2:	686a      	ldr	r2, [r5, #4]
    64b4:	4293      	cmp	r3, r2
    64b6:	d001      	beq.n	64bc <add_to_waitq_locked+0x68>
    64b8:	681b      	ldr	r3, [r3, #0]
    64ba:	e7ea      	b.n	6492 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    64bc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    64be:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    64c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    64c4:	606c      	str	r4, [r5, #4]
    64c6:	e7f3      	b.n	64b0 <add_to_waitq_locked+0x5c>
    64c8:	200003e0 	.word	0x200003e0
    64cc:	00009b35 	.word	0x00009b35
    64d0:	00008fa5 	.word	0x00008fa5
    64d4:	00009b13 	.word	0x00009b13

000064d8 <pend>:
{
    64d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64dc:	4604      	mov	r4, r0
    64de:	460d      	mov	r5, r1
    64e0:	4616      	mov	r6, r2
    64e2:	461f      	mov	r7, r3
	__asm__ volatile(
    64e4:	f04f 0320 	mov.w	r3, #32
    64e8:	f3ef 8811 	mrs	r8, BASEPRI
    64ec:	f383 8812 	msr	BASEPRI_MAX, r3
    64f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64f4:	481f      	ldr	r0, [pc, #124]	; (6574 <pend+0x9c>)
    64f6:	f000 fef5 	bl	72e4 <z_spin_lock_valid>
    64fa:	b968      	cbnz	r0, 6518 <pend+0x40>
    64fc:	4a1e      	ldr	r2, [pc, #120]	; (6578 <pend+0xa0>)
    64fe:	491f      	ldr	r1, [pc, #124]	; (657c <pend+0xa4>)
    6500:	481f      	ldr	r0, [pc, #124]	; (6580 <pend+0xa8>)
    6502:	2381      	movs	r3, #129	; 0x81
    6504:	f001 fe37 	bl	8176 <printk>
    6508:	491a      	ldr	r1, [pc, #104]	; (6574 <pend+0x9c>)
    650a:	481e      	ldr	r0, [pc, #120]	; (6584 <pend+0xac>)
    650c:	f001 fe33 	bl	8176 <printk>
    6510:	4819      	ldr	r0, [pc, #100]	; (6578 <pend+0xa0>)
    6512:	2181      	movs	r1, #129	; 0x81
    6514:	f001 fd5b 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    6518:	4816      	ldr	r0, [pc, #88]	; (6574 <pend+0x9c>)
    651a:	f000 ff01 	bl	7320 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    651e:	4620      	mov	r0, r4
    6520:	4629      	mov	r1, r5
    6522:	f7ff ff97 	bl	6454 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6526:	4813      	ldr	r0, [pc, #76]	; (6574 <pend+0x9c>)
    6528:	f000 feea 	bl	7300 <z_spin_unlock_valid>
    652c:	b968      	cbnz	r0, 654a <pend+0x72>
    652e:	4a12      	ldr	r2, [pc, #72]	; (6578 <pend+0xa0>)
    6530:	4915      	ldr	r1, [pc, #84]	; (6588 <pend+0xb0>)
    6532:	4813      	ldr	r0, [pc, #76]	; (6580 <pend+0xa8>)
    6534:	23ac      	movs	r3, #172	; 0xac
    6536:	f001 fe1e 	bl	8176 <printk>
    653a:	490e      	ldr	r1, [pc, #56]	; (6574 <pend+0x9c>)
    653c:	4813      	ldr	r0, [pc, #76]	; (658c <pend+0xb4>)
    653e:	f001 fe1a 	bl	8176 <printk>
    6542:	480d      	ldr	r0, [pc, #52]	; (6578 <pend+0xa0>)
    6544:	21ac      	movs	r1, #172	; 0xac
    6546:	f001 fd42 	bl	7fce <assert_post_action>
	__asm__ volatile(
    654a:	f388 8811 	msr	BASEPRI, r8
    654e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6552:	1c7b      	adds	r3, r7, #1
    6554:	bf08      	it	eq
    6556:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    655a:	d008      	beq.n	656e <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    655c:	4632      	mov	r2, r6
    655e:	463b      	mov	r3, r7
    6560:	f104 0018 	add.w	r0, r4, #24
    6564:	490a      	ldr	r1, [pc, #40]	; (6590 <pend+0xb8>)
}
    6566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    656a:	f000 bf31 	b.w	73d0 <z_add_timeout>
    656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6572:	bf00      	nop
    6574:	20000bf4 	.word	0x20000bf4
    6578:	000090b8 	.word	0x000090b8
    657c:	0000910a 	.word	0x0000910a
    6580:	00008fa5 	.word	0x00008fa5
    6584:	0000911f 	.word	0x0000911f
    6588:	000090de 	.word	0x000090de
    658c:	000090f5 	.word	0x000090f5
    6590:	00006369 	.word	0x00006369

00006594 <z_pend_curr>:
{
    6594:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    6596:	4b11      	ldr	r3, [pc, #68]	; (65dc <z_pend_curr+0x48>)
{
    6598:	4604      	mov	r4, r0
	pending_current = _current;
    659a:	6898      	ldr	r0, [r3, #8]
    659c:	4b10      	ldr	r3, [pc, #64]	; (65e0 <z_pend_curr+0x4c>)
{
    659e:	460d      	mov	r5, r1
	pending_current = _current;
    65a0:	6018      	str	r0, [r3, #0]
{
    65a2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    65a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    65a8:	f7ff ff96 	bl	64d8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65ac:	4620      	mov	r0, r4
    65ae:	f000 fea7 	bl	7300 <z_spin_unlock_valid>
    65b2:	b968      	cbnz	r0, 65d0 <z_pend_curr+0x3c>
    65b4:	4a0b      	ldr	r2, [pc, #44]	; (65e4 <z_pend_curr+0x50>)
    65b6:	490c      	ldr	r1, [pc, #48]	; (65e8 <z_pend_curr+0x54>)
    65b8:	480c      	ldr	r0, [pc, #48]	; (65ec <z_pend_curr+0x58>)
    65ba:	23c3      	movs	r3, #195	; 0xc3
    65bc:	f001 fddb 	bl	8176 <printk>
    65c0:	480b      	ldr	r0, [pc, #44]	; (65f0 <z_pend_curr+0x5c>)
    65c2:	4621      	mov	r1, r4
    65c4:	f001 fdd7 	bl	8176 <printk>
    65c8:	4806      	ldr	r0, [pc, #24]	; (65e4 <z_pend_curr+0x50>)
    65ca:	21c3      	movs	r1, #195	; 0xc3
    65cc:	f001 fcff 	bl	7fce <assert_post_action>
    65d0:	4628      	mov	r0, r5
}
    65d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    65d6:	f7fb bed5 	b.w	2384 <arch_swap>
    65da:	bf00      	nop
    65dc:	20000bc4 	.word	0x20000bc4
    65e0:	20000bf0 	.word	0x20000bf0
    65e4:	000090b8 	.word	0x000090b8
    65e8:	000090de 	.word	0x000090de
    65ec:	00008fa5 	.word	0x00008fa5
    65f0:	000090f5 	.word	0x000090f5

000065f4 <z_set_prio>:
{
    65f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65f6:	4604      	mov	r4, r0
    65f8:	460e      	mov	r6, r1
	__asm__ volatile(
    65fa:	f04f 0320 	mov.w	r3, #32
    65fe:	f3ef 8711 	mrs	r7, BASEPRI
    6602:	f383 8812 	msr	BASEPRI_MAX, r3
    6606:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    660a:	483c      	ldr	r0, [pc, #240]	; (66fc <z_set_prio+0x108>)
    660c:	f000 fe6a 	bl	72e4 <z_spin_lock_valid>
    6610:	b968      	cbnz	r0, 662e <z_set_prio+0x3a>
    6612:	4a3b      	ldr	r2, [pc, #236]	; (6700 <z_set_prio+0x10c>)
    6614:	493b      	ldr	r1, [pc, #236]	; (6704 <z_set_prio+0x110>)
    6616:	483c      	ldr	r0, [pc, #240]	; (6708 <z_set_prio+0x114>)
    6618:	2381      	movs	r3, #129	; 0x81
    661a:	f001 fdac 	bl	8176 <printk>
    661e:	4937      	ldr	r1, [pc, #220]	; (66fc <z_set_prio+0x108>)
    6620:	483a      	ldr	r0, [pc, #232]	; (670c <z_set_prio+0x118>)
    6622:	f001 fda8 	bl	8176 <printk>
    6626:	4836      	ldr	r0, [pc, #216]	; (6700 <z_set_prio+0x10c>)
    6628:	2181      	movs	r1, #129	; 0x81
    662a:	f001 fcd0 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    662e:	4833      	ldr	r0, [pc, #204]	; (66fc <z_set_prio+0x108>)
    6630:	f000 fe76 	bl	7320 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6634:	7b63      	ldrb	r3, [r4, #13]
    6636:	06da      	lsls	r2, r3, #27
    6638:	b276      	sxtb	r6, r6
    663a:	d15c      	bne.n	66f6 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    663c:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    663e:	2d00      	cmp	r5, #0
    6640:	d159      	bne.n	66f6 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6646:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6648:	4831      	ldr	r0, [pc, #196]	; (6710 <z_set_prio+0x11c>)
    664a:	4621      	mov	r1, r4
    664c:	f7ff fc54 	bl	5ef8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6650:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6652:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6654:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6658:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    665a:	4b2e      	ldr	r3, [pc, #184]	; (6714 <z_set_prio+0x120>)
    665c:	429c      	cmp	r4, r3
    665e:	d109      	bne.n	6674 <z_set_prio+0x80>
    6660:	492d      	ldr	r1, [pc, #180]	; (6718 <z_set_prio+0x124>)
    6662:	4829      	ldr	r0, [pc, #164]	; (6708 <z_set_prio+0x114>)
    6664:	4a2d      	ldr	r2, [pc, #180]	; (671c <z_set_prio+0x128>)
    6666:	23ba      	movs	r3, #186	; 0xba
    6668:	f001 fd85 	bl	8176 <printk>
    666c:	482b      	ldr	r0, [pc, #172]	; (671c <z_set_prio+0x128>)
    666e:	21ba      	movs	r1, #186	; 0xba
    6670:	f001 fcad 	bl	7fce <assert_post_action>
	return list->head == list;
    6674:	492a      	ldr	r1, [pc, #168]	; (6720 <z_set_prio+0x12c>)
    6676:	460b      	mov	r3, r1
    6678:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    667c:	4298      	cmp	r0, r3
    667e:	bf18      	it	ne
    6680:	4605      	movne	r5, r0
    6682:	2d00      	cmp	r5, #0
    6684:	461a      	mov	r2, r3
    6686:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6688:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    668a:	bf38      	it	cc
    668c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    668e:	b36b      	cbz	r3, 66ec <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    6690:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6694:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6698:	4286      	cmp	r6, r0
    669a:	d023      	beq.n	66e4 <z_set_prio+0xf0>
		return b2 - b1;
    669c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    669e:	2800      	cmp	r0, #0
    66a0:	dd20      	ble.n	66e4 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    66a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    66a4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    66a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    66aa:	605c      	str	r4, [r3, #4]
			update_cache(1);
    66ac:	2001      	movs	r0, #1
    66ae:	f7ff fc67 	bl	5f80 <update_cache>
    66b2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66b4:	4811      	ldr	r0, [pc, #68]	; (66fc <z_set_prio+0x108>)
    66b6:	f000 fe23 	bl	7300 <z_spin_unlock_valid>
    66ba:	b968      	cbnz	r0, 66d8 <z_set_prio+0xe4>
    66bc:	4a10      	ldr	r2, [pc, #64]	; (6700 <z_set_prio+0x10c>)
    66be:	4919      	ldr	r1, [pc, #100]	; (6724 <z_set_prio+0x130>)
    66c0:	4811      	ldr	r0, [pc, #68]	; (6708 <z_set_prio+0x114>)
    66c2:	23ac      	movs	r3, #172	; 0xac
    66c4:	f001 fd57 	bl	8176 <printk>
    66c8:	490c      	ldr	r1, [pc, #48]	; (66fc <z_set_prio+0x108>)
    66ca:	4817      	ldr	r0, [pc, #92]	; (6728 <z_set_prio+0x134>)
    66cc:	f001 fd53 	bl	8176 <printk>
    66d0:	480b      	ldr	r0, [pc, #44]	; (6700 <z_set_prio+0x10c>)
    66d2:	21ac      	movs	r1, #172	; 0xac
    66d4:	f001 fc7b 	bl	7fce <assert_post_action>
	__asm__ volatile(
    66d8:	f387 8811 	msr	BASEPRI, r7
    66dc:	f3bf 8f6f 	isb	sy
}
    66e0:	4620      	mov	r0, r4
    66e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    66e4:	42ab      	cmp	r3, r5
    66e6:	d001      	beq.n	66ec <z_set_prio+0xf8>
    66e8:	681b      	ldr	r3, [r3, #0]
    66ea:	e7d0      	b.n	668e <z_set_prio+0x9a>
	node->prev = tail;
    66ec:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    66f0:	602c      	str	r4, [r5, #0]
	list->tail = node;
    66f2:	624c      	str	r4, [r1, #36]	; 0x24
}
    66f4:	e7da      	b.n	66ac <z_set_prio+0xb8>
			thread->base.prio = prio;
    66f6:	73a6      	strb	r6, [r4, #14]
    66f8:	2400      	movs	r4, #0
    66fa:	e7db      	b.n	66b4 <z_set_prio+0xc0>
    66fc:	20000bf4 	.word	0x20000bf4
    6700:	000090b8 	.word	0x000090b8
    6704:	0000910a 	.word	0x0000910a
    6708:	00008fa5 	.word	0x00008fa5
    670c:	0000911f 	.word	0x0000911f
    6710:	20000be4 	.word	0x20000be4
    6714:	200003e0 	.word	0x200003e0
    6718:	00009b35 	.word	0x00009b35
    671c:	00009b13 	.word	0x00009b13
    6720:	20000bc4 	.word	0x20000bc4
    6724:	000090de 	.word	0x000090de
    6728:	000090f5 	.word	0x000090f5

0000672c <z_impl_k_thread_suspend>:
{
    672c:	b570      	push	{r4, r5, r6, lr}
    672e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6730:	3018      	adds	r0, #24
    6732:	f000 ff21 	bl	7578 <z_abort_timeout>
	__asm__ volatile(
    6736:	f04f 0320 	mov.w	r3, #32
    673a:	f3ef 8611 	mrs	r6, BASEPRI
    673e:	f383 8812 	msr	BASEPRI_MAX, r3
    6742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6746:	4825      	ldr	r0, [pc, #148]	; (67dc <z_impl_k_thread_suspend+0xb0>)
    6748:	f000 fdcc 	bl	72e4 <z_spin_lock_valid>
    674c:	b968      	cbnz	r0, 676a <z_impl_k_thread_suspend+0x3e>
    674e:	4a24      	ldr	r2, [pc, #144]	; (67e0 <z_impl_k_thread_suspend+0xb4>)
    6750:	4924      	ldr	r1, [pc, #144]	; (67e4 <z_impl_k_thread_suspend+0xb8>)
    6752:	4825      	ldr	r0, [pc, #148]	; (67e8 <z_impl_k_thread_suspend+0xbc>)
    6754:	2381      	movs	r3, #129	; 0x81
    6756:	f001 fd0e 	bl	8176 <printk>
    675a:	4920      	ldr	r1, [pc, #128]	; (67dc <z_impl_k_thread_suspend+0xb0>)
    675c:	4823      	ldr	r0, [pc, #140]	; (67ec <z_impl_k_thread_suspend+0xc0>)
    675e:	f001 fd0a 	bl	8176 <printk>
    6762:	481f      	ldr	r0, [pc, #124]	; (67e0 <z_impl_k_thread_suspend+0xb4>)
    6764:	2181      	movs	r1, #129	; 0x81
    6766:	f001 fc32 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    676a:	481c      	ldr	r0, [pc, #112]	; (67dc <z_impl_k_thread_suspend+0xb0>)
    676c:	f000 fdd8 	bl	7320 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6770:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6774:	7b63      	ldrb	r3, [r4, #13]
    6776:	2a00      	cmp	r2, #0
    6778:	da06      	bge.n	6788 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    677a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    677e:	481c      	ldr	r0, [pc, #112]	; (67f0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6780:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6782:	4621      	mov	r1, r4
    6784:	f7ff fbb8 	bl	5ef8 <z_priq_dumb_remove>
		update_cache(thread == _current);
    6788:	4d1a      	ldr	r5, [pc, #104]	; (67f4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    678a:	7b63      	ldrb	r3, [r4, #13]
    678c:	68a8      	ldr	r0, [r5, #8]
    678e:	f043 0310 	orr.w	r3, r3, #16
    6792:	7363      	strb	r3, [r4, #13]
    6794:	1b03      	subs	r3, r0, r4
    6796:	4258      	negs	r0, r3
    6798:	4158      	adcs	r0, r3
    679a:	f7ff fbf1 	bl	5f80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    679e:	480f      	ldr	r0, [pc, #60]	; (67dc <z_impl_k_thread_suspend+0xb0>)
    67a0:	f000 fdae 	bl	7300 <z_spin_unlock_valid>
    67a4:	b968      	cbnz	r0, 67c2 <z_impl_k_thread_suspend+0x96>
    67a6:	4a0e      	ldr	r2, [pc, #56]	; (67e0 <z_impl_k_thread_suspend+0xb4>)
    67a8:	4913      	ldr	r1, [pc, #76]	; (67f8 <z_impl_k_thread_suspend+0xcc>)
    67aa:	480f      	ldr	r0, [pc, #60]	; (67e8 <z_impl_k_thread_suspend+0xbc>)
    67ac:	23ac      	movs	r3, #172	; 0xac
    67ae:	f001 fce2 	bl	8176 <printk>
    67b2:	490a      	ldr	r1, [pc, #40]	; (67dc <z_impl_k_thread_suspend+0xb0>)
    67b4:	4811      	ldr	r0, [pc, #68]	; (67fc <z_impl_k_thread_suspend+0xd0>)
    67b6:	f001 fcde 	bl	8176 <printk>
    67ba:	4809      	ldr	r0, [pc, #36]	; (67e0 <z_impl_k_thread_suspend+0xb4>)
    67bc:	21ac      	movs	r1, #172	; 0xac
    67be:	f001 fc06 	bl	7fce <assert_post_action>
	__asm__ volatile(
    67c2:	f386 8811 	msr	BASEPRI, r6
    67c6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    67ca:	68ab      	ldr	r3, [r5, #8]
    67cc:	42a3      	cmp	r3, r4
    67ce:	d103      	bne.n	67d8 <z_impl_k_thread_suspend+0xac>
}
    67d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    67d4:	f002 b837 	b.w	8846 <z_reschedule_unlocked>
}
    67d8:	bd70      	pop	{r4, r5, r6, pc}
    67da:	bf00      	nop
    67dc:	20000bf4 	.word	0x20000bf4
    67e0:	000090b8 	.word	0x000090b8
    67e4:	0000910a 	.word	0x0000910a
    67e8:	00008fa5 	.word	0x00008fa5
    67ec:	0000911f 	.word	0x0000911f
    67f0:	20000be4 	.word	0x20000be4
    67f4:	20000bc4 	.word	0x20000bc4
    67f8:	000090de 	.word	0x000090de
    67fc:	000090f5 	.word	0x000090f5

00006800 <k_sched_unlock>:
{
    6800:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6802:	f04f 0320 	mov.w	r3, #32
    6806:	f3ef 8511 	mrs	r5, BASEPRI
    680a:	f383 8812 	msr	BASEPRI_MAX, r3
    680e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6812:	482d      	ldr	r0, [pc, #180]	; (68c8 <k_sched_unlock+0xc8>)
    6814:	f000 fd66 	bl	72e4 <z_spin_lock_valid>
    6818:	b968      	cbnz	r0, 6836 <k_sched_unlock+0x36>
    681a:	4a2c      	ldr	r2, [pc, #176]	; (68cc <k_sched_unlock+0xcc>)
    681c:	492c      	ldr	r1, [pc, #176]	; (68d0 <k_sched_unlock+0xd0>)
    681e:	482d      	ldr	r0, [pc, #180]	; (68d4 <k_sched_unlock+0xd4>)
    6820:	2381      	movs	r3, #129	; 0x81
    6822:	f001 fca8 	bl	8176 <printk>
    6826:	4928      	ldr	r1, [pc, #160]	; (68c8 <k_sched_unlock+0xc8>)
    6828:	482b      	ldr	r0, [pc, #172]	; (68d8 <k_sched_unlock+0xd8>)
    682a:	f001 fca4 	bl	8176 <printk>
    682e:	4827      	ldr	r0, [pc, #156]	; (68cc <k_sched_unlock+0xcc>)
    6830:	2181      	movs	r1, #129	; 0x81
    6832:	f001 fbcc 	bl	7fce <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    6836:	4c29      	ldr	r4, [pc, #164]	; (68dc <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    6838:	4823      	ldr	r0, [pc, #140]	; (68c8 <k_sched_unlock+0xc8>)
    683a:	f000 fd71 	bl	7320 <z_spin_lock_set_owner>
    683e:	68a2      	ldr	r2, [r4, #8]
    6840:	7bd2      	ldrb	r2, [r2, #15]
    6842:	b972      	cbnz	r2, 6862 <k_sched_unlock+0x62>
    6844:	4926      	ldr	r1, [pc, #152]	; (68e0 <k_sched_unlock+0xe0>)
    6846:	4a27      	ldr	r2, [pc, #156]	; (68e4 <k_sched_unlock+0xe4>)
    6848:	4822      	ldr	r0, [pc, #136]	; (68d4 <k_sched_unlock+0xd4>)
    684a:	f240 3385 	movw	r3, #901	; 0x385
    684e:	f001 fc92 	bl	8176 <printk>
    6852:	4825      	ldr	r0, [pc, #148]	; (68e8 <k_sched_unlock+0xe8>)
    6854:	f001 fc8f 	bl	8176 <printk>
    6858:	4822      	ldr	r0, [pc, #136]	; (68e4 <k_sched_unlock+0xe4>)
    685a:	f240 3185 	movw	r1, #901	; 0x385
    685e:	f001 fbb6 	bl	7fce <assert_post_action>
    6862:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6866:	b173      	cbz	r3, 6886 <k_sched_unlock+0x86>
    6868:	4920      	ldr	r1, [pc, #128]	; (68ec <k_sched_unlock+0xec>)
    686a:	4a1e      	ldr	r2, [pc, #120]	; (68e4 <k_sched_unlock+0xe4>)
    686c:	4819      	ldr	r0, [pc, #100]	; (68d4 <k_sched_unlock+0xd4>)
    686e:	f240 3386 	movw	r3, #902	; 0x386
    6872:	f001 fc80 	bl	8176 <printk>
    6876:	481c      	ldr	r0, [pc, #112]	; (68e8 <k_sched_unlock+0xe8>)
    6878:	f001 fc7d 	bl	8176 <printk>
    687c:	4819      	ldr	r0, [pc, #100]	; (68e4 <k_sched_unlock+0xe4>)
    687e:	f240 3186 	movw	r1, #902	; 0x386
    6882:	f001 fba4 	bl	7fce <assert_post_action>
		++_current->base.sched_locked;
    6886:	68a2      	ldr	r2, [r4, #8]
    6888:	7bd3      	ldrb	r3, [r2, #15]
    688a:	3301      	adds	r3, #1
		update_cache(0);
    688c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    688e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6890:	f7ff fb76 	bl	5f80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6894:	480c      	ldr	r0, [pc, #48]	; (68c8 <k_sched_unlock+0xc8>)
    6896:	f000 fd33 	bl	7300 <z_spin_unlock_valid>
    689a:	b968      	cbnz	r0, 68b8 <k_sched_unlock+0xb8>
    689c:	4a0b      	ldr	r2, [pc, #44]	; (68cc <k_sched_unlock+0xcc>)
    689e:	4914      	ldr	r1, [pc, #80]	; (68f0 <k_sched_unlock+0xf0>)
    68a0:	480c      	ldr	r0, [pc, #48]	; (68d4 <k_sched_unlock+0xd4>)
    68a2:	23ac      	movs	r3, #172	; 0xac
    68a4:	f001 fc67 	bl	8176 <printk>
    68a8:	4907      	ldr	r1, [pc, #28]	; (68c8 <k_sched_unlock+0xc8>)
    68aa:	4812      	ldr	r0, [pc, #72]	; (68f4 <k_sched_unlock+0xf4>)
    68ac:	f001 fc63 	bl	8176 <printk>
    68b0:	4806      	ldr	r0, [pc, #24]	; (68cc <k_sched_unlock+0xcc>)
    68b2:	21ac      	movs	r1, #172	; 0xac
    68b4:	f001 fb8b 	bl	7fce <assert_post_action>
	__asm__ volatile(
    68b8:	f385 8811 	msr	BASEPRI, r5
    68bc:	f3bf 8f6f 	isb	sy
}
    68c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    68c4:	f001 bfbf 	b.w	8846 <z_reschedule_unlocked>
    68c8:	20000bf4 	.word	0x20000bf4
    68cc:	000090b8 	.word	0x000090b8
    68d0:	0000910a 	.word	0x0000910a
    68d4:	00008fa5 	.word	0x00008fa5
    68d8:	0000911f 	.word	0x0000911f
    68dc:	20000bc4 	.word	0x20000bc4
    68e0:	00009b94 	.word	0x00009b94
    68e4:	00009b13 	.word	0x00009b13
    68e8:	00009adf 	.word	0x00009adf
    68ec:	00009a66 	.word	0x00009a66
    68f0:	000090de 	.word	0x000090de
    68f4:	000090f5 	.word	0x000090f5

000068f8 <z_unpend1_no_timeout>:
{
    68f8:	b538      	push	{r3, r4, r5, lr}
    68fa:	4604      	mov	r4, r0
	__asm__ volatile(
    68fc:	f04f 0320 	mov.w	r3, #32
    6900:	f3ef 8511 	mrs	r5, BASEPRI
    6904:	f383 8812 	msr	BASEPRI_MAX, r3
    6908:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    690c:	4819      	ldr	r0, [pc, #100]	; (6974 <z_unpend1_no_timeout+0x7c>)
    690e:	f000 fce9 	bl	72e4 <z_spin_lock_valid>
    6912:	b968      	cbnz	r0, 6930 <z_unpend1_no_timeout+0x38>
    6914:	4a18      	ldr	r2, [pc, #96]	; (6978 <z_unpend1_no_timeout+0x80>)
    6916:	4919      	ldr	r1, [pc, #100]	; (697c <z_unpend1_no_timeout+0x84>)
    6918:	4819      	ldr	r0, [pc, #100]	; (6980 <z_unpend1_no_timeout+0x88>)
    691a:	2381      	movs	r3, #129	; 0x81
    691c:	f001 fc2b 	bl	8176 <printk>
    6920:	4914      	ldr	r1, [pc, #80]	; (6974 <z_unpend1_no_timeout+0x7c>)
    6922:	4818      	ldr	r0, [pc, #96]	; (6984 <z_unpend1_no_timeout+0x8c>)
    6924:	f001 fc27 	bl	8176 <printk>
    6928:	4813      	ldr	r0, [pc, #76]	; (6978 <z_unpend1_no_timeout+0x80>)
    692a:	2181      	movs	r1, #129	; 0x81
    692c:	f001 fb4f 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    6930:	4810      	ldr	r0, [pc, #64]	; (6974 <z_unpend1_no_timeout+0x7c>)
    6932:	f000 fcf5 	bl	7320 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    6936:	4620      	mov	r0, r4
    6938:	f001 ff8f 	bl	885a <z_priq_dumb_best>
		if (thread != NULL) {
    693c:	4604      	mov	r4, r0
    693e:	b108      	cbz	r0, 6944 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    6940:	f7ff fafc 	bl	5f3c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6944:	480b      	ldr	r0, [pc, #44]	; (6974 <z_unpend1_no_timeout+0x7c>)
    6946:	f000 fcdb 	bl	7300 <z_spin_unlock_valid>
    694a:	b968      	cbnz	r0, 6968 <z_unpend1_no_timeout+0x70>
    694c:	4a0a      	ldr	r2, [pc, #40]	; (6978 <z_unpend1_no_timeout+0x80>)
    694e:	490e      	ldr	r1, [pc, #56]	; (6988 <z_unpend1_no_timeout+0x90>)
    6950:	480b      	ldr	r0, [pc, #44]	; (6980 <z_unpend1_no_timeout+0x88>)
    6952:	23ac      	movs	r3, #172	; 0xac
    6954:	f001 fc0f 	bl	8176 <printk>
    6958:	4906      	ldr	r1, [pc, #24]	; (6974 <z_unpend1_no_timeout+0x7c>)
    695a:	480c      	ldr	r0, [pc, #48]	; (698c <z_unpend1_no_timeout+0x94>)
    695c:	f001 fc0b 	bl	8176 <printk>
    6960:	4805      	ldr	r0, [pc, #20]	; (6978 <z_unpend1_no_timeout+0x80>)
    6962:	21ac      	movs	r1, #172	; 0xac
    6964:	f001 fb33 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6968:	f385 8811 	msr	BASEPRI, r5
    696c:	f3bf 8f6f 	isb	sy
}
    6970:	4620      	mov	r0, r4
    6972:	bd38      	pop	{r3, r4, r5, pc}
    6974:	20000bf4 	.word	0x20000bf4
    6978:	000090b8 	.word	0x000090b8
    697c:	0000910a 	.word	0x0000910a
    6980:	00008fa5 	.word	0x00008fa5
    6984:	0000911f 	.word	0x0000911f
    6988:	000090de 	.word	0x000090de
    698c:	000090f5 	.word	0x000090f5

00006990 <z_unpend_first_thread>:
{
    6990:	b538      	push	{r3, r4, r5, lr}
    6992:	4604      	mov	r4, r0
	__asm__ volatile(
    6994:	f04f 0320 	mov.w	r3, #32
    6998:	f3ef 8511 	mrs	r5, BASEPRI
    699c:	f383 8812 	msr	BASEPRI_MAX, r3
    69a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69a4:	481b      	ldr	r0, [pc, #108]	; (6a14 <z_unpend_first_thread+0x84>)
    69a6:	f000 fc9d 	bl	72e4 <z_spin_lock_valid>
    69aa:	b968      	cbnz	r0, 69c8 <z_unpend_first_thread+0x38>
    69ac:	4a1a      	ldr	r2, [pc, #104]	; (6a18 <z_unpend_first_thread+0x88>)
    69ae:	491b      	ldr	r1, [pc, #108]	; (6a1c <z_unpend_first_thread+0x8c>)
    69b0:	481b      	ldr	r0, [pc, #108]	; (6a20 <z_unpend_first_thread+0x90>)
    69b2:	2381      	movs	r3, #129	; 0x81
    69b4:	f001 fbdf 	bl	8176 <printk>
    69b8:	4916      	ldr	r1, [pc, #88]	; (6a14 <z_unpend_first_thread+0x84>)
    69ba:	481a      	ldr	r0, [pc, #104]	; (6a24 <z_unpend_first_thread+0x94>)
    69bc:	f001 fbdb 	bl	8176 <printk>
    69c0:	4815      	ldr	r0, [pc, #84]	; (6a18 <z_unpend_first_thread+0x88>)
    69c2:	2181      	movs	r1, #129	; 0x81
    69c4:	f001 fb03 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    69c8:	4812      	ldr	r0, [pc, #72]	; (6a14 <z_unpend_first_thread+0x84>)
    69ca:	f000 fca9 	bl	7320 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    69ce:	4620      	mov	r0, r4
    69d0:	f001 ff43 	bl	885a <z_priq_dumb_best>
		if (thread != NULL) {
    69d4:	4604      	mov	r4, r0
    69d6:	b128      	cbz	r0, 69e4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    69d8:	f7ff fab0 	bl	5f3c <unpend_thread_no_timeout>
    69dc:	f104 0018 	add.w	r0, r4, #24
    69e0:	f000 fdca 	bl	7578 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69e4:	480b      	ldr	r0, [pc, #44]	; (6a14 <z_unpend_first_thread+0x84>)
    69e6:	f000 fc8b 	bl	7300 <z_spin_unlock_valid>
    69ea:	b968      	cbnz	r0, 6a08 <z_unpend_first_thread+0x78>
    69ec:	4a0a      	ldr	r2, [pc, #40]	; (6a18 <z_unpend_first_thread+0x88>)
    69ee:	490e      	ldr	r1, [pc, #56]	; (6a28 <z_unpend_first_thread+0x98>)
    69f0:	480b      	ldr	r0, [pc, #44]	; (6a20 <z_unpend_first_thread+0x90>)
    69f2:	23ac      	movs	r3, #172	; 0xac
    69f4:	f001 fbbf 	bl	8176 <printk>
    69f8:	4906      	ldr	r1, [pc, #24]	; (6a14 <z_unpend_first_thread+0x84>)
    69fa:	480c      	ldr	r0, [pc, #48]	; (6a2c <z_unpend_first_thread+0x9c>)
    69fc:	f001 fbbb 	bl	8176 <printk>
    6a00:	4805      	ldr	r0, [pc, #20]	; (6a18 <z_unpend_first_thread+0x88>)
    6a02:	21ac      	movs	r1, #172	; 0xac
    6a04:	f001 fae3 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6a08:	f385 8811 	msr	BASEPRI, r5
    6a0c:	f3bf 8f6f 	isb	sy
}
    6a10:	4620      	mov	r0, r4
    6a12:	bd38      	pop	{r3, r4, r5, pc}
    6a14:	20000bf4 	.word	0x20000bf4
    6a18:	000090b8 	.word	0x000090b8
    6a1c:	0000910a 	.word	0x0000910a
    6a20:	00008fa5 	.word	0x00008fa5
    6a24:	0000911f 	.word	0x0000911f
    6a28:	000090de 	.word	0x000090de
    6a2c:	000090f5 	.word	0x000090f5

00006a30 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6a30:	4b04      	ldr	r3, [pc, #16]	; (6a44 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6a32:	2100      	movs	r1, #0
    6a34:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    6a38:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6a3c:	4608      	mov	r0, r1
    6a3e:	f7ff b8f5 	b.w	5c2c <k_sched_time_slice_set>
    6a42:	bf00      	nop
    6a44:	20000bc4 	.word	0x20000bc4

00006a48 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    6a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a4a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6a4e:	b173      	cbz	r3, 6a6e <z_impl_k_yield+0x26>
    6a50:	4941      	ldr	r1, [pc, #260]	; (6b58 <z_impl_k_yield+0x110>)
    6a52:	4a42      	ldr	r2, [pc, #264]	; (6b5c <z_impl_k_yield+0x114>)
    6a54:	4842      	ldr	r0, [pc, #264]	; (6b60 <z_impl_k_yield+0x118>)
    6a56:	f240 43dc 	movw	r3, #1244	; 0x4dc
    6a5a:	f001 fb8c 	bl	8176 <printk>
    6a5e:	4841      	ldr	r0, [pc, #260]	; (6b64 <z_impl_k_yield+0x11c>)
    6a60:	f001 fb89 	bl	8176 <printk>
    6a64:	483d      	ldr	r0, [pc, #244]	; (6b5c <z_impl_k_yield+0x114>)
    6a66:	f240 41dc 	movw	r1, #1244	; 0x4dc
    6a6a:	f001 fab0 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6a6e:	f04f 0320 	mov.w	r3, #32
    6a72:	f3ef 8611 	mrs	r6, BASEPRI
    6a76:	f383 8812 	msr	BASEPRI_MAX, r3
    6a7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a7e:	483a      	ldr	r0, [pc, #232]	; (6b68 <z_impl_k_yield+0x120>)
    6a80:	f000 fc30 	bl	72e4 <z_spin_lock_valid>
    6a84:	b968      	cbnz	r0, 6aa2 <z_impl_k_yield+0x5a>
    6a86:	4a39      	ldr	r2, [pc, #228]	; (6b6c <z_impl_k_yield+0x124>)
    6a88:	4939      	ldr	r1, [pc, #228]	; (6b70 <z_impl_k_yield+0x128>)
    6a8a:	4835      	ldr	r0, [pc, #212]	; (6b60 <z_impl_k_yield+0x118>)
    6a8c:	2381      	movs	r3, #129	; 0x81
    6a8e:	f001 fb72 	bl	8176 <printk>
    6a92:	4935      	ldr	r1, [pc, #212]	; (6b68 <z_impl_k_yield+0x120>)
    6a94:	4837      	ldr	r0, [pc, #220]	; (6b74 <z_impl_k_yield+0x12c>)
    6a96:	f001 fb6e 	bl	8176 <printk>
    6a9a:	4834      	ldr	r0, [pc, #208]	; (6b6c <z_impl_k_yield+0x124>)
    6a9c:	2181      	movs	r1, #129	; 0x81
    6a9e:	f001 fa96 	bl	7fce <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6aa2:	4d35      	ldr	r5, [pc, #212]	; (6b78 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    6aa4:	4830      	ldr	r0, [pc, #192]	; (6b68 <z_impl_k_yield+0x120>)
    6aa6:	f000 fc3b 	bl	7320 <z_spin_lock_set_owner>
    6aaa:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6aac:	7b4b      	ldrb	r3, [r1, #13]
    6aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6ab2:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6ab4:	f105 0020 	add.w	r0, r5, #32
    6ab8:	f7ff fa1e 	bl	5ef8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6abc:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6abe:	7b63      	ldrb	r3, [r4, #13]
    6ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6ac4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6ac6:	4b2d      	ldr	r3, [pc, #180]	; (6b7c <z_impl_k_yield+0x134>)
    6ac8:	429c      	cmp	r4, r3
    6aca:	d109      	bne.n	6ae0 <z_impl_k_yield+0x98>
    6acc:	492c      	ldr	r1, [pc, #176]	; (6b80 <z_impl_k_yield+0x138>)
    6ace:	4824      	ldr	r0, [pc, #144]	; (6b60 <z_impl_k_yield+0x118>)
    6ad0:	4a22      	ldr	r2, [pc, #136]	; (6b5c <z_impl_k_yield+0x114>)
    6ad2:	23ba      	movs	r3, #186	; 0xba
    6ad4:	f001 fb4f 	bl	8176 <printk>
    6ad8:	4820      	ldr	r0, [pc, #128]	; (6b5c <z_impl_k_yield+0x114>)
    6ada:	21ba      	movs	r1, #186	; 0xba
    6adc:	f001 fa77 	bl	7fce <assert_post_action>
	return list->head == list;
    6ae0:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ae2:	4828      	ldr	r0, [pc, #160]	; (6b84 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6ae4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ae6:	4283      	cmp	r3, r0
    6ae8:	bf08      	it	eq
    6aea:	2300      	moveq	r3, #0
    6aec:	2b00      	cmp	r3, #0
    6aee:	bf38      	it	cc
    6af0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6af2:	b35b      	cbz	r3, 6b4c <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    6af4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6af8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6afc:	4297      	cmp	r7, r2
    6afe:	d021      	beq.n	6b44 <z_impl_k_yield+0xfc>
		return b2 - b1;
    6b00:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    6b02:	2a00      	cmp	r2, #0
    6b04:	dd1e      	ble.n	6b44 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    6b06:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6b08:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6b0c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6b0e:	605c      	str	r4, [r3, #4]
	update_cache(1);
    6b10:	2001      	movs	r0, #1
    6b12:	f7ff fa35 	bl	5f80 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b16:	4814      	ldr	r0, [pc, #80]	; (6b68 <z_impl_k_yield+0x120>)
    6b18:	f000 fbf2 	bl	7300 <z_spin_unlock_valid>
    6b1c:	b968      	cbnz	r0, 6b3a <z_impl_k_yield+0xf2>
    6b1e:	4a13      	ldr	r2, [pc, #76]	; (6b6c <z_impl_k_yield+0x124>)
    6b20:	4919      	ldr	r1, [pc, #100]	; (6b88 <z_impl_k_yield+0x140>)
    6b22:	480f      	ldr	r0, [pc, #60]	; (6b60 <z_impl_k_yield+0x118>)
    6b24:	23c3      	movs	r3, #195	; 0xc3
    6b26:	f001 fb26 	bl	8176 <printk>
    6b2a:	490f      	ldr	r1, [pc, #60]	; (6b68 <z_impl_k_yield+0x120>)
    6b2c:	4817      	ldr	r0, [pc, #92]	; (6b8c <z_impl_k_yield+0x144>)
    6b2e:	f001 fb22 	bl	8176 <printk>
    6b32:	480e      	ldr	r0, [pc, #56]	; (6b6c <z_impl_k_yield+0x124>)
    6b34:	21c3      	movs	r1, #195	; 0xc3
    6b36:	f001 fa4a 	bl	7fce <assert_post_action>
    6b3a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    6b3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6b40:	f7fb bc20 	b.w	2384 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6b44:	428b      	cmp	r3, r1
    6b46:	d001      	beq.n	6b4c <z_impl_k_yield+0x104>
    6b48:	681b      	ldr	r3, [r3, #0]
    6b4a:	e7d2      	b.n	6af2 <z_impl_k_yield+0xaa>
	node->prev = tail;
    6b4c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6b50:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6b52:	626c      	str	r4, [r5, #36]	; 0x24
}
    6b54:	e7dc      	b.n	6b10 <z_impl_k_yield+0xc8>
    6b56:	bf00      	nop
    6b58:	00009a66 	.word	0x00009a66
    6b5c:	00009b13 	.word	0x00009b13
    6b60:	00008fa5 	.word	0x00008fa5
    6b64:	00009adf 	.word	0x00009adf
    6b68:	20000bf4 	.word	0x20000bf4
    6b6c:	000090b8 	.word	0x000090b8
    6b70:	0000910a 	.word	0x0000910a
    6b74:	0000911f 	.word	0x0000911f
    6b78:	20000bc4 	.word	0x20000bc4
    6b7c:	200003e0 	.word	0x200003e0
    6b80:	00009b35 	.word	0x00009b35
    6b84:	20000be4 	.word	0x20000be4
    6b88:	000090de 	.word	0x000090de
    6b8c:	000090f5 	.word	0x000090f5

00006b90 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    6b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b94:	4604      	mov	r4, r0
    6b96:	460d      	mov	r5, r1
    6b98:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6b9c:	b173      	cbz	r3, 6bbc <z_tick_sleep+0x2c>
    6b9e:	4945      	ldr	r1, [pc, #276]	; (6cb4 <z_tick_sleep+0x124>)
    6ba0:	4a45      	ldr	r2, [pc, #276]	; (6cb8 <z_tick_sleep+0x128>)
    6ba2:	4846      	ldr	r0, [pc, #280]	; (6cbc <z_tick_sleep+0x12c>)
    6ba4:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    6ba8:	f001 fae5 	bl	8176 <printk>
    6bac:	4844      	ldr	r0, [pc, #272]	; (6cc0 <z_tick_sleep+0x130>)
    6bae:	f001 fae2 	bl	8176 <printk>
    6bb2:	4841      	ldr	r0, [pc, #260]	; (6cb8 <z_tick_sleep+0x128>)
    6bb4:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    6bb8:	f001 fa09 	bl	7fce <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6bbc:	ea54 0305 	orrs.w	r3, r4, r5
    6bc0:	d104      	bne.n	6bcc <z_tick_sleep+0x3c>
	z_impl_k_yield();
    6bc2:	f7ff ff41 	bl	6a48 <z_impl_k_yield>
		k_yield();
		return 0;
    6bc6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    6bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    6bcc:	f06f 0301 	mvn.w	r3, #1
    6bd0:	1b1e      	subs	r6, r3, r4
    6bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6bd6:	eb63 0705 	sbc.w	r7, r3, r5
    6bda:	2e01      	cmp	r6, #1
    6bdc:	f177 0300 	sbcs.w	r3, r7, #0
    6be0:	da64      	bge.n	6cac <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6be2:	f001 fe56 	bl	8892 <sys_clock_tick_get_32>
    6be6:	1906      	adds	r6, r0, r4
    6be8:	f04f 0320 	mov.w	r3, #32
    6bec:	f3ef 8811 	mrs	r8, BASEPRI
    6bf0:	f383 8812 	msr	BASEPRI_MAX, r3
    6bf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bf8:	4832      	ldr	r0, [pc, #200]	; (6cc4 <z_tick_sleep+0x134>)
    6bfa:	f000 fb73 	bl	72e4 <z_spin_lock_valid>
    6bfe:	b968      	cbnz	r0, 6c1c <z_tick_sleep+0x8c>
    6c00:	4a31      	ldr	r2, [pc, #196]	; (6cc8 <z_tick_sleep+0x138>)
    6c02:	4932      	ldr	r1, [pc, #200]	; (6ccc <z_tick_sleep+0x13c>)
    6c04:	482d      	ldr	r0, [pc, #180]	; (6cbc <z_tick_sleep+0x12c>)
    6c06:	2381      	movs	r3, #129	; 0x81
    6c08:	f001 fab5 	bl	8176 <printk>
    6c0c:	492d      	ldr	r1, [pc, #180]	; (6cc4 <z_tick_sleep+0x134>)
    6c0e:	4830      	ldr	r0, [pc, #192]	; (6cd0 <z_tick_sleep+0x140>)
    6c10:	f001 fab1 	bl	8176 <printk>
    6c14:	482c      	ldr	r0, [pc, #176]	; (6cc8 <z_tick_sleep+0x138>)
    6c16:	2181      	movs	r1, #129	; 0x81
    6c18:	f001 f9d9 	bl	7fce <assert_post_action>
	pending_current = _current;
    6c1c:	4f2d      	ldr	r7, [pc, #180]	; (6cd4 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    6c1e:	4829      	ldr	r0, [pc, #164]	; (6cc4 <z_tick_sleep+0x134>)
    6c20:	f000 fb7e 	bl	7320 <z_spin_lock_set_owner>
    6c24:	4b2c      	ldr	r3, [pc, #176]	; (6cd8 <z_tick_sleep+0x148>)
    6c26:	68b8      	ldr	r0, [r7, #8]
    6c28:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6c2a:	f7ff fbf7 	bl	641c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6c2e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6c30:	492a      	ldr	r1, [pc, #168]	; (6cdc <z_tick_sleep+0x14c>)
    6c32:	4622      	mov	r2, r4
    6c34:	462b      	mov	r3, r5
    6c36:	3018      	adds	r0, #24
    6c38:	f000 fbca 	bl	73d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6c3c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c3e:	4821      	ldr	r0, [pc, #132]	; (6cc4 <z_tick_sleep+0x134>)
    6c40:	7b53      	ldrb	r3, [r2, #13]
    6c42:	f043 0310 	orr.w	r3, r3, #16
    6c46:	7353      	strb	r3, [r2, #13]
    6c48:	f000 fb5a 	bl	7300 <z_spin_unlock_valid>
    6c4c:	b968      	cbnz	r0, 6c6a <z_tick_sleep+0xda>
    6c4e:	4a1e      	ldr	r2, [pc, #120]	; (6cc8 <z_tick_sleep+0x138>)
    6c50:	4923      	ldr	r1, [pc, #140]	; (6ce0 <z_tick_sleep+0x150>)
    6c52:	481a      	ldr	r0, [pc, #104]	; (6cbc <z_tick_sleep+0x12c>)
    6c54:	23c3      	movs	r3, #195	; 0xc3
    6c56:	f001 fa8e 	bl	8176 <printk>
    6c5a:	491a      	ldr	r1, [pc, #104]	; (6cc4 <z_tick_sleep+0x134>)
    6c5c:	4821      	ldr	r0, [pc, #132]	; (6ce4 <z_tick_sleep+0x154>)
    6c5e:	f001 fa8a 	bl	8176 <printk>
    6c62:	4819      	ldr	r0, [pc, #100]	; (6cc8 <z_tick_sleep+0x138>)
    6c64:	21c3      	movs	r1, #195	; 0xc3
    6c66:	f001 f9b2 	bl	7fce <assert_post_action>
    6c6a:	4640      	mov	r0, r8
    6c6c:	f7fb fb8a 	bl	2384 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    6c70:	68bb      	ldr	r3, [r7, #8]
    6c72:	7b5b      	ldrb	r3, [r3, #13]
    6c74:	06db      	lsls	r3, r3, #27
    6c76:	d50e      	bpl.n	6c96 <z_tick_sleep+0x106>
    6c78:	491b      	ldr	r1, [pc, #108]	; (6ce8 <z_tick_sleep+0x158>)
    6c7a:	4a0f      	ldr	r2, [pc, #60]	; (6cb8 <z_tick_sleep+0x128>)
    6c7c:	480f      	ldr	r0, [pc, #60]	; (6cbc <z_tick_sleep+0x12c>)
    6c7e:	f240 5319 	movw	r3, #1305	; 0x519
    6c82:	f001 fa78 	bl	8176 <printk>
    6c86:	480e      	ldr	r0, [pc, #56]	; (6cc0 <z_tick_sleep+0x130>)
    6c88:	f001 fa75 	bl	8176 <printk>
    6c8c:	480a      	ldr	r0, [pc, #40]	; (6cb8 <z_tick_sleep+0x128>)
    6c8e:	f240 5119 	movw	r1, #1305	; 0x519
    6c92:	f001 f99c 	bl	7fce <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6c96:	f001 fdfc 	bl	8892 <sys_clock_tick_get_32>
    6c9a:	1a30      	subs	r0, r6, r0
    6c9c:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    6ca0:	2801      	cmp	r0, #1
    6ca2:	f171 0300 	sbcs.w	r3, r1, #0
    6ca6:	bfb8      	it	lt
    6ca8:	2000      	movlt	r0, #0
    6caa:	e78d      	b.n	6bc8 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6cac:	f06f 0601 	mvn.w	r6, #1
    6cb0:	1b36      	subs	r6, r6, r4
    6cb2:	e799      	b.n	6be8 <z_tick_sleep+0x58>
    6cb4:	00009a66 	.word	0x00009a66
    6cb8:	00009b13 	.word	0x00009b13
    6cbc:	00008fa5 	.word	0x00008fa5
    6cc0:	00009adf 	.word	0x00009adf
    6cc4:	20000bf4 	.word	0x20000bf4
    6cc8:	000090b8 	.word	0x000090b8
    6ccc:	0000910a 	.word	0x0000910a
    6cd0:	0000911f 	.word	0x0000911f
    6cd4:	20000bc4 	.word	0x20000bc4
    6cd8:	20000bf0 	.word	0x20000bf0
    6cdc:	00006369 	.word	0x00006369
    6ce0:	000090de 	.word	0x000090de
    6ce4:	000090f5 	.word	0x000090f5
    6ce8:	00009bc5 	.word	0x00009bc5

00006cec <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6cec:	b538      	push	{r3, r4, r5, lr}
    6cee:	4604      	mov	r4, r0
    6cf0:	460d      	mov	r5, r1
    6cf2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6cf6:	b173      	cbz	r3, 6d16 <z_impl_k_sleep+0x2a>
    6cf8:	4913      	ldr	r1, [pc, #76]	; (6d48 <z_impl_k_sleep+0x5c>)
    6cfa:	4a14      	ldr	r2, [pc, #80]	; (6d4c <z_impl_k_sleep+0x60>)
    6cfc:	4814      	ldr	r0, [pc, #80]	; (6d50 <z_impl_k_sleep+0x64>)
    6cfe:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    6d02:	f001 fa38 	bl	8176 <printk>
    6d06:	4813      	ldr	r0, [pc, #76]	; (6d54 <z_impl_k_sleep+0x68>)
    6d08:	f001 fa35 	bl	8176 <printk>
    6d0c:	480f      	ldr	r0, [pc, #60]	; (6d4c <z_impl_k_sleep+0x60>)
    6d0e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    6d12:	f001 f95c 	bl	7fce <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6d16:	1c6b      	adds	r3, r5, #1
    6d18:	bf08      	it	eq
    6d1a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    6d1e:	d106      	bne.n	6d2e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    6d20:	4b0d      	ldr	r3, [pc, #52]	; (6d58 <z_impl_k_sleep+0x6c>)
    6d22:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6d24:	f7ff fd02 	bl	672c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6d2c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    6d2e:	4620      	mov	r0, r4
    6d30:	4629      	mov	r1, r5
    6d32:	f7ff ff2d 	bl	6b90 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    6d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6d3a:	fb80 3403 	smull	r3, r4, r0, r3
    6d3e:	0bd8      	lsrs	r0, r3, #15
    6d40:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    6d44:	e7f2      	b.n	6d2c <z_impl_k_sleep+0x40>
    6d46:	bf00      	nop
    6d48:	00009a66 	.word	0x00009a66
    6d4c:	00009b13 	.word	0x00009b13
    6d50:	00008fa5 	.word	0x00008fa5
    6d54:	00009adf 	.word	0x00009adf
    6d58:	20000bc4 	.word	0x20000bc4

00006d5c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6d5c:	4b01      	ldr	r3, [pc, #4]	; (6d64 <z_impl_z_current_get+0x8>)
    6d5e:	6898      	ldr	r0, [r3, #8]
    6d60:	4770      	bx	lr
    6d62:	bf00      	nop
    6d64:	20000bc4 	.word	0x20000bc4

00006d68 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d6c:	4604      	mov	r4, r0
    6d6e:	f04f 0320 	mov.w	r3, #32
    6d72:	f3ef 8611 	mrs	r6, BASEPRI
    6d76:	f383 8812 	msr	BASEPRI_MAX, r3
    6d7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d7e:	4848      	ldr	r0, [pc, #288]	; (6ea0 <z_thread_abort+0x138>)
    6d80:	f000 fab0 	bl	72e4 <z_spin_lock_valid>
    6d84:	b968      	cbnz	r0, 6da2 <z_thread_abort+0x3a>
    6d86:	4a47      	ldr	r2, [pc, #284]	; (6ea4 <z_thread_abort+0x13c>)
    6d88:	4947      	ldr	r1, [pc, #284]	; (6ea8 <z_thread_abort+0x140>)
    6d8a:	4848      	ldr	r0, [pc, #288]	; (6eac <z_thread_abort+0x144>)
    6d8c:	2381      	movs	r3, #129	; 0x81
    6d8e:	f001 f9f2 	bl	8176 <printk>
    6d92:	4943      	ldr	r1, [pc, #268]	; (6ea0 <z_thread_abort+0x138>)
    6d94:	4846      	ldr	r0, [pc, #280]	; (6eb0 <z_thread_abort+0x148>)
    6d96:	f001 f9ee 	bl	8176 <printk>
    6d9a:	4842      	ldr	r0, [pc, #264]	; (6ea4 <z_thread_abort+0x13c>)
    6d9c:	2181      	movs	r1, #129	; 0x81
    6d9e:	f001 f916 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    6da2:	483f      	ldr	r0, [pc, #252]	; (6ea0 <z_thread_abort+0x138>)
    6da4:	f000 fabc 	bl	7320 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6da8:	7b63      	ldrb	r3, [r4, #13]
    6daa:	071a      	lsls	r2, r3, #28
    6dac:	d517      	bpl.n	6dde <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6dae:	483c      	ldr	r0, [pc, #240]	; (6ea0 <z_thread_abort+0x138>)
    6db0:	f000 faa6 	bl	7300 <z_spin_unlock_valid>
    6db4:	b968      	cbnz	r0, 6dd2 <z_thread_abort+0x6a>
    6db6:	4a3b      	ldr	r2, [pc, #236]	; (6ea4 <z_thread_abort+0x13c>)
    6db8:	493e      	ldr	r1, [pc, #248]	; (6eb4 <z_thread_abort+0x14c>)
    6dba:	483c      	ldr	r0, [pc, #240]	; (6eac <z_thread_abort+0x144>)
    6dbc:	23ac      	movs	r3, #172	; 0xac
    6dbe:	f001 f9da 	bl	8176 <printk>
    6dc2:	4937      	ldr	r1, [pc, #220]	; (6ea0 <z_thread_abort+0x138>)
    6dc4:	483c      	ldr	r0, [pc, #240]	; (6eb8 <z_thread_abort+0x150>)
    6dc6:	f001 f9d6 	bl	8176 <printk>
    6dca:	4836      	ldr	r0, [pc, #216]	; (6ea4 <z_thread_abort+0x13c>)
    6dcc:	21ac      	movs	r1, #172	; 0xac
    6dce:	f001 f8fe 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6dd2:	f386 8811 	msr	BASEPRI, r6
    6dd6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6dde:	f023 0220 	bic.w	r2, r3, #32
    6de2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6de6:	09d2      	lsrs	r2, r2, #7
    6de8:	d142      	bne.n	6e70 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6dea:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6dec:	68a3      	ldr	r3, [r4, #8]
    6dee:	b113      	cbz	r3, 6df6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    6df0:	4620      	mov	r0, r4
    6df2:	f7ff f8a3 	bl	5f3c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6df6:	f104 0018 	add.w	r0, r4, #24
    6dfa:	f000 fbbd 	bl	7578 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6dfe:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6e02:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6e06:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e08:	42bd      	cmp	r5, r7
    6e0a:	d001      	beq.n	6e10 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6e0c:	2d00      	cmp	r5, #0
    6e0e:	d139      	bne.n	6e84 <z_thread_abort+0x11c>
		update_cache(1);
    6e10:	2001      	movs	r0, #1
    6e12:	f7ff f8b5 	bl	5f80 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6e16:	4b29      	ldr	r3, [pc, #164]	; (6ebc <z_thread_abort+0x154>)
    6e18:	689b      	ldr	r3, [r3, #8]
    6e1a:	42a3      	cmp	r3, r4
    6e1c:	d1c7      	bne.n	6dae <z_thread_abort+0x46>
    6e1e:	f3ef 8305 	mrs	r3, IPSR
    6e22:	2b00      	cmp	r3, #0
    6e24:	d1c3      	bne.n	6dae <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e26:	481e      	ldr	r0, [pc, #120]	; (6ea0 <z_thread_abort+0x138>)
    6e28:	f000 fa6a 	bl	7300 <z_spin_unlock_valid>
    6e2c:	b968      	cbnz	r0, 6e4a <z_thread_abort+0xe2>
    6e2e:	4a1d      	ldr	r2, [pc, #116]	; (6ea4 <z_thread_abort+0x13c>)
    6e30:	4920      	ldr	r1, [pc, #128]	; (6eb4 <z_thread_abort+0x14c>)
    6e32:	481e      	ldr	r0, [pc, #120]	; (6eac <z_thread_abort+0x144>)
    6e34:	23c3      	movs	r3, #195	; 0xc3
    6e36:	f001 f99e 	bl	8176 <printk>
    6e3a:	4919      	ldr	r1, [pc, #100]	; (6ea0 <z_thread_abort+0x138>)
    6e3c:	481e      	ldr	r0, [pc, #120]	; (6eb8 <z_thread_abort+0x150>)
    6e3e:	f001 f99a 	bl	8176 <printk>
    6e42:	4818      	ldr	r0, [pc, #96]	; (6ea4 <z_thread_abort+0x13c>)
    6e44:	21c3      	movs	r1, #195	; 0xc3
    6e46:	f001 f8c2 	bl	7fce <assert_post_action>
    6e4a:	4630      	mov	r0, r6
    6e4c:	f7fb fa9a 	bl	2384 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    6e50:	4a1b      	ldr	r2, [pc, #108]	; (6ec0 <z_thread_abort+0x158>)
    6e52:	491c      	ldr	r1, [pc, #112]	; (6ec4 <z_thread_abort+0x15c>)
    6e54:	4815      	ldr	r0, [pc, #84]	; (6eac <z_thread_abort+0x144>)
    6e56:	f240 634b 	movw	r3, #1611	; 0x64b
    6e5a:	f001 f98c 	bl	8176 <printk>
    6e5e:	481a      	ldr	r0, [pc, #104]	; (6ec8 <z_thread_abort+0x160>)
    6e60:	f001 f989 	bl	8176 <printk>
    6e64:	4816      	ldr	r0, [pc, #88]	; (6ec0 <z_thread_abort+0x158>)
    6e66:	f240 614b 	movw	r1, #1611	; 0x64b
    6e6a:	f001 f8b0 	bl	7fce <assert_post_action>
    6e6e:	e79e      	b.n	6dae <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e70:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6e74:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    6e78:	4814      	ldr	r0, [pc, #80]	; (6ecc <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e7a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6e7c:	4621      	mov	r1, r4
    6e7e:	f7ff f83b 	bl	5ef8 <z_priq_dumb_remove>
}
    6e82:	e7b3      	b.n	6dec <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6e84:	4628      	mov	r0, r5
    6e86:	f7ff f859 	bl	5f3c <unpend_thread_no_timeout>
    6e8a:	f105 0018 	add.w	r0, r5, #24
    6e8e:	f000 fb73 	bl	7578 <z_abort_timeout>
    6e92:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    6e96:	4628      	mov	r0, r5
    6e98:	f7ff f978 	bl	618c <ready_thread>
    6e9c:	e7b3      	b.n	6e06 <z_thread_abort+0x9e>
    6e9e:	bf00      	nop
    6ea0:	20000bf4 	.word	0x20000bf4
    6ea4:	000090b8 	.word	0x000090b8
    6ea8:	0000910a 	.word	0x0000910a
    6eac:	00008fa5 	.word	0x00008fa5
    6eb0:	0000911f 	.word	0x0000911f
    6eb4:	000090de 	.word	0x000090de
    6eb8:	000090f5 	.word	0x000090f5
    6ebc:	20000bc4 	.word	0x20000bc4
    6ec0:	00009b13 	.word	0x00009b13
    6ec4:	0000978b 	.word	0x0000978b
    6ec8:	00009c05 	.word	0x00009c05
    6ecc:	20000be4 	.word	0x20000be4

00006ed0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6ed0:	b538      	push	{r3, r4, r5, lr}
    6ed2:	4604      	mov	r4, r0
	__asm__ volatile(
    6ed4:	f04f 0320 	mov.w	r3, #32
    6ed8:	f3ef 8511 	mrs	r5, BASEPRI
    6edc:	f383 8812 	msr	BASEPRI_MAX, r3
    6ee0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ee4:	4814      	ldr	r0, [pc, #80]	; (6f38 <z_impl_k_sem_give+0x68>)
    6ee6:	f000 f9fd 	bl	72e4 <z_spin_lock_valid>
    6eea:	b968      	cbnz	r0, 6f08 <z_impl_k_sem_give+0x38>
    6eec:	4a13      	ldr	r2, [pc, #76]	; (6f3c <z_impl_k_sem_give+0x6c>)
    6eee:	4914      	ldr	r1, [pc, #80]	; (6f40 <z_impl_k_sem_give+0x70>)
    6ef0:	4814      	ldr	r0, [pc, #80]	; (6f44 <z_impl_k_sem_give+0x74>)
    6ef2:	2381      	movs	r3, #129	; 0x81
    6ef4:	f001 f93f 	bl	8176 <printk>
    6ef8:	490f      	ldr	r1, [pc, #60]	; (6f38 <z_impl_k_sem_give+0x68>)
    6efa:	4813      	ldr	r0, [pc, #76]	; (6f48 <z_impl_k_sem_give+0x78>)
    6efc:	f001 f93b 	bl	8176 <printk>
    6f00:	480e      	ldr	r0, [pc, #56]	; (6f3c <z_impl_k_sem_give+0x6c>)
    6f02:	2181      	movs	r1, #129	; 0x81
    6f04:	f001 f863 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    6f08:	480b      	ldr	r0, [pc, #44]	; (6f38 <z_impl_k_sem_give+0x68>)
    6f0a:	f000 fa09 	bl	7320 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6f0e:	4620      	mov	r0, r4
    6f10:	f7ff fd3e 	bl	6990 <z_unpend_first_thread>

	if (thread != NULL) {
    6f14:	b148      	cbz	r0, 6f2a <z_impl_k_sem_give+0x5a>
    6f16:	2200      	movs	r2, #0
    6f18:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6f1a:	f7ff f989 	bl	6230 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6f1e:	4629      	mov	r1, r5
    6f20:	4805      	ldr	r0, [pc, #20]	; (6f38 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6f26:	f7fe bf2f 	b.w	5d88 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6f2a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6f2e:	429a      	cmp	r2, r3
    6f30:	bf18      	it	ne
    6f32:	3301      	addne	r3, #1
    6f34:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    6f36:	e7f2      	b.n	6f1e <z_impl_k_sem_give+0x4e>
    6f38:	20000c00 	.word	0x20000c00
    6f3c:	000090b8 	.word	0x000090b8
    6f40:	0000910a 	.word	0x0000910a
    6f44:	00008fa5 	.word	0x00008fa5
    6f48:	0000911f 	.word	0x0000911f

00006f4c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f4e:	4604      	mov	r4, r0
    6f50:	4616      	mov	r6, r2
    6f52:	461f      	mov	r7, r3
    6f54:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6f58:	b17b      	cbz	r3, 6f7a <z_impl_k_sem_take+0x2e>
    6f5a:	ea56 0307 	orrs.w	r3, r6, r7
    6f5e:	d00c      	beq.n	6f7a <z_impl_k_sem_take+0x2e>
    6f60:	4935      	ldr	r1, [pc, #212]	; (7038 <z_impl_k_sem_take+0xec>)
    6f62:	4a36      	ldr	r2, [pc, #216]	; (703c <z_impl_k_sem_take+0xf0>)
    6f64:	4836      	ldr	r0, [pc, #216]	; (7040 <z_impl_k_sem_take+0xf4>)
    6f66:	2379      	movs	r3, #121	; 0x79
    6f68:	f001 f905 	bl	8176 <printk>
    6f6c:	4835      	ldr	r0, [pc, #212]	; (7044 <z_impl_k_sem_take+0xf8>)
    6f6e:	f001 f902 	bl	8176 <printk>
    6f72:	4832      	ldr	r0, [pc, #200]	; (703c <z_impl_k_sem_take+0xf0>)
    6f74:	2179      	movs	r1, #121	; 0x79
    6f76:	f001 f82a 	bl	7fce <assert_post_action>
    6f7a:	f04f 0320 	mov.w	r3, #32
    6f7e:	f3ef 8511 	mrs	r5, BASEPRI
    6f82:	f383 8812 	msr	BASEPRI_MAX, r3
    6f86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f8a:	482f      	ldr	r0, [pc, #188]	; (7048 <z_impl_k_sem_take+0xfc>)
    6f8c:	f000 f9aa 	bl	72e4 <z_spin_lock_valid>
    6f90:	b968      	cbnz	r0, 6fae <z_impl_k_sem_take+0x62>
    6f92:	4a2e      	ldr	r2, [pc, #184]	; (704c <z_impl_k_sem_take+0x100>)
    6f94:	492e      	ldr	r1, [pc, #184]	; (7050 <z_impl_k_sem_take+0x104>)
    6f96:	482a      	ldr	r0, [pc, #168]	; (7040 <z_impl_k_sem_take+0xf4>)
    6f98:	2381      	movs	r3, #129	; 0x81
    6f9a:	f001 f8ec 	bl	8176 <printk>
    6f9e:	492a      	ldr	r1, [pc, #168]	; (7048 <z_impl_k_sem_take+0xfc>)
    6fa0:	482c      	ldr	r0, [pc, #176]	; (7054 <z_impl_k_sem_take+0x108>)
    6fa2:	f001 f8e8 	bl	8176 <printk>
    6fa6:	4829      	ldr	r0, [pc, #164]	; (704c <z_impl_k_sem_take+0x100>)
    6fa8:	2181      	movs	r1, #129	; 0x81
    6faa:	f001 f810 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    6fae:	4826      	ldr	r0, [pc, #152]	; (7048 <z_impl_k_sem_take+0xfc>)
    6fb0:	f000 f9b6 	bl	7320 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6fb4:	68a3      	ldr	r3, [r4, #8]
    6fb6:	b1d3      	cbz	r3, 6fee <z_impl_k_sem_take+0xa2>
		sem->count--;
    6fb8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fba:	4823      	ldr	r0, [pc, #140]	; (7048 <z_impl_k_sem_take+0xfc>)
    6fbc:	60a3      	str	r3, [r4, #8]
    6fbe:	f000 f99f 	bl	7300 <z_spin_unlock_valid>
    6fc2:	b968      	cbnz	r0, 6fe0 <z_impl_k_sem_take+0x94>
    6fc4:	4a21      	ldr	r2, [pc, #132]	; (704c <z_impl_k_sem_take+0x100>)
    6fc6:	4924      	ldr	r1, [pc, #144]	; (7058 <z_impl_k_sem_take+0x10c>)
    6fc8:	481d      	ldr	r0, [pc, #116]	; (7040 <z_impl_k_sem_take+0xf4>)
    6fca:	23ac      	movs	r3, #172	; 0xac
    6fcc:	f001 f8d3 	bl	8176 <printk>
    6fd0:	491d      	ldr	r1, [pc, #116]	; (7048 <z_impl_k_sem_take+0xfc>)
    6fd2:	4822      	ldr	r0, [pc, #136]	; (705c <z_impl_k_sem_take+0x110>)
    6fd4:	f001 f8cf 	bl	8176 <printk>
    6fd8:	481c      	ldr	r0, [pc, #112]	; (704c <z_impl_k_sem_take+0x100>)
    6fda:	21ac      	movs	r1, #172	; 0xac
    6fdc:	f000 fff7 	bl	7fce <assert_post_action>
	__asm__ volatile(
    6fe0:	f385 8811 	msr	BASEPRI, r5
    6fe4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6fe8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6fea:	b003      	add	sp, #12
    6fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6fee:	ea56 0307 	orrs.w	r3, r6, r7
    6ff2:	d118      	bne.n	7026 <z_impl_k_sem_take+0xda>
    6ff4:	4814      	ldr	r0, [pc, #80]	; (7048 <z_impl_k_sem_take+0xfc>)
    6ff6:	f000 f983 	bl	7300 <z_spin_unlock_valid>
    6ffa:	b968      	cbnz	r0, 7018 <z_impl_k_sem_take+0xcc>
    6ffc:	4a13      	ldr	r2, [pc, #76]	; (704c <z_impl_k_sem_take+0x100>)
    6ffe:	4916      	ldr	r1, [pc, #88]	; (7058 <z_impl_k_sem_take+0x10c>)
    7000:	480f      	ldr	r0, [pc, #60]	; (7040 <z_impl_k_sem_take+0xf4>)
    7002:	23ac      	movs	r3, #172	; 0xac
    7004:	f001 f8b7 	bl	8176 <printk>
    7008:	490f      	ldr	r1, [pc, #60]	; (7048 <z_impl_k_sem_take+0xfc>)
    700a:	4814      	ldr	r0, [pc, #80]	; (705c <z_impl_k_sem_take+0x110>)
    700c:	f001 f8b3 	bl	8176 <printk>
    7010:	480e      	ldr	r0, [pc, #56]	; (704c <z_impl_k_sem_take+0x100>)
    7012:	21ac      	movs	r1, #172	; 0xac
    7014:	f000 ffdb 	bl	7fce <assert_post_action>
    7018:	f385 8811 	msr	BASEPRI, r5
    701c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7020:	f06f 000f 	mvn.w	r0, #15
    7024:	e7e1      	b.n	6fea <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7026:	e9cd 6700 	strd	r6, r7, [sp]
    702a:	4622      	mov	r2, r4
    702c:	4629      	mov	r1, r5
    702e:	4806      	ldr	r0, [pc, #24]	; (7048 <z_impl_k_sem_take+0xfc>)
    7030:	f7ff fab0 	bl	6594 <z_pend_curr>
	return ret;
    7034:	e7d9      	b.n	6fea <z_impl_k_sem_take+0x9e>
    7036:	bf00      	nop
    7038:	00009c47 	.word	0x00009c47
    703c:	00009c27 	.word	0x00009c27
    7040:	00008fa5 	.word	0x00008fa5
    7044:	00009adf 	.word	0x00009adf
    7048:	20000c00 	.word	0x20000c00
    704c:	000090b8 	.word	0x000090b8
    7050:	0000910a 	.word	0x0000910a
    7054:	0000911f 	.word	0x0000911f
    7058:	000090de 	.word	0x000090de
    705c:	000090f5 	.word	0x000090f5

00007060 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7064:	b085      	sub	sp, #20
    7066:	4604      	mov	r4, r0
    7068:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    706c:	f1b8 0f0f 	cmp.w	r8, #15
{
    7070:	460f      	mov	r7, r1
    7072:	4615      	mov	r5, r2
    7074:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    7076:	d132      	bne.n	70de <z_setup_new_thread+0x7e>
    7078:	4b25      	ldr	r3, [pc, #148]	; (7110 <z_setup_new_thread+0xb0>)
    707a:	4599      	cmp	r9, r3
    707c:	d133      	bne.n	70e6 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    707e:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    7082:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7086:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7088:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    708a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    708c:	2304      	movs	r3, #4
    708e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7090:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7094:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    7098:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    709c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    709e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    70a2:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    70a4:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    70a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    70aa:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    70ac:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    70ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    70b0:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    70b2:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    70b4:	464b      	mov	r3, r9
	node->prev = NULL;
    70b6:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    70ba:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    70bc:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    70be:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    70c0:	4642      	mov	r2, r8
    70c2:	4639      	mov	r1, r7
    70c4:	4620      	mov	r0, r4
    70c6:	f7fb f977 	bl	23b8 <arch_new_thread>
	if (!_current) {
    70ca:	4b12      	ldr	r3, [pc, #72]	; (7114 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    70cc:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    70ce:	689b      	ldr	r3, [r3, #8]
    70d0:	b103      	cbz	r3, 70d4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    70d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    70d4:	6723      	str	r3, [r4, #112]	; 0x70
}
    70d6:	4640      	mov	r0, r8
    70d8:	b005      	add	sp, #20
    70da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    70de:	f108 0310 	add.w	r3, r8, #16
    70e2:	2b1e      	cmp	r3, #30
    70e4:	d9cb      	bls.n	707e <z_setup_new_thread+0x1e>
    70e6:	4a0c      	ldr	r2, [pc, #48]	; (7118 <z_setup_new_thread+0xb8>)
    70e8:	490c      	ldr	r1, [pc, #48]	; (711c <z_setup_new_thread+0xbc>)
    70ea:	480d      	ldr	r0, [pc, #52]	; (7120 <z_setup_new_thread+0xc0>)
    70ec:	f240 13ff 	movw	r3, #511	; 0x1ff
    70f0:	f001 f841 	bl	8176 <printk>
    70f4:	4641      	mov	r1, r8
    70f6:	480b      	ldr	r0, [pc, #44]	; (7124 <z_setup_new_thread+0xc4>)
    70f8:	f06f 030f 	mvn.w	r3, #15
    70fc:	220e      	movs	r2, #14
    70fe:	f001 f83a 	bl	8176 <printk>
    7102:	4805      	ldr	r0, [pc, #20]	; (7118 <z_setup_new_thread+0xb8>)
    7104:	f240 11ff 	movw	r1, #511	; 0x1ff
    7108:	f000 ff61 	bl	7fce <assert_post_action>
    710c:	e7b7      	b.n	707e <z_setup_new_thread+0x1e>
    710e:	bf00      	nop
    7110:	0000547d 	.word	0x0000547d
    7114:	20000bc4 	.word	0x20000bc4
    7118:	00009c94 	.word	0x00009c94
    711c:	00009cb7 	.word	0x00009cb7
    7120:	00008fa5 	.word	0x00008fa5
    7124:	00009d37 	.word	0x00009d37

00007128 <z_impl_k_thread_create>:
{
    7128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    712c:	b087      	sub	sp, #28
    712e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    7132:	4604      	mov	r4, r0
    7134:	460d      	mov	r5, r1
    7136:	4690      	mov	r8, r2
    7138:	4699      	mov	r9, r3
    713a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    713e:	b173      	cbz	r3, 715e <z_impl_k_thread_create+0x36>
    7140:	491b      	ldr	r1, [pc, #108]	; (71b0 <z_impl_k_thread_create+0x88>)
    7142:	4a1c      	ldr	r2, [pc, #112]	; (71b4 <z_impl_k_thread_create+0x8c>)
    7144:	481c      	ldr	r0, [pc, #112]	; (71b8 <z_impl_k_thread_create+0x90>)
    7146:	f44f 731a 	mov.w	r3, #616	; 0x268
    714a:	f001 f814 	bl	8176 <printk>
    714e:	481b      	ldr	r0, [pc, #108]	; (71bc <z_impl_k_thread_create+0x94>)
    7150:	f001 f811 	bl	8176 <printk>
    7154:	4817      	ldr	r0, [pc, #92]	; (71b4 <z_impl_k_thread_create+0x8c>)
    7156:	f44f 711a 	mov.w	r1, #616	; 0x268
    715a:	f000 ff38 	bl	7fce <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    715e:	2300      	movs	r3, #0
    7160:	9305      	str	r3, [sp, #20]
    7162:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7164:	9304      	str	r3, [sp, #16]
    7166:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7168:	9303      	str	r3, [sp, #12]
    716a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    716c:	9302      	str	r3, [sp, #8]
    716e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7170:	9301      	str	r3, [sp, #4]
    7172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7174:	9300      	str	r3, [sp, #0]
    7176:	4642      	mov	r2, r8
    7178:	464b      	mov	r3, r9
    717a:	4629      	mov	r1, r5
    717c:	4620      	mov	r0, r4
    717e:	f7ff ff6f 	bl	7060 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7182:	1c7b      	adds	r3, r7, #1
    7184:	bf08      	it	eq
    7186:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    718a:	d005      	beq.n	7198 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    718c:	ea56 0307 	orrs.w	r3, r6, r7
    7190:	d106      	bne.n	71a0 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    7192:	4620      	mov	r0, r4
    7194:	f7ff f894 	bl	62c0 <z_sched_start>
}
    7198:	4620      	mov	r0, r4
    719a:	b007      	add	sp, #28
    719c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    71a0:	4907      	ldr	r1, [pc, #28]	; (71c0 <z_impl_k_thread_create+0x98>)
    71a2:	4632      	mov	r2, r6
    71a4:	463b      	mov	r3, r7
    71a6:	f104 0018 	add.w	r0, r4, #24
    71aa:	f000 f911 	bl	73d0 <z_add_timeout>
    71ae:	e7f3      	b.n	7198 <z_impl_k_thread_create+0x70>
    71b0:	00009a66 	.word	0x00009a66
    71b4:	00009c94 	.word	0x00009c94
    71b8:	00008fa5 	.word	0x00008fa5
    71bc:	00009d68 	.word	0x00009d68
    71c0:	00006369 	.word	0x00006369

000071c4 <z_init_static_threads>:
{
    71c4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    71c8:	4f3f      	ldr	r7, [pc, #252]	; (72c8 <z_init_static_threads+0x104>)
    71ca:	4d40      	ldr	r5, [pc, #256]	; (72cc <z_init_static_threads+0x108>)
    71cc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 72dc <z_init_static_threads+0x118>
{
    71d0:	b086      	sub	sp, #24
    71d2:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    71d4:	42bd      	cmp	r5, r7
    71d6:	d90e      	bls.n	71f6 <z_init_static_threads+0x32>
    71d8:	493d      	ldr	r1, [pc, #244]	; (72d0 <z_init_static_threads+0x10c>)
    71da:	483e      	ldr	r0, [pc, #248]	; (72d4 <z_init_static_threads+0x110>)
    71dc:	f240 23cf 	movw	r3, #719	; 0x2cf
    71e0:	4642      	mov	r2, r8
    71e2:	f000 ffc8 	bl	8176 <printk>
    71e6:	483c      	ldr	r0, [pc, #240]	; (72d8 <z_init_static_threads+0x114>)
    71e8:	f000 ffc5 	bl	8176 <printk>
    71ec:	f240 21cf 	movw	r1, #719	; 0x2cf
    71f0:	4640      	mov	r0, r8
    71f2:	f000 feec 	bl	7fce <assert_post_action>
    71f6:	42b5      	cmp	r5, r6
    71f8:	f105 0430 	add.w	r4, r5, #48	; 0x30
    71fc:	d31f      	bcc.n	723e <z_init_static_threads+0x7a>
	k_sched_lock();
    71fe:	f7fe fe07 	bl	5e10 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7202:	4c32      	ldr	r4, [pc, #200]	; (72cc <z_init_static_threads+0x108>)
    7204:	4d35      	ldr	r5, [pc, #212]	; (72dc <z_init_static_threads+0x118>)
    7206:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 72d0 <z_init_static_threads+0x10c>
    720a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 72d4 <z_init_static_threads+0x110>
    720e:	42b4      	cmp	r4, r6
    7210:	d90e      	bls.n	7230 <z_init_static_threads+0x6c>
    7212:	4641      	mov	r1, r8
    7214:	f240 23ee 	movw	r3, #750	; 0x2ee
    7218:	462a      	mov	r2, r5
    721a:	4648      	mov	r0, r9
    721c:	f000 ffab 	bl	8176 <printk>
    7220:	482d      	ldr	r0, [pc, #180]	; (72d8 <z_init_static_threads+0x114>)
    7222:	f000 ffa8 	bl	8176 <printk>
    7226:	f240 21ee 	movw	r1, #750	; 0x2ee
    722a:	4628      	mov	r0, r5
    722c:	f000 fecf 	bl	7fce <assert_post_action>
    7230:	42b4      	cmp	r4, r6
    7232:	d321      	bcc.n	7278 <z_init_static_threads+0xb4>
}
    7234:	b006      	add	sp, #24
    7236:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    723a:	f7ff bae1 	b.w	6800 <k_sched_unlock>
		z_setup_new_thread(
    723e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7242:	9305      	str	r3, [sp, #20]
    7244:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7248:	9304      	str	r3, [sp, #16]
    724a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    724e:	9303      	str	r3, [sp, #12]
    7250:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7254:	9302      	str	r3, [sp, #8]
    7256:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    725a:	9301      	str	r3, [sp, #4]
    725c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7260:	9300      	str	r3, [sp, #0]
    7262:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7266:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    726a:	f7ff fef9 	bl	7060 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    726e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7272:	655d      	str	r5, [r3, #84]	; 0x54
    7274:	4625      	mov	r5, r4
    7276:	e7ad      	b.n	71d4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7278:	6a61      	ldr	r1, [r4, #36]	; 0x24
    727a:	1c4b      	adds	r3, r1, #1
    727c:	d014      	beq.n	72a8 <z_init_static_threads+0xe4>
    727e:	f240 32e7 	movw	r2, #999	; 0x3e7
    7282:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    7284:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    7288:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    728c:	4693      	mov	fp, r2
    728e:	469c      	mov	ip, r3
    7290:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7294:	459c      	cmp	ip, r3
    7296:	bf08      	it	eq
    7298:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    729a:	6827      	ldr	r7, [r4, #0]
    729c:	4658      	mov	r0, fp
    729e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    72a0:	d104      	bne.n	72ac <z_init_static_threads+0xe8>
	z_sched_start(thread);
    72a2:	4638      	mov	r0, r7
    72a4:	f7ff f80c 	bl	62c0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    72a8:	3430      	adds	r4, #48	; 0x30
    72aa:	e7b0      	b.n	720e <z_init_static_threads+0x4a>
    72ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    72b0:	2300      	movs	r3, #0
    72b2:	f7f9 fb13 	bl	8dc <__aeabi_uldivmod>
    72b6:	4602      	mov	r2, r0
    72b8:	460b      	mov	r3, r1
    72ba:	f107 0018 	add.w	r0, r7, #24
    72be:	4908      	ldr	r1, [pc, #32]	; (72e0 <z_init_static_threads+0x11c>)
    72c0:	f000 f886 	bl	73d0 <z_add_timeout>
    72c4:	e7f0      	b.n	72a8 <z_init_static_threads+0xe4>
    72c6:	bf00      	nop
    72c8:	200001f0 	.word	0x200001f0
    72cc:	200001f0 	.word	0x200001f0
    72d0:	00009d8d 	.word	0x00009d8d
    72d4:	00008fa5 	.word	0x00008fa5
    72d8:	00009a25 	.word	0x00009a25
    72dc:	00009c94 	.word	0x00009c94
    72e0:	00006369 	.word	0x00006369

000072e4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    72e4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    72e6:	b138      	cbz	r0, 72f8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    72e8:	4b04      	ldr	r3, [pc, #16]	; (72fc <z_spin_lock_valid+0x18>)
    72ea:	7d1b      	ldrb	r3, [r3, #20]
    72ec:	f000 0003 	and.w	r0, r0, #3
    72f0:	1ac0      	subs	r0, r0, r3
    72f2:	bf18      	it	ne
    72f4:	2001      	movne	r0, #1
    72f6:	4770      	bx	lr
			return false;
		}
	}
	return true;
    72f8:	2001      	movs	r0, #1
}
    72fa:	4770      	bx	lr
    72fc:	20000bc4 	.word	0x20000bc4

00007300 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7300:	4906      	ldr	r1, [pc, #24]	; (731c <z_spin_unlock_valid+0x1c>)
{
    7302:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7304:	688a      	ldr	r2, [r1, #8]
    7306:	7d08      	ldrb	r0, [r1, #20]
    7308:	6819      	ldr	r1, [r3, #0]
    730a:	4302      	orrs	r2, r0
    730c:	4291      	cmp	r1, r2
    730e:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    7312:	bf04      	itt	eq
    7314:	6018      	streq	r0, [r3, #0]
	return true;
    7316:	2001      	moveq	r0, #1
}
    7318:	4770      	bx	lr
    731a:	bf00      	nop
    731c:	20000bc4 	.word	0x20000bc4

00007320 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7320:	4a02      	ldr	r2, [pc, #8]	; (732c <z_spin_lock_set_owner+0xc>)
    7322:	7d11      	ldrb	r1, [r2, #20]
    7324:	6893      	ldr	r3, [r2, #8]
    7326:	430b      	orrs	r3, r1
    7328:	6003      	str	r3, [r0, #0]
}
    732a:	4770      	bx	lr
    732c:	20000bc4 	.word	0x20000bc4

00007330 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7330:	4b03      	ldr	r3, [pc, #12]	; (7340 <elapsed+0x10>)
    7332:	681b      	ldr	r3, [r3, #0]
    7334:	b90b      	cbnz	r3, 733a <elapsed+0xa>
    7336:	f7fc beed 	b.w	4114 <sys_clock_elapsed>
}
    733a:	2000      	movs	r0, #0
    733c:	4770      	bx	lr
    733e:	bf00      	nop
    7340:	20000c04 	.word	0x20000c04

00007344 <next_timeout>:

static int32_t next_timeout(void)
{
    7344:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7346:	4b13      	ldr	r3, [pc, #76]	; (7394 <next_timeout+0x50>)
    7348:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    734a:	429c      	cmp	r4, r3
    734c:	bf08      	it	eq
    734e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7350:	f7ff ffee 	bl	7330 <elapsed>
    7354:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    7356:	b1bc      	cbz	r4, 7388 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7358:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    735c:	1b40      	subs	r0, r0, r5
    735e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    7362:	2801      	cmp	r0, #1
    7364:	f171 0300 	sbcs.w	r3, r1, #0
    7368:	db11      	blt.n	738e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    736a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    736e:	2300      	movs	r3, #0
    7370:	4282      	cmp	r2, r0
    7372:	eb73 0401 	sbcs.w	r4, r3, r1
    7376:	da00      	bge.n	737a <next_timeout+0x36>
    7378:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    737a:	4b07      	ldr	r3, [pc, #28]	; (7398 <next_timeout+0x54>)
    737c:	691b      	ldr	r3, [r3, #16]
    737e:	b113      	cbz	r3, 7386 <next_timeout+0x42>
    7380:	4298      	cmp	r0, r3
    7382:	bfa8      	it	ge
    7384:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7386:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    7388:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    738c:	e7f5      	b.n	737a <next_timeout+0x36>
    738e:	2000      	movs	r0, #0
    7390:	e7f3      	b.n	737a <next_timeout+0x36>
    7392:	bf00      	nop
    7394:	2000016c 	.word	0x2000016c
    7398:	20000bc4 	.word	0x20000bc4

0000739c <remove_timeout>:
{
    739c:	b530      	push	{r4, r5, lr}
    739e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    73a0:	b168      	cbz	r0, 73be <remove_timeout+0x22>
    73a2:	4a0a      	ldr	r2, [pc, #40]	; (73cc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    73a4:	6852      	ldr	r2, [r2, #4]
    73a6:	4290      	cmp	r0, r2
    73a8:	d009      	beq.n	73be <remove_timeout+0x22>
	if (next(t) != NULL) {
    73aa:	b143      	cbz	r3, 73be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    73ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    73b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    73b4:	1912      	adds	r2, r2, r4
    73b6:	eb45 0101 	adc.w	r1, r5, r1
    73ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    73be:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    73c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    73c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    73c4:	2300      	movs	r3, #0
	node->prev = NULL;
    73c6:	e9c0 3300 	strd	r3, r3, [r0]
}
    73ca:	bd30      	pop	{r4, r5, pc}
    73cc:	2000016c 	.word	0x2000016c

000073d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    73d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73d4:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    73d6:	1c6b      	adds	r3, r5, #1
    73d8:	bf08      	it	eq
    73da:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    73de:	4682      	mov	sl, r0
    73e0:	468b      	mov	fp, r1
    73e2:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    73e4:	f000 80aa 	beq.w	753c <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    73e8:	6803      	ldr	r3, [r0, #0]
    73ea:	b163      	cbz	r3, 7406 <z_add_timeout+0x36>
    73ec:	4955      	ldr	r1, [pc, #340]	; (7544 <z_add_timeout+0x174>)
    73ee:	4a56      	ldr	r2, [pc, #344]	; (7548 <z_add_timeout+0x178>)
    73f0:	4856      	ldr	r0, [pc, #344]	; (754c <z_add_timeout+0x17c>)
    73f2:	235d      	movs	r3, #93	; 0x5d
    73f4:	f000 febf 	bl	8176 <printk>
    73f8:	4855      	ldr	r0, [pc, #340]	; (7550 <z_add_timeout+0x180>)
    73fa:	f000 febc 	bl	8176 <printk>
    73fe:	4852      	ldr	r0, [pc, #328]	; (7548 <z_add_timeout+0x178>)
    7400:	215d      	movs	r1, #93	; 0x5d
    7402:	f000 fde4 	bl	7fce <assert_post_action>
	to->fn = fn;
    7406:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    740a:	f04f 0320 	mov.w	r3, #32
    740e:	f3ef 8b11 	mrs	fp, BASEPRI
    7412:	f383 8812 	msr	BASEPRI_MAX, r3
    7416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    741a:	484e      	ldr	r0, [pc, #312]	; (7554 <z_add_timeout+0x184>)
    741c:	f7ff ff62 	bl	72e4 <z_spin_lock_valid>
    7420:	b968      	cbnz	r0, 743e <z_add_timeout+0x6e>
    7422:	4a4d      	ldr	r2, [pc, #308]	; (7558 <z_add_timeout+0x188>)
    7424:	494d      	ldr	r1, [pc, #308]	; (755c <z_add_timeout+0x18c>)
    7426:	4849      	ldr	r0, [pc, #292]	; (754c <z_add_timeout+0x17c>)
    7428:	2381      	movs	r3, #129	; 0x81
    742a:	f000 fea4 	bl	8176 <printk>
    742e:	4949      	ldr	r1, [pc, #292]	; (7554 <z_add_timeout+0x184>)
    7430:	484b      	ldr	r0, [pc, #300]	; (7560 <z_add_timeout+0x190>)
    7432:	f000 fea0 	bl	8176 <printk>
    7436:	4848      	ldr	r0, [pc, #288]	; (7558 <z_add_timeout+0x188>)
    7438:	2181      	movs	r1, #129	; 0x81
    743a:	f000 fdc8 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    743e:	4845      	ldr	r0, [pc, #276]	; (7554 <z_add_timeout+0x184>)
    7440:	f7ff ff6e 	bl	7320 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7444:	f06f 0301 	mvn.w	r3, #1
    7448:	ebb3 0804 	subs.w	r8, r3, r4
    744c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7450:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7454:	f1b8 0f00 	cmp.w	r8, #0
    7458:	f179 0100 	sbcs.w	r1, r9, #0
    745c:	db1c      	blt.n	7498 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    745e:	4841      	ldr	r0, [pc, #260]	; (7564 <z_add_timeout+0x194>)
    7460:	e9d0 1000 	ldrd	r1, r0, [r0]
    7464:	1a5b      	subs	r3, r3, r1
    7466:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    746a:	1b1e      	subs	r6, r3, r4
    746c:	eb62 0705 	sbc.w	r7, r2, r5
    7470:	2e01      	cmp	r6, #1
    7472:	f177 0300 	sbcs.w	r3, r7, #0
    7476:	bfbc      	itt	lt
    7478:	2601      	movlt	r6, #1
    747a:	2700      	movlt	r7, #0
    747c:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    7480:	4a39      	ldr	r2, [pc, #228]	; (7568 <z_add_timeout+0x198>)
    7482:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7486:	4293      	cmp	r3, r2
    7488:	d11d      	bne.n	74c6 <z_add_timeout+0xf6>
	node->prev = tail;
    748a:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    748e:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    7492:	f8c2 a004 	str.w	sl, [r2, #4]
}
    7496:	e02c      	b.n	74f2 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7498:	f7ff ff4a 	bl	7330 <elapsed>
    749c:	1c63      	adds	r3, r4, #1
    749e:	9300      	str	r3, [sp, #0]
    74a0:	f145 0300 	adc.w	r3, r5, #0
    74a4:	9301      	str	r3, [sp, #4]
    74a6:	e9dd 2300 	ldrd	r2, r3, [sp]
    74aa:	1812      	adds	r2, r2, r0
    74ac:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    74b0:	e9ca 2304 	strd	r2, r3, [sl, #16]
    74b4:	e7e4      	b.n	7480 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    74b6:	1be0      	subs	r0, r4, r7
    74b8:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    74bc:	42b3      	cmp	r3, r6
    74be:	e9ca 0104 	strd	r0, r1, [sl, #16]
    74c2:	d0e2      	beq.n	748a <z_add_timeout+0xba>
    74c4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    74c6:	2b00      	cmp	r3, #0
    74c8:	d0df      	beq.n	748a <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    74ca:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    74ce:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    74d2:	42bc      	cmp	r4, r7
    74d4:	eb75 0108 	sbcs.w	r1, r5, r8
    74d8:	daed      	bge.n	74b6 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    74da:	1b38      	subs	r0, r7, r4
    74dc:	eb68 0105 	sbc.w	r1, r8, r5
    74e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    74e4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    74e6:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    74ea:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    74ee:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    74f2:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    74f4:	4293      	cmp	r3, r2
    74f6:	d00b      	beq.n	7510 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    74f8:	459a      	cmp	sl, r3
    74fa:	d109      	bne.n	7510 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    74fc:	f7ff ff22 	bl	7344 <next_timeout>

			if (next_time == 0 ||
    7500:	b118      	cbz	r0, 750a <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    7502:	4b1a      	ldr	r3, [pc, #104]	; (756c <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    7504:	691b      	ldr	r3, [r3, #16]
    7506:	4283      	cmp	r3, r0
    7508:	d002      	beq.n	7510 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    750a:	2100      	movs	r1, #0
    750c:	f7fc fdd2 	bl	40b4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7510:	4810      	ldr	r0, [pc, #64]	; (7554 <z_add_timeout+0x184>)
    7512:	f7ff fef5 	bl	7300 <z_spin_unlock_valid>
    7516:	b968      	cbnz	r0, 7534 <z_add_timeout+0x164>
    7518:	4a0f      	ldr	r2, [pc, #60]	; (7558 <z_add_timeout+0x188>)
    751a:	4915      	ldr	r1, [pc, #84]	; (7570 <z_add_timeout+0x1a0>)
    751c:	480b      	ldr	r0, [pc, #44]	; (754c <z_add_timeout+0x17c>)
    751e:	23ac      	movs	r3, #172	; 0xac
    7520:	f000 fe29 	bl	8176 <printk>
    7524:	490b      	ldr	r1, [pc, #44]	; (7554 <z_add_timeout+0x184>)
    7526:	4813      	ldr	r0, [pc, #76]	; (7574 <z_add_timeout+0x1a4>)
    7528:	f000 fe25 	bl	8176 <printk>
    752c:	480a      	ldr	r0, [pc, #40]	; (7558 <z_add_timeout+0x188>)
    752e:	21ac      	movs	r1, #172	; 0xac
    7530:	f000 fd4d 	bl	7fce <assert_post_action>
	__asm__ volatile(
    7534:	f38b 8811 	msr	BASEPRI, fp
    7538:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    753c:	b003      	add	sp, #12
    753e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7542:	bf00      	nop
    7544:	00009dde 	.word	0x00009dde
    7548:	00009dba 	.word	0x00009dba
    754c:	00008fa5 	.word	0x00008fa5
    7550:	00009adf 	.word	0x00009adf
    7554:	20000c08 	.word	0x20000c08
    7558:	000090b8 	.word	0x000090b8
    755c:	0000910a 	.word	0x0000910a
    7560:	0000911f 	.word	0x0000911f
    7564:	200004e0 	.word	0x200004e0
    7568:	2000016c 	.word	0x2000016c
    756c:	20000bc4 	.word	0x20000bc4
    7570:	000090de 	.word	0x000090de
    7574:	000090f5 	.word	0x000090f5

00007578 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7578:	b538      	push	{r3, r4, r5, lr}
    757a:	4604      	mov	r4, r0
	__asm__ volatile(
    757c:	f04f 0320 	mov.w	r3, #32
    7580:	f3ef 8511 	mrs	r5, BASEPRI
    7584:	f383 8812 	msr	BASEPRI_MAX, r3
    7588:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    758c:	481a      	ldr	r0, [pc, #104]	; (75f8 <z_abort_timeout+0x80>)
    758e:	f7ff fea9 	bl	72e4 <z_spin_lock_valid>
    7592:	b968      	cbnz	r0, 75b0 <z_abort_timeout+0x38>
    7594:	4a19      	ldr	r2, [pc, #100]	; (75fc <z_abort_timeout+0x84>)
    7596:	491a      	ldr	r1, [pc, #104]	; (7600 <z_abort_timeout+0x88>)
    7598:	481a      	ldr	r0, [pc, #104]	; (7604 <z_abort_timeout+0x8c>)
    759a:	2381      	movs	r3, #129	; 0x81
    759c:	f000 fdeb 	bl	8176 <printk>
    75a0:	4915      	ldr	r1, [pc, #84]	; (75f8 <z_abort_timeout+0x80>)
    75a2:	4819      	ldr	r0, [pc, #100]	; (7608 <z_abort_timeout+0x90>)
    75a4:	f000 fde7 	bl	8176 <printk>
    75a8:	4814      	ldr	r0, [pc, #80]	; (75fc <z_abort_timeout+0x84>)
    75aa:	2181      	movs	r1, #129	; 0x81
    75ac:	f000 fd0f 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    75b0:	4811      	ldr	r0, [pc, #68]	; (75f8 <z_abort_timeout+0x80>)
    75b2:	f7ff feb5 	bl	7320 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    75b6:	6823      	ldr	r3, [r4, #0]
    75b8:	b1db      	cbz	r3, 75f2 <z_abort_timeout+0x7a>
			remove_timeout(to);
    75ba:	4620      	mov	r0, r4
    75bc:	f7ff feee 	bl	739c <remove_timeout>
			ret = 0;
    75c0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75c2:	480d      	ldr	r0, [pc, #52]	; (75f8 <z_abort_timeout+0x80>)
    75c4:	f7ff fe9c 	bl	7300 <z_spin_unlock_valid>
    75c8:	b968      	cbnz	r0, 75e6 <z_abort_timeout+0x6e>
    75ca:	4a0c      	ldr	r2, [pc, #48]	; (75fc <z_abort_timeout+0x84>)
    75cc:	490f      	ldr	r1, [pc, #60]	; (760c <z_abort_timeout+0x94>)
    75ce:	480d      	ldr	r0, [pc, #52]	; (7604 <z_abort_timeout+0x8c>)
    75d0:	23ac      	movs	r3, #172	; 0xac
    75d2:	f000 fdd0 	bl	8176 <printk>
    75d6:	4908      	ldr	r1, [pc, #32]	; (75f8 <z_abort_timeout+0x80>)
    75d8:	480d      	ldr	r0, [pc, #52]	; (7610 <z_abort_timeout+0x98>)
    75da:	f000 fdcc 	bl	8176 <printk>
    75de:	4807      	ldr	r0, [pc, #28]	; (75fc <z_abort_timeout+0x84>)
    75e0:	21ac      	movs	r1, #172	; 0xac
    75e2:	f000 fcf4 	bl	7fce <assert_post_action>
	__asm__ volatile(
    75e6:	f385 8811 	msr	BASEPRI, r5
    75ea:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    75ee:	4620      	mov	r0, r4
    75f0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    75f2:	f06f 0415 	mvn.w	r4, #21
    75f6:	e7e4      	b.n	75c2 <z_abort_timeout+0x4a>
    75f8:	20000c08 	.word	0x20000c08
    75fc:	000090b8 	.word	0x000090b8
    7600:	0000910a 	.word	0x0000910a
    7604:	00008fa5 	.word	0x00008fa5
    7608:	0000911f 	.word	0x0000911f
    760c:	000090de 	.word	0x000090de
    7610:	000090f5 	.word	0x000090f5

00007614 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7614:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7616:	f04f 0320 	mov.w	r3, #32
    761a:	f3ef 8511 	mrs	r5, BASEPRI
    761e:	f383 8812 	msr	BASEPRI_MAX, r3
    7622:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7626:	4818      	ldr	r0, [pc, #96]	; (7688 <z_get_next_timeout_expiry+0x74>)
    7628:	f7ff fe5c 	bl	72e4 <z_spin_lock_valid>
    762c:	b968      	cbnz	r0, 764a <z_get_next_timeout_expiry+0x36>
    762e:	4a17      	ldr	r2, [pc, #92]	; (768c <z_get_next_timeout_expiry+0x78>)
    7630:	4917      	ldr	r1, [pc, #92]	; (7690 <z_get_next_timeout_expiry+0x7c>)
    7632:	4818      	ldr	r0, [pc, #96]	; (7694 <z_get_next_timeout_expiry+0x80>)
    7634:	2381      	movs	r3, #129	; 0x81
    7636:	f000 fd9e 	bl	8176 <printk>
    763a:	4913      	ldr	r1, [pc, #76]	; (7688 <z_get_next_timeout_expiry+0x74>)
    763c:	4816      	ldr	r0, [pc, #88]	; (7698 <z_get_next_timeout_expiry+0x84>)
    763e:	f000 fd9a 	bl	8176 <printk>
    7642:	4812      	ldr	r0, [pc, #72]	; (768c <z_get_next_timeout_expiry+0x78>)
    7644:	2181      	movs	r1, #129	; 0x81
    7646:	f000 fcc2 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    764a:	480f      	ldr	r0, [pc, #60]	; (7688 <z_get_next_timeout_expiry+0x74>)
    764c:	f7ff fe68 	bl	7320 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7650:	f7ff fe78 	bl	7344 <next_timeout>
    7654:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7656:	480c      	ldr	r0, [pc, #48]	; (7688 <z_get_next_timeout_expiry+0x74>)
    7658:	f7ff fe52 	bl	7300 <z_spin_unlock_valid>
    765c:	b968      	cbnz	r0, 767a <z_get_next_timeout_expiry+0x66>
    765e:	4a0b      	ldr	r2, [pc, #44]	; (768c <z_get_next_timeout_expiry+0x78>)
    7660:	490e      	ldr	r1, [pc, #56]	; (769c <z_get_next_timeout_expiry+0x88>)
    7662:	480c      	ldr	r0, [pc, #48]	; (7694 <z_get_next_timeout_expiry+0x80>)
    7664:	23ac      	movs	r3, #172	; 0xac
    7666:	f000 fd86 	bl	8176 <printk>
    766a:	4907      	ldr	r1, [pc, #28]	; (7688 <z_get_next_timeout_expiry+0x74>)
    766c:	480c      	ldr	r0, [pc, #48]	; (76a0 <z_get_next_timeout_expiry+0x8c>)
    766e:	f000 fd82 	bl	8176 <printk>
    7672:	4806      	ldr	r0, [pc, #24]	; (768c <z_get_next_timeout_expiry+0x78>)
    7674:	21ac      	movs	r1, #172	; 0xac
    7676:	f000 fcaa 	bl	7fce <assert_post_action>
	__asm__ volatile(
    767a:	f385 8811 	msr	BASEPRI, r5
    767e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    7682:	4620      	mov	r0, r4
    7684:	bd38      	pop	{r3, r4, r5, pc}
    7686:	bf00      	nop
    7688:	20000c08 	.word	0x20000c08
    768c:	000090b8 	.word	0x000090b8
    7690:	0000910a 	.word	0x0000910a
    7694:	00008fa5 	.word	0x00008fa5
    7698:	0000911f 	.word	0x0000911f
    769c:	000090de 	.word	0x000090de
    76a0:	000090f5 	.word	0x000090f5

000076a4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    76a4:	b570      	push	{r4, r5, r6, lr}
    76a6:	4604      	mov	r4, r0
    76a8:	460d      	mov	r5, r1
	__asm__ volatile(
    76aa:	f04f 0320 	mov.w	r3, #32
    76ae:	f3ef 8611 	mrs	r6, BASEPRI
    76b2:	f383 8812 	msr	BASEPRI_MAX, r3
    76b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76ba:	481b      	ldr	r0, [pc, #108]	; (7728 <z_set_timeout_expiry+0x84>)
    76bc:	f7ff fe12 	bl	72e4 <z_spin_lock_valid>
    76c0:	b968      	cbnz	r0, 76de <z_set_timeout_expiry+0x3a>
    76c2:	4a1a      	ldr	r2, [pc, #104]	; (772c <z_set_timeout_expiry+0x88>)
    76c4:	491a      	ldr	r1, [pc, #104]	; (7730 <z_set_timeout_expiry+0x8c>)
    76c6:	481b      	ldr	r0, [pc, #108]	; (7734 <z_set_timeout_expiry+0x90>)
    76c8:	2381      	movs	r3, #129	; 0x81
    76ca:	f000 fd54 	bl	8176 <printk>
    76ce:	4916      	ldr	r1, [pc, #88]	; (7728 <z_set_timeout_expiry+0x84>)
    76d0:	4819      	ldr	r0, [pc, #100]	; (7738 <z_set_timeout_expiry+0x94>)
    76d2:	f000 fd50 	bl	8176 <printk>
    76d6:	4815      	ldr	r0, [pc, #84]	; (772c <z_set_timeout_expiry+0x88>)
    76d8:	2181      	movs	r1, #129	; 0x81
    76da:	f000 fc78 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    76de:	4812      	ldr	r0, [pc, #72]	; (7728 <z_set_timeout_expiry+0x84>)
    76e0:	f7ff fe1e 	bl	7320 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    76e4:	f7ff fe2e 	bl	7344 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    76e8:	2801      	cmp	r0, #1
    76ea:	dd05      	ble.n	76f8 <z_set_timeout_expiry+0x54>
    76ec:	42a0      	cmp	r0, r4
    76ee:	db03      	blt.n	76f8 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    76f0:	4629      	mov	r1, r5
    76f2:	4620      	mov	r0, r4
    76f4:	f7fc fcde 	bl	40b4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76f8:	480b      	ldr	r0, [pc, #44]	; (7728 <z_set_timeout_expiry+0x84>)
    76fa:	f7ff fe01 	bl	7300 <z_spin_unlock_valid>
    76fe:	b968      	cbnz	r0, 771c <z_set_timeout_expiry+0x78>
    7700:	4a0a      	ldr	r2, [pc, #40]	; (772c <z_set_timeout_expiry+0x88>)
    7702:	490e      	ldr	r1, [pc, #56]	; (773c <z_set_timeout_expiry+0x98>)
    7704:	480b      	ldr	r0, [pc, #44]	; (7734 <z_set_timeout_expiry+0x90>)
    7706:	23ac      	movs	r3, #172	; 0xac
    7708:	f000 fd35 	bl	8176 <printk>
    770c:	4906      	ldr	r1, [pc, #24]	; (7728 <z_set_timeout_expiry+0x84>)
    770e:	480c      	ldr	r0, [pc, #48]	; (7740 <z_set_timeout_expiry+0x9c>)
    7710:	f000 fd31 	bl	8176 <printk>
    7714:	4805      	ldr	r0, [pc, #20]	; (772c <z_set_timeout_expiry+0x88>)
    7716:	21ac      	movs	r1, #172	; 0xac
    7718:	f000 fc59 	bl	7fce <assert_post_action>
	__asm__ volatile(
    771c:	f386 8811 	msr	BASEPRI, r6
    7720:	f3bf 8f6f 	isb	sy
		}
	}
}
    7724:	bd70      	pop	{r4, r5, r6, pc}
    7726:	bf00      	nop
    7728:	20000c08 	.word	0x20000c08
    772c:	000090b8 	.word	0x000090b8
    7730:	0000910a 	.word	0x0000910a
    7734:	00008fa5 	.word	0x00008fa5
    7738:	0000911f 	.word	0x0000911f
    773c:	000090de 	.word	0x000090de
    7740:	000090f5 	.word	0x000090f5

00007744 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7748:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    774a:	f7fe fca7 	bl	609c <z_time_slice>
	__asm__ volatile(
    774e:	f04f 0320 	mov.w	r3, #32
    7752:	f3ef 8711 	mrs	r7, BASEPRI
    7756:	f383 8812 	msr	BASEPRI_MAX, r3
    775a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    775e:	4855      	ldr	r0, [pc, #340]	; (78b4 <sys_clock_announce+0x170>)
    7760:	f7ff fdc0 	bl	72e4 <z_spin_lock_valid>
    7764:	b968      	cbnz	r0, 7782 <sys_clock_announce+0x3e>
    7766:	4a54      	ldr	r2, [pc, #336]	; (78b8 <sys_clock_announce+0x174>)
    7768:	4954      	ldr	r1, [pc, #336]	; (78bc <sys_clock_announce+0x178>)
    776a:	4855      	ldr	r0, [pc, #340]	; (78c0 <sys_clock_announce+0x17c>)
    776c:	2381      	movs	r3, #129	; 0x81
    776e:	f000 fd02 	bl	8176 <printk>
    7772:	4950      	ldr	r1, [pc, #320]	; (78b4 <sys_clock_announce+0x170>)
    7774:	4853      	ldr	r0, [pc, #332]	; (78c4 <sys_clock_announce+0x180>)
    7776:	f000 fcfe 	bl	8176 <printk>
    777a:	484f      	ldr	r0, [pc, #316]	; (78b8 <sys_clock_announce+0x174>)
    777c:	2181      	movs	r1, #129	; 0x81
    777e:	f000 fc26 	bl	7fce <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7782:	4d51      	ldr	r5, [pc, #324]	; (78c8 <sys_clock_announce+0x184>)
    7784:	4e51      	ldr	r6, [pc, #324]	; (78cc <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    7786:	484b      	ldr	r0, [pc, #300]	; (78b4 <sys_clock_announce+0x170>)
	return list->head == list;
    7788:	f8df a14c 	ldr.w	sl, [pc, #332]	; 78d8 <sys_clock_announce+0x194>
    778c:	f7ff fdc8 	bl	7320 <z_spin_lock_set_owner>
    7790:	46b3      	mov	fp, r6
    7792:	602c      	str	r4, [r5, #0]
    7794:	e9d6 2300 	ldrd	r2, r3, [r6]
    7798:	f8d5 c000 	ldr.w	ip, [r5]
    779c:	f8da 4000 	ldr.w	r4, [sl]
    77a0:	e9cd 2300 	strd	r2, r3, [sp]
    77a4:	4662      	mov	r2, ip
    77a6:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    77a8:	4554      	cmp	r4, sl
    77aa:	46e0      	mov	r8, ip
    77ac:	4699      	mov	r9, r3
    77ae:	d00c      	beq.n	77ca <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    77b0:	b15c      	cbz	r4, 77ca <sys_clock_announce+0x86>
    77b2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    77b6:	458c      	cmp	ip, r1
    77b8:	eb79 0302 	sbcs.w	r3, r9, r2
    77bc:	da2e      	bge.n	781c <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    77be:	ebb1 000c 	subs.w	r0, r1, ip
    77c2:	eb62 0109 	sbc.w	r1, r2, r9
    77c6:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    77ca:	9a00      	ldr	r2, [sp, #0]
    77cc:	9901      	ldr	r1, [sp, #4]
    77ce:	eb18 0202 	adds.w	r2, r8, r2
    77d2:	464b      	mov	r3, r9
    77d4:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    77d8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    77da:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    77de:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    77e0:	f7ff fdb0 	bl	7344 <next_timeout>
    77e4:	4621      	mov	r1, r4
    77e6:	f7fc fc65 	bl	40b4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77ea:	4832      	ldr	r0, [pc, #200]	; (78b4 <sys_clock_announce+0x170>)
    77ec:	f7ff fd88 	bl	7300 <z_spin_unlock_valid>
    77f0:	b968      	cbnz	r0, 780e <sys_clock_announce+0xca>
    77f2:	4a31      	ldr	r2, [pc, #196]	; (78b8 <sys_clock_announce+0x174>)
    77f4:	4936      	ldr	r1, [pc, #216]	; (78d0 <sys_clock_announce+0x18c>)
    77f6:	4832      	ldr	r0, [pc, #200]	; (78c0 <sys_clock_announce+0x17c>)
    77f8:	23ac      	movs	r3, #172	; 0xac
    77fa:	f000 fcbc 	bl	8176 <printk>
    77fe:	492d      	ldr	r1, [pc, #180]	; (78b4 <sys_clock_announce+0x170>)
    7800:	4834      	ldr	r0, [pc, #208]	; (78d4 <sys_clock_announce+0x190>)
    7802:	f000 fcb8 	bl	8176 <printk>
    7806:	482c      	ldr	r0, [pc, #176]	; (78b8 <sys_clock_announce+0x174>)
    7808:	21ac      	movs	r1, #172	; 0xac
    780a:	f000 fbe0 	bl	7fce <assert_post_action>
	__asm__ volatile(
    780e:	f387 8811 	msr	BASEPRI, r7
    7812:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7816:	b003      	add	sp, #12
    7818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    781c:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    7820:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    7824:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    7828:	f04f 0200 	mov.w	r2, #0
    782c:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    7830:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    7834:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    7836:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    783a:	4620      	mov	r0, r4
		curr_tick += dt;
    783c:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    7840:	f7ff fdac 	bl	739c <remove_timeout>
    7844:	481b      	ldr	r0, [pc, #108]	; (78b4 <sys_clock_announce+0x170>)
    7846:	f7ff fd5b 	bl	7300 <z_spin_unlock_valid>
    784a:	b968      	cbnz	r0, 7868 <sys_clock_announce+0x124>
    784c:	4a1a      	ldr	r2, [pc, #104]	; (78b8 <sys_clock_announce+0x174>)
    784e:	4920      	ldr	r1, [pc, #128]	; (78d0 <sys_clock_announce+0x18c>)
    7850:	481b      	ldr	r0, [pc, #108]	; (78c0 <sys_clock_announce+0x17c>)
    7852:	23ac      	movs	r3, #172	; 0xac
    7854:	f000 fc8f 	bl	8176 <printk>
    7858:	4916      	ldr	r1, [pc, #88]	; (78b4 <sys_clock_announce+0x170>)
    785a:	481e      	ldr	r0, [pc, #120]	; (78d4 <sys_clock_announce+0x190>)
    785c:	f000 fc8b 	bl	8176 <printk>
    7860:	4815      	ldr	r0, [pc, #84]	; (78b8 <sys_clock_announce+0x174>)
    7862:	21ac      	movs	r1, #172	; 0xac
    7864:	f000 fbb3 	bl	7fce <assert_post_action>
    7868:	f387 8811 	msr	BASEPRI, r7
    786c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7870:	68a3      	ldr	r3, [r4, #8]
    7872:	4620      	mov	r0, r4
    7874:	4798      	blx	r3
	__asm__ volatile(
    7876:	f04f 0320 	mov.w	r3, #32
    787a:	f3ef 8711 	mrs	r7, BASEPRI
    787e:	f383 8812 	msr	BASEPRI_MAX, r3
    7882:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7886:	480b      	ldr	r0, [pc, #44]	; (78b4 <sys_clock_announce+0x170>)
    7888:	f7ff fd2c 	bl	72e4 <z_spin_lock_valid>
    788c:	b968      	cbnz	r0, 78aa <sys_clock_announce+0x166>
    788e:	4a0a      	ldr	r2, [pc, #40]	; (78b8 <sys_clock_announce+0x174>)
    7890:	490a      	ldr	r1, [pc, #40]	; (78bc <sys_clock_announce+0x178>)
    7892:	480b      	ldr	r0, [pc, #44]	; (78c0 <sys_clock_announce+0x17c>)
    7894:	2381      	movs	r3, #129	; 0x81
    7896:	f000 fc6e 	bl	8176 <printk>
    789a:	4906      	ldr	r1, [pc, #24]	; (78b4 <sys_clock_announce+0x170>)
    789c:	4809      	ldr	r0, [pc, #36]	; (78c4 <sys_clock_announce+0x180>)
    789e:	f000 fc6a 	bl	8176 <printk>
    78a2:	4805      	ldr	r0, [pc, #20]	; (78b8 <sys_clock_announce+0x174>)
    78a4:	2181      	movs	r1, #129	; 0x81
    78a6:	f000 fb92 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    78aa:	4802      	ldr	r0, [pc, #8]	; (78b4 <sys_clock_announce+0x170>)
    78ac:	f7ff fd38 	bl	7320 <z_spin_lock_set_owner>
	return k;
    78b0:	e770      	b.n	7794 <sys_clock_announce+0x50>
    78b2:	bf00      	nop
    78b4:	20000c08 	.word	0x20000c08
    78b8:	000090b8 	.word	0x000090b8
    78bc:	0000910a 	.word	0x0000910a
    78c0:	00008fa5 	.word	0x00008fa5
    78c4:	0000911f 	.word	0x0000911f
    78c8:	20000c04 	.word	0x20000c04
    78cc:	200004e0 	.word	0x200004e0
    78d0:	000090de 	.word	0x000090de
    78d4:	000090f5 	.word	0x000090f5
    78d8:	2000016c 	.word	0x2000016c

000078dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    78dc:	b570      	push	{r4, r5, r6, lr}
    78de:	f04f 0320 	mov.w	r3, #32
    78e2:	f3ef 8611 	mrs	r6, BASEPRI
    78e6:	f383 8812 	msr	BASEPRI_MAX, r3
    78ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78ee:	481b      	ldr	r0, [pc, #108]	; (795c <sys_clock_tick_get+0x80>)
    78f0:	f7ff fcf8 	bl	72e4 <z_spin_lock_valid>
    78f4:	b968      	cbnz	r0, 7912 <sys_clock_tick_get+0x36>
    78f6:	4a1a      	ldr	r2, [pc, #104]	; (7960 <sys_clock_tick_get+0x84>)
    78f8:	491a      	ldr	r1, [pc, #104]	; (7964 <sys_clock_tick_get+0x88>)
    78fa:	481b      	ldr	r0, [pc, #108]	; (7968 <sys_clock_tick_get+0x8c>)
    78fc:	2381      	movs	r3, #129	; 0x81
    78fe:	f000 fc3a 	bl	8176 <printk>
    7902:	4916      	ldr	r1, [pc, #88]	; (795c <sys_clock_tick_get+0x80>)
    7904:	4819      	ldr	r0, [pc, #100]	; (796c <sys_clock_tick_get+0x90>)
    7906:	f000 fc36 	bl	8176 <printk>
    790a:	4815      	ldr	r0, [pc, #84]	; (7960 <sys_clock_tick_get+0x84>)
    790c:	2181      	movs	r1, #129	; 0x81
    790e:	f000 fb5e 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    7912:	4812      	ldr	r0, [pc, #72]	; (795c <sys_clock_tick_get+0x80>)
    7914:	f7ff fd04 	bl	7320 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    7918:	f7fc fbfc 	bl	4114 <sys_clock_elapsed>
    791c:	4b14      	ldr	r3, [pc, #80]	; (7970 <sys_clock_tick_get+0x94>)
    791e:	e9d3 4500 	ldrd	r4, r5, [r3]
    7922:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7924:	480d      	ldr	r0, [pc, #52]	; (795c <sys_clock_tick_get+0x80>)
    7926:	f145 0500 	adc.w	r5, r5, #0
    792a:	f7ff fce9 	bl	7300 <z_spin_unlock_valid>
    792e:	b968      	cbnz	r0, 794c <sys_clock_tick_get+0x70>
    7930:	4a0b      	ldr	r2, [pc, #44]	; (7960 <sys_clock_tick_get+0x84>)
    7932:	4910      	ldr	r1, [pc, #64]	; (7974 <sys_clock_tick_get+0x98>)
    7934:	480c      	ldr	r0, [pc, #48]	; (7968 <sys_clock_tick_get+0x8c>)
    7936:	23ac      	movs	r3, #172	; 0xac
    7938:	f000 fc1d 	bl	8176 <printk>
    793c:	4907      	ldr	r1, [pc, #28]	; (795c <sys_clock_tick_get+0x80>)
    793e:	480e      	ldr	r0, [pc, #56]	; (7978 <sys_clock_tick_get+0x9c>)
    7940:	f000 fc19 	bl	8176 <printk>
    7944:	4806      	ldr	r0, [pc, #24]	; (7960 <sys_clock_tick_get+0x84>)
    7946:	21ac      	movs	r1, #172	; 0xac
    7948:	f000 fb41 	bl	7fce <assert_post_action>
	__asm__ volatile(
    794c:	f386 8811 	msr	BASEPRI, r6
    7950:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7954:	4620      	mov	r0, r4
    7956:	4629      	mov	r1, r5
    7958:	bd70      	pop	{r4, r5, r6, pc}
    795a:	bf00      	nop
    795c:	20000c08 	.word	0x20000c08
    7960:	000090b8 	.word	0x000090b8
    7964:	0000910a 	.word	0x0000910a
    7968:	00008fa5 	.word	0x00008fa5
    796c:	0000911f 	.word	0x0000911f
    7970:	200004e0 	.word	0x200004e0
    7974:	000090de 	.word	0x000090de
    7978:	000090f5 	.word	0x000090f5

0000797c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    797e:	4604      	mov	r4, r0
	__asm__ volatile(
    7980:	f04f 0320 	mov.w	r3, #32
    7984:	f3ef 8511 	mrs	r5, BASEPRI
    7988:	f383 8812 	msr	BASEPRI_MAX, r3
    798c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7990:	484c      	ldr	r0, [pc, #304]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7992:	f7ff fca7 	bl	72e4 <z_spin_lock_valid>
    7996:	b968      	cbnz	r0, 79b4 <z_timer_expiration_handler+0x38>
    7998:	4a4b      	ldr	r2, [pc, #300]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    799a:	494c      	ldr	r1, [pc, #304]	; (7acc <z_timer_expiration_handler+0x150>)
    799c:	484c      	ldr	r0, [pc, #304]	; (7ad0 <z_timer_expiration_handler+0x154>)
    799e:	2381      	movs	r3, #129	; 0x81
    79a0:	f000 fbe9 	bl	8176 <printk>
    79a4:	4947      	ldr	r1, [pc, #284]	; (7ac4 <z_timer_expiration_handler+0x148>)
    79a6:	484b      	ldr	r0, [pc, #300]	; (7ad4 <z_timer_expiration_handler+0x158>)
    79a8:	f000 fbe5 	bl	8176 <printk>
    79ac:	4846      	ldr	r0, [pc, #280]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    79ae:	2181      	movs	r1, #129	; 0x81
    79b0:	f000 fb0d 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    79b4:	4843      	ldr	r0, [pc, #268]	; (7ac4 <z_timer_expiration_handler+0x148>)
    79b6:	f7ff fcb3 	bl	7320 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    79ba:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    79be:	1c56      	adds	r6, r2, #1
    79c0:	f143 0700 	adc.w	r7, r3, #0
    79c4:	2f00      	cmp	r7, #0
    79c6:	bf08      	it	eq
    79c8:	2e02      	cmpeq	r6, #2
    79ca:	d303      	bcc.n	79d4 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    79cc:	4942      	ldr	r1, [pc, #264]	; (7ad8 <z_timer_expiration_handler+0x15c>)
    79ce:	4620      	mov	r0, r4
    79d0:	f7ff fcfe 	bl	73d0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    79d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    79d6:	3301      	adds	r3, #1
    79d8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    79da:	6a23      	ldr	r3, [r4, #32]
    79dc:	2b00      	cmp	r3, #0
    79de:	d035      	beq.n	7a4c <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79e0:	4838      	ldr	r0, [pc, #224]	; (7ac4 <z_timer_expiration_handler+0x148>)
    79e2:	f7ff fc8d 	bl	7300 <z_spin_unlock_valid>
    79e6:	b968      	cbnz	r0, 7a04 <z_timer_expiration_handler+0x88>
    79e8:	4a37      	ldr	r2, [pc, #220]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    79ea:	493c      	ldr	r1, [pc, #240]	; (7adc <z_timer_expiration_handler+0x160>)
    79ec:	4838      	ldr	r0, [pc, #224]	; (7ad0 <z_timer_expiration_handler+0x154>)
    79ee:	23ac      	movs	r3, #172	; 0xac
    79f0:	f000 fbc1 	bl	8176 <printk>
    79f4:	4933      	ldr	r1, [pc, #204]	; (7ac4 <z_timer_expiration_handler+0x148>)
    79f6:	483a      	ldr	r0, [pc, #232]	; (7ae0 <z_timer_expiration_handler+0x164>)
    79f8:	f000 fbbd 	bl	8176 <printk>
    79fc:	4832      	ldr	r0, [pc, #200]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    79fe:	21ac      	movs	r1, #172	; 0xac
    7a00:	f000 fae5 	bl	7fce <assert_post_action>
	__asm__ volatile(
    7a04:	f385 8811 	msr	BASEPRI, r5
    7a08:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    7a0c:	6a23      	ldr	r3, [r4, #32]
    7a0e:	4620      	mov	r0, r4
    7a10:	4798      	blx	r3
	__asm__ volatile(
    7a12:	f04f 0320 	mov.w	r3, #32
    7a16:	f3ef 8511 	mrs	r5, BASEPRI
    7a1a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a22:	4828      	ldr	r0, [pc, #160]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7a24:	f7ff fc5e 	bl	72e4 <z_spin_lock_valid>
    7a28:	b968      	cbnz	r0, 7a46 <z_timer_expiration_handler+0xca>
    7a2a:	4a27      	ldr	r2, [pc, #156]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    7a2c:	4927      	ldr	r1, [pc, #156]	; (7acc <z_timer_expiration_handler+0x150>)
    7a2e:	4828      	ldr	r0, [pc, #160]	; (7ad0 <z_timer_expiration_handler+0x154>)
    7a30:	2381      	movs	r3, #129	; 0x81
    7a32:	f000 fba0 	bl	8176 <printk>
    7a36:	4923      	ldr	r1, [pc, #140]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7a38:	4826      	ldr	r0, [pc, #152]	; (7ad4 <z_timer_expiration_handler+0x158>)
    7a3a:	f000 fb9c 	bl	8176 <printk>
    7a3e:	4822      	ldr	r0, [pc, #136]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    7a40:	2181      	movs	r1, #129	; 0x81
    7a42:	f000 fac4 	bl	7fce <assert_post_action>
	z_spin_lock_set_owner(l);
    7a46:	481f      	ldr	r0, [pc, #124]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7a48:	f7ff fc6a 	bl	7320 <z_spin_lock_set_owner>
	return list->head == list;
    7a4c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7a50:	42a6      	cmp	r6, r4
    7a52:	d000      	beq.n	7a56 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    7a54:	b9b6      	cbnz	r6, 7a84 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a56:	481b      	ldr	r0, [pc, #108]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7a58:	f7ff fc52 	bl	7300 <z_spin_unlock_valid>
    7a5c:	b968      	cbnz	r0, 7a7a <z_timer_expiration_handler+0xfe>
    7a5e:	4a1a      	ldr	r2, [pc, #104]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    7a60:	491e      	ldr	r1, [pc, #120]	; (7adc <z_timer_expiration_handler+0x160>)
    7a62:	481b      	ldr	r0, [pc, #108]	; (7ad0 <z_timer_expiration_handler+0x154>)
    7a64:	23ac      	movs	r3, #172	; 0xac
    7a66:	f000 fb86 	bl	8176 <printk>
    7a6a:	4916      	ldr	r1, [pc, #88]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7a6c:	481c      	ldr	r0, [pc, #112]	; (7ae0 <z_timer_expiration_handler+0x164>)
    7a6e:	f000 fb82 	bl	8176 <printk>
    7a72:	4815      	ldr	r0, [pc, #84]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    7a74:	21ac      	movs	r1, #172	; 0xac
    7a76:	f000 faaa 	bl	7fce <assert_post_action>
	__asm__ volatile(
    7a7a:	f385 8811 	msr	BASEPRI, r5
    7a7e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    7a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    7a84:	4630      	mov	r0, r6
    7a86:	f7fe f937 	bl	5cf8 <z_unpend_thread_no_timeout>
    7a8a:	2300      	movs	r3, #0
    7a8c:	480d      	ldr	r0, [pc, #52]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7a8e:	67b3      	str	r3, [r6, #120]	; 0x78
    7a90:	f7ff fc36 	bl	7300 <z_spin_unlock_valid>
    7a94:	b968      	cbnz	r0, 7ab2 <z_timer_expiration_handler+0x136>
    7a96:	4a0c      	ldr	r2, [pc, #48]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    7a98:	4910      	ldr	r1, [pc, #64]	; (7adc <z_timer_expiration_handler+0x160>)
    7a9a:	480d      	ldr	r0, [pc, #52]	; (7ad0 <z_timer_expiration_handler+0x154>)
    7a9c:	23ac      	movs	r3, #172	; 0xac
    7a9e:	f000 fb6a 	bl	8176 <printk>
    7aa2:	4908      	ldr	r1, [pc, #32]	; (7ac4 <z_timer_expiration_handler+0x148>)
    7aa4:	480e      	ldr	r0, [pc, #56]	; (7ae0 <z_timer_expiration_handler+0x164>)
    7aa6:	f000 fb66 	bl	8176 <printk>
    7aaa:	4807      	ldr	r0, [pc, #28]	; (7ac8 <z_timer_expiration_handler+0x14c>)
    7aac:	21ac      	movs	r1, #172	; 0xac
    7aae:	f000 fa8e 	bl	7fce <assert_post_action>
    7ab2:	f385 8811 	msr	BASEPRI, r5
    7ab6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    7aba:	4630      	mov	r0, r6
}
    7abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    7ac0:	f7fe bbb6 	b.w	6230 <z_ready_thread>
    7ac4:	20000c0c 	.word	0x20000c0c
    7ac8:	000090b8 	.word	0x000090b8
    7acc:	0000910a 	.word	0x0000910a
    7ad0:	00008fa5 	.word	0x00008fa5
    7ad4:	0000911f 	.word	0x0000911f
    7ad8:	0000797d 	.word	0x0000797d
    7adc:	000090de 	.word	0x000090de
    7ae0:	000090f5 	.word	0x000090f5

00007ae4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7ae4:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    7ae8:	4619      	mov	r1, r3
    7aea:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7aec:	1c4c      	adds	r4, r1, #1
{
    7aee:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7af0:	bf08      	it	eq
    7af2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    7af6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    7afa:	4680      	mov	r8, r0
    7afc:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7afe:	d04c      	beq.n	7b9a <z_impl_k_timer_start+0xb6>
    7b00:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7b02:	1c6b      	adds	r3, r5, #1
    7b04:	bf08      	it	eq
    7b06:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7b0a:	4614      	mov	r4, r2
    7b0c:	d019      	beq.n	7b42 <z_impl_k_timer_start+0x5e>
    7b0e:	ea54 0305 	orrs.w	r3, r4, r5
    7b12:	d016      	beq.n	7b42 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    7b14:	f06f 0301 	mvn.w	r3, #1
    7b18:	ebb3 0a02 	subs.w	sl, r3, r2
    7b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b20:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7b24:	f1ba 0f00 	cmp.w	sl, #0
    7b28:	f17b 0300 	sbcs.w	r3, fp, #0
    7b2c:	da09      	bge.n	7b42 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    7b2e:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
    7b32:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    7b36:	2c01      	cmp	r4, #1
    7b38:	f175 0300 	sbcs.w	r3, r5, #0
    7b3c:	bfbc      	itt	lt
    7b3e:	2401      	movlt	r4, #1
    7b40:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    7b42:	f06f 0301 	mvn.w	r3, #1
    7b46:	1a1b      	subs	r3, r3, r0
    7b48:	9300      	str	r3, [sp, #0]
    7b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b4e:	eb63 0301 	sbc.w	r3, r3, r1
    7b52:	9301      	str	r3, [sp, #4]
    7b54:	e9dd 2300 	ldrd	r2, r3, [sp]
    7b58:	2a00      	cmp	r2, #0
    7b5a:	f173 0300 	sbcs.w	r3, r3, #0
    7b5e:	da0c      	bge.n	7b7a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    7b60:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
    7b64:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
    7b68:	f1b8 0f00 	cmp.w	r8, #0
    7b6c:	f179 0300 	sbcs.w	r3, r9, #0
    7b70:	bfbc      	itt	lt
    7b72:	f04f 0800 	movlt.w	r8, #0
    7b76:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    7b7a:	4630      	mov	r0, r6
    7b7c:	f7ff fcfc 	bl	7578 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    7b80:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7b82:	4907      	ldr	r1, [pc, #28]	; (7ba0 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    7b84:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7b86:	4642      	mov	r2, r8
    7b88:	464b      	mov	r3, r9
    7b8a:	4630      	mov	r0, r6
	timer->period = period;
    7b8c:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    7b90:	b002      	add	sp, #8
    7b92:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7b96:	f7ff bc1b 	b.w	73d0 <z_add_timeout>
}
    7b9a:	b002      	add	sp, #8
    7b9c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    7ba0:	0000797d 	.word	0x0000797d

00007ba4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    7ba4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    7ba6:	4806      	ldr	r0, [pc, #24]	; (7bc0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    7ba8:	4a06      	ldr	r2, [pc, #24]	; (7bc4 <z_data_copy+0x20>)
    7baa:	4907      	ldr	r1, [pc, #28]	; (7bc8 <z_data_copy+0x24>)
    7bac:	1a12      	subs	r2, r2, r0
    7bae:	f000 fb38 	bl	8222 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7bb6:	4a05      	ldr	r2, [pc, #20]	; (7bcc <z_data_copy+0x28>)
    7bb8:	4905      	ldr	r1, [pc, #20]	; (7bd0 <z_data_copy+0x2c>)
    7bba:	4806      	ldr	r0, [pc, #24]	; (7bd4 <z_data_copy+0x30>)
    7bbc:	f000 bb31 	b.w	8222 <memcpy>
    7bc0:	20000000 	.word	0x20000000
    7bc4:	20000240 	.word	0x20000240
    7bc8:	00009e34 	.word	0x00009e34
    7bcc:	00000000 	.word	0x00000000
    7bd0:	00009e34 	.word	0x00009e34
    7bd4:	20000000 	.word	0x20000000

00007bd8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7bd8:	4a02      	ldr	r2, [pc, #8]	; (7be4 <boot_banner+0xc>)
    7bda:	4903      	ldr	r1, [pc, #12]	; (7be8 <boot_banner+0x10>)
    7bdc:	4803      	ldr	r0, [pc, #12]	; (7bec <boot_banner+0x14>)
    7bde:	f000 baca 	b.w	8176 <printk>
    7be2:	bf00      	nop
    7be4:	00009ae1 	.word	0x00009ae1
    7be8:	00009dfe 	.word	0x00009dfe
    7bec:	00009e0d 	.word	0x00009e0d

00007bf0 <nrf_cc3xx_platform_init_no_rng>:
    7bf0:	b510      	push	{r4, lr}
    7bf2:	4c0a      	ldr	r4, [pc, #40]	; (7c1c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7bf4:	6823      	ldr	r3, [r4, #0]
    7bf6:	b11b      	cbz	r3, 7c00 <nrf_cc3xx_platform_init_no_rng+0x10>
    7bf8:	2301      	movs	r3, #1
    7bfa:	6023      	str	r3, [r4, #0]
    7bfc:	2000      	movs	r0, #0
    7bfe:	bd10      	pop	{r4, pc}
    7c00:	f000 f8d6 	bl	7db0 <CC_LibInitNoRng>
    7c04:	2800      	cmp	r0, #0
    7c06:	d0f7      	beq.n	7bf8 <nrf_cc3xx_platform_init_no_rng+0x8>
    7c08:	3801      	subs	r0, #1
    7c0a:	2806      	cmp	r0, #6
    7c0c:	d803      	bhi.n	7c16 <nrf_cc3xx_platform_init_no_rng+0x26>
    7c0e:	4b04      	ldr	r3, [pc, #16]	; (7c20 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7c10:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7c14:	bd10      	pop	{r4, pc}
    7c16:	4803      	ldr	r0, [pc, #12]	; (7c24 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7c18:	bd10      	pop	{r4, pc}
    7c1a:	bf00      	nop
    7c1c:	20000c10 	.word	0x20000c10
    7c20:	00008d30 	.word	0x00008d30
    7c24:	ffff8ffe 	.word	0xffff8ffe

00007c28 <nrf_cc3xx_platform_abort>:
    7c28:	f3bf 8f4f 	dsb	sy
    7c2c:	4905      	ldr	r1, [pc, #20]	; (7c44 <nrf_cc3xx_platform_abort+0x1c>)
    7c2e:	4b06      	ldr	r3, [pc, #24]	; (7c48 <nrf_cc3xx_platform_abort+0x20>)
    7c30:	68ca      	ldr	r2, [r1, #12]
    7c32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7c36:	4313      	orrs	r3, r2
    7c38:	60cb      	str	r3, [r1, #12]
    7c3a:	f3bf 8f4f 	dsb	sy
    7c3e:	bf00      	nop
    7c40:	e7fd      	b.n	7c3e <nrf_cc3xx_platform_abort+0x16>
    7c42:	bf00      	nop
    7c44:	e000ed00 	.word	0xe000ed00
    7c48:	05fa0004 	.word	0x05fa0004

00007c4c <CC_PalAbort>:
    7c4c:	b4f0      	push	{r4, r5, r6, r7}
    7c4e:	4f09      	ldr	r7, [pc, #36]	; (7c74 <CC_PalAbort+0x28>)
    7c50:	4e09      	ldr	r6, [pc, #36]	; (7c78 <CC_PalAbort+0x2c>)
    7c52:	4c0a      	ldr	r4, [pc, #40]	; (7c7c <CC_PalAbort+0x30>)
    7c54:	4a0a      	ldr	r2, [pc, #40]	; (7c80 <CC_PalAbort+0x34>)
    7c56:	4d0b      	ldr	r5, [pc, #44]	; (7c84 <CC_PalAbort+0x38>)
    7c58:	490b      	ldr	r1, [pc, #44]	; (7c88 <CC_PalAbort+0x3c>)
    7c5a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7c5e:	603b      	str	r3, [r7, #0]
    7c60:	6852      	ldr	r2, [r2, #4]
    7c62:	6033      	str	r3, [r6, #0]
    7c64:	6023      	str	r3, [r4, #0]
    7c66:	2400      	movs	r4, #0
    7c68:	602b      	str	r3, [r5, #0]
    7c6a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7c6e:	bcf0      	pop	{r4, r5, r6, r7}
    7c70:	4710      	bx	r2
    7c72:	bf00      	nop
    7c74:	5002b400 	.word	0x5002b400
    7c78:	5002b404 	.word	0x5002b404
    7c7c:	5002b408 	.word	0x5002b408
    7c80:	20000174 	.word	0x20000174
    7c84:	5002b40c 	.word	0x5002b40c
    7c88:	5002a000 	.word	0x5002a000

00007c8c <nrf_cc3xx_platform_set_abort>:
    7c8c:	e9d0 1200 	ldrd	r1, r2, [r0]
    7c90:	4b01      	ldr	r3, [pc, #4]	; (7c98 <nrf_cc3xx_platform_set_abort+0xc>)
    7c92:	e9c3 1200 	strd	r1, r2, [r3]
    7c96:	4770      	bx	lr
    7c98:	20000174 	.word	0x20000174

00007c9c <mutex_free>:
    7c9c:	b510      	push	{r4, lr}
    7c9e:	4604      	mov	r4, r0
    7ca0:	b130      	cbz	r0, 7cb0 <mutex_free+0x14>
    7ca2:	6863      	ldr	r3, [r4, #4]
    7ca4:	06db      	lsls	r3, r3, #27
    7ca6:	d502      	bpl.n	7cae <mutex_free+0x12>
    7ca8:	2300      	movs	r3, #0
    7caa:	6023      	str	r3, [r4, #0]
    7cac:	6063      	str	r3, [r4, #4]
    7cae:	bd10      	pop	{r4, pc}
    7cb0:	4b02      	ldr	r3, [pc, #8]	; (7cbc <mutex_free+0x20>)
    7cb2:	4803      	ldr	r0, [pc, #12]	; (7cc0 <mutex_free+0x24>)
    7cb4:	685b      	ldr	r3, [r3, #4]
    7cb6:	4798      	blx	r3
    7cb8:	e7f3      	b.n	7ca2 <mutex_free+0x6>
    7cba:	bf00      	nop
    7cbc:	20000174 	.word	0x20000174
    7cc0:	00008d4c 	.word	0x00008d4c

00007cc4 <mutex_unlock>:
    7cc4:	b168      	cbz	r0, 7ce2 <mutex_unlock+0x1e>
    7cc6:	6843      	ldr	r3, [r0, #4]
    7cc8:	b13b      	cbz	r3, 7cda <mutex_unlock+0x16>
    7cca:	06db      	lsls	r3, r3, #27
    7ccc:	d507      	bpl.n	7cde <mutex_unlock+0x1a>
    7cce:	f3bf 8f5f 	dmb	sy
    7cd2:	2300      	movs	r3, #0
    7cd4:	6003      	str	r3, [r0, #0]
    7cd6:	4618      	mov	r0, r3
    7cd8:	4770      	bx	lr
    7cda:	4803      	ldr	r0, [pc, #12]	; (7ce8 <mutex_unlock+0x24>)
    7cdc:	4770      	bx	lr
    7cde:	4803      	ldr	r0, [pc, #12]	; (7cec <mutex_unlock+0x28>)
    7ce0:	4770      	bx	lr
    7ce2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7ce6:	4770      	bx	lr
    7ce8:	ffff8fea 	.word	0xffff8fea
    7cec:	ffff8fe9 	.word	0xffff8fe9

00007cf0 <mutex_init>:
    7cf0:	b510      	push	{r4, lr}
    7cf2:	4604      	mov	r4, r0
    7cf4:	b120      	cbz	r0, 7d00 <mutex_init+0x10>
    7cf6:	2200      	movs	r2, #0
    7cf8:	2311      	movs	r3, #17
    7cfa:	6022      	str	r2, [r4, #0]
    7cfc:	6063      	str	r3, [r4, #4]
    7cfe:	bd10      	pop	{r4, pc}
    7d00:	4801      	ldr	r0, [pc, #4]	; (7d08 <mutex_init+0x18>)
    7d02:	f7ff ffa3 	bl	7c4c <CC_PalAbort>
    7d06:	e7f6      	b.n	7cf6 <mutex_init+0x6>
    7d08:	00008d74 	.word	0x00008d74

00007d0c <mutex_lock>:
    7d0c:	b1c0      	cbz	r0, 7d40 <mutex_lock+0x34>
    7d0e:	6843      	ldr	r3, [r0, #4]
    7d10:	b1a3      	cbz	r3, 7d3c <mutex_lock+0x30>
    7d12:	06db      	lsls	r3, r3, #27
    7d14:	d510      	bpl.n	7d38 <mutex_lock+0x2c>
    7d16:	2201      	movs	r2, #1
    7d18:	f3bf 8f5b 	dmb	ish
    7d1c:	e850 3f00 	ldrex	r3, [r0]
    7d20:	e840 2100 	strex	r1, r2, [r0]
    7d24:	2900      	cmp	r1, #0
    7d26:	d1f9      	bne.n	7d1c <mutex_lock+0x10>
    7d28:	f3bf 8f5b 	dmb	ish
    7d2c:	2b01      	cmp	r3, #1
    7d2e:	d0f3      	beq.n	7d18 <mutex_lock+0xc>
    7d30:	f3bf 8f5f 	dmb	sy
    7d34:	2000      	movs	r0, #0
    7d36:	4770      	bx	lr
    7d38:	4803      	ldr	r0, [pc, #12]	; (7d48 <mutex_lock+0x3c>)
    7d3a:	4770      	bx	lr
    7d3c:	4803      	ldr	r0, [pc, #12]	; (7d4c <mutex_lock+0x40>)
    7d3e:	4770      	bx	lr
    7d40:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7d44:	4770      	bx	lr
    7d46:	bf00      	nop
    7d48:	ffff8fe9 	.word	0xffff8fe9
    7d4c:	ffff8fea 	.word	0xffff8fea

00007d50 <nrf_cc3xx_platform_set_mutexes>:
    7d50:	b570      	push	{r4, r5, r6, lr}
    7d52:	e9d0 2300 	ldrd	r2, r3, [r0]
    7d56:	4c13      	ldr	r4, [pc, #76]	; (7da4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    7d58:	4d13      	ldr	r5, [pc, #76]	; (7da8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    7d5a:	e9c4 2300 	strd	r2, r3, [r4]
    7d5e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    7d62:	e9c4 6302 	strd	r6, r3, [r4, #8]
    7d66:	4b11      	ldr	r3, [pc, #68]	; (7dac <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7d68:	6808      	ldr	r0, [r1, #0]
    7d6a:	6018      	str	r0, [r3, #0]
    7d6c:	6848      	ldr	r0, [r1, #4]
    7d6e:	6058      	str	r0, [r3, #4]
    7d70:	6888      	ldr	r0, [r1, #8]
    7d72:	6098      	str	r0, [r3, #8]
    7d74:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    7d78:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    7d7c:	60de      	str	r6, [r3, #12]
    7d7e:	6118      	str	r0, [r3, #16]
    7d80:	06cb      	lsls	r3, r1, #27
    7d82:	d50d      	bpl.n	7da0 <nrf_cc3xx_platform_set_mutexes+0x50>
    7d84:	2300      	movs	r3, #0
    7d86:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    7d8a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    7d8e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    7d92:	4790      	blx	r2
    7d94:	6823      	ldr	r3, [r4, #0]
    7d96:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    7d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d9e:	4718      	bx	r3
    7da0:	bd70      	pop	{r4, r5, r6, pc}
    7da2:	bf00      	nop
    7da4:	20000184 	.word	0x20000184
    7da8:	20001040 	.word	0x20001040
    7dac:	20000194 	.word	0x20000194

00007db0 <CC_LibInitNoRng>:
    7db0:	b510      	push	{r4, lr}
    7db2:	f000 f833 	bl	7e1c <CC_HalInit>
    7db6:	b120      	cbz	r0, 7dc2 <CC_LibInitNoRng+0x12>
    7db8:	2403      	movs	r4, #3
    7dba:	f000 f867 	bl	7e8c <CC_PalTerminate>
    7dbe:	4620      	mov	r0, r4
    7dc0:	bd10      	pop	{r4, pc}
    7dc2:	f000 f835 	bl	7e30 <CC_PalInit>
    7dc6:	b990      	cbnz	r0, 7dee <CC_LibInitNoRng+0x3e>
    7dc8:	f000 f8b0 	bl	7f2c <CC_PalPowerSaveModeSelect>
    7dcc:	b990      	cbnz	r0, 7df4 <CC_LibInitNoRng+0x44>
    7dce:	4b0f      	ldr	r3, [pc, #60]	; (7e0c <CC_LibInitNoRng+0x5c>)
    7dd0:	681b      	ldr	r3, [r3, #0]
    7dd2:	0e1b      	lsrs	r3, r3, #24
    7dd4:	2bf0      	cmp	r3, #240	; 0xf0
    7dd6:	d108      	bne.n	7dea <CC_LibInitNoRng+0x3a>
    7dd8:	4a0d      	ldr	r2, [pc, #52]	; (7e10 <CC_LibInitNoRng+0x60>)
    7dda:	4b0e      	ldr	r3, [pc, #56]	; (7e14 <CC_LibInitNoRng+0x64>)
    7ddc:	6812      	ldr	r2, [r2, #0]
    7dde:	429a      	cmp	r2, r3
    7de0:	d00a      	beq.n	7df8 <CC_LibInitNoRng+0x48>
    7de2:	2407      	movs	r4, #7
    7de4:	f000 f81c 	bl	7e20 <CC_HalTerminate>
    7de8:	e7e7      	b.n	7dba <CC_LibInitNoRng+0xa>
    7dea:	2406      	movs	r4, #6
    7dec:	e7fa      	b.n	7de4 <CC_LibInitNoRng+0x34>
    7dee:	2404      	movs	r4, #4
    7df0:	4620      	mov	r0, r4
    7df2:	bd10      	pop	{r4, pc}
    7df4:	2400      	movs	r4, #0
    7df6:	e7f5      	b.n	7de4 <CC_LibInitNoRng+0x34>
    7df8:	2001      	movs	r0, #1
    7dfa:	f000 f897 	bl	7f2c <CC_PalPowerSaveModeSelect>
    7dfe:	4604      	mov	r4, r0
    7e00:	2800      	cmp	r0, #0
    7e02:	d1f7      	bne.n	7df4 <CC_LibInitNoRng+0x44>
    7e04:	4b04      	ldr	r3, [pc, #16]	; (7e18 <CC_LibInitNoRng+0x68>)
    7e06:	6018      	str	r0, [r3, #0]
    7e08:	e7d9      	b.n	7dbe <CC_LibInitNoRng+0xe>
    7e0a:	bf00      	nop
    7e0c:	5002b928 	.word	0x5002b928
    7e10:	5002ba24 	.word	0x5002ba24
    7e14:	20e00000 	.word	0x20e00000
    7e18:	5002ba0c 	.word	0x5002ba0c

00007e1c <CC_HalInit>:
    7e1c:	2000      	movs	r0, #0
    7e1e:	4770      	bx	lr

00007e20 <CC_HalTerminate>:
    7e20:	2000      	movs	r0, #0
    7e22:	4770      	bx	lr

00007e24 <CC_HalMaskInterrupt>:
    7e24:	4b01      	ldr	r3, [pc, #4]	; (7e2c <CC_HalMaskInterrupt+0x8>)
    7e26:	6018      	str	r0, [r3, #0]
    7e28:	4770      	bx	lr
    7e2a:	bf00      	nop
    7e2c:	5002ba04 	.word	0x5002ba04

00007e30 <CC_PalInit>:
    7e30:	b510      	push	{r4, lr}
    7e32:	4811      	ldr	r0, [pc, #68]	; (7e78 <CC_PalInit+0x48>)
    7e34:	f000 f848 	bl	7ec8 <CC_PalMutexCreate>
    7e38:	b100      	cbz	r0, 7e3c <CC_PalInit+0xc>
    7e3a:	bd10      	pop	{r4, pc}
    7e3c:	480f      	ldr	r0, [pc, #60]	; (7e7c <CC_PalInit+0x4c>)
    7e3e:	f000 f843 	bl	7ec8 <CC_PalMutexCreate>
    7e42:	2800      	cmp	r0, #0
    7e44:	d1f9      	bne.n	7e3a <CC_PalInit+0xa>
    7e46:	4c0e      	ldr	r4, [pc, #56]	; (7e80 <CC_PalInit+0x50>)
    7e48:	4620      	mov	r0, r4
    7e4a:	f000 f83d 	bl	7ec8 <CC_PalMutexCreate>
    7e4e:	2800      	cmp	r0, #0
    7e50:	d1f3      	bne.n	7e3a <CC_PalInit+0xa>
    7e52:	4b0c      	ldr	r3, [pc, #48]	; (7e84 <CC_PalInit+0x54>)
    7e54:	480c      	ldr	r0, [pc, #48]	; (7e88 <CC_PalInit+0x58>)
    7e56:	601c      	str	r4, [r3, #0]
    7e58:	f000 f836 	bl	7ec8 <CC_PalMutexCreate>
    7e5c:	4601      	mov	r1, r0
    7e5e:	2800      	cmp	r0, #0
    7e60:	d1eb      	bne.n	7e3a <CC_PalInit+0xa>
    7e62:	f000 f82d 	bl	7ec0 <CC_PalDmaInit>
    7e66:	4604      	mov	r4, r0
    7e68:	b108      	cbz	r0, 7e6e <CC_PalInit+0x3e>
    7e6a:	4620      	mov	r0, r4
    7e6c:	bd10      	pop	{r4, pc}
    7e6e:	f000 f83f 	bl	7ef0 <CC_PalPowerSaveModeInit>
    7e72:	4620      	mov	r0, r4
    7e74:	e7fa      	b.n	7e6c <CC_PalInit+0x3c>
    7e76:	bf00      	nop
    7e78:	200001cc 	.word	0x200001cc
    7e7c:	200001c0 	.word	0x200001c0
    7e80:	200001c8 	.word	0x200001c8
    7e84:	200001d0 	.word	0x200001d0
    7e88:	200001c4 	.word	0x200001c4

00007e8c <CC_PalTerminate>:
    7e8c:	b508      	push	{r3, lr}
    7e8e:	4808      	ldr	r0, [pc, #32]	; (7eb0 <CC_PalTerminate+0x24>)
    7e90:	f000 f824 	bl	7edc <CC_PalMutexDestroy>
    7e94:	4807      	ldr	r0, [pc, #28]	; (7eb4 <CC_PalTerminate+0x28>)
    7e96:	f000 f821 	bl	7edc <CC_PalMutexDestroy>
    7e9a:	4807      	ldr	r0, [pc, #28]	; (7eb8 <CC_PalTerminate+0x2c>)
    7e9c:	f000 f81e 	bl	7edc <CC_PalMutexDestroy>
    7ea0:	4806      	ldr	r0, [pc, #24]	; (7ebc <CC_PalTerminate+0x30>)
    7ea2:	f000 f81b 	bl	7edc <CC_PalMutexDestroy>
    7ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7eaa:	f000 b80b 	b.w	7ec4 <CC_PalDmaTerminate>
    7eae:	bf00      	nop
    7eb0:	200001cc 	.word	0x200001cc
    7eb4:	200001c0 	.word	0x200001c0
    7eb8:	200001c8 	.word	0x200001c8
    7ebc:	200001c4 	.word	0x200001c4

00007ec0 <CC_PalDmaInit>:
    7ec0:	2000      	movs	r0, #0
    7ec2:	4770      	bx	lr

00007ec4 <CC_PalDmaTerminate>:
    7ec4:	4770      	bx	lr
    7ec6:	bf00      	nop

00007ec8 <CC_PalMutexCreate>:
    7ec8:	b508      	push	{r3, lr}
    7eca:	4b03      	ldr	r3, [pc, #12]	; (7ed8 <CC_PalMutexCreate+0x10>)
    7ecc:	6802      	ldr	r2, [r0, #0]
    7ece:	681b      	ldr	r3, [r3, #0]
    7ed0:	6810      	ldr	r0, [r2, #0]
    7ed2:	4798      	blx	r3
    7ed4:	2000      	movs	r0, #0
    7ed6:	bd08      	pop	{r3, pc}
    7ed8:	20000184 	.word	0x20000184

00007edc <CC_PalMutexDestroy>:
    7edc:	b508      	push	{r3, lr}
    7ede:	4b03      	ldr	r3, [pc, #12]	; (7eec <CC_PalMutexDestroy+0x10>)
    7ee0:	6802      	ldr	r2, [r0, #0]
    7ee2:	685b      	ldr	r3, [r3, #4]
    7ee4:	6810      	ldr	r0, [r2, #0]
    7ee6:	4798      	blx	r3
    7ee8:	2000      	movs	r0, #0
    7eea:	bd08      	pop	{r3, pc}
    7eec:	20000184 	.word	0x20000184

00007ef0 <CC_PalPowerSaveModeInit>:
    7ef0:	b570      	push	{r4, r5, r6, lr}
    7ef2:	4c09      	ldr	r4, [pc, #36]	; (7f18 <CC_PalPowerSaveModeInit+0x28>)
    7ef4:	4d09      	ldr	r5, [pc, #36]	; (7f1c <CC_PalPowerSaveModeInit+0x2c>)
    7ef6:	6920      	ldr	r0, [r4, #16]
    7ef8:	68ab      	ldr	r3, [r5, #8]
    7efa:	4798      	blx	r3
    7efc:	b118      	cbz	r0, 7f06 <CC_PalPowerSaveModeInit+0x16>
    7efe:	4b08      	ldr	r3, [pc, #32]	; (7f20 <CC_PalPowerSaveModeInit+0x30>)
    7f00:	4808      	ldr	r0, [pc, #32]	; (7f24 <CC_PalPowerSaveModeInit+0x34>)
    7f02:	685b      	ldr	r3, [r3, #4]
    7f04:	4798      	blx	r3
    7f06:	4a08      	ldr	r2, [pc, #32]	; (7f28 <CC_PalPowerSaveModeInit+0x38>)
    7f08:	68eb      	ldr	r3, [r5, #12]
    7f0a:	6920      	ldr	r0, [r4, #16]
    7f0c:	2100      	movs	r1, #0
    7f0e:	6011      	str	r1, [r2, #0]
    7f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f14:	4718      	bx	r3
    7f16:	bf00      	nop
    7f18:	20000194 	.word	0x20000194
    7f1c:	20000184 	.word	0x20000184
    7f20:	20000174 	.word	0x20000174
    7f24:	00008d98 	.word	0x00008d98
    7f28:	20000c24 	.word	0x20000c24

00007f2c <CC_PalPowerSaveModeSelect>:
    7f2c:	b570      	push	{r4, r5, r6, lr}
    7f2e:	4d1a      	ldr	r5, [pc, #104]	; (7f98 <CC_PalPowerSaveModeSelect+0x6c>)
    7f30:	4e1a      	ldr	r6, [pc, #104]	; (7f9c <CC_PalPowerSaveModeSelect+0x70>)
    7f32:	4604      	mov	r4, r0
    7f34:	68b2      	ldr	r2, [r6, #8]
    7f36:	6928      	ldr	r0, [r5, #16]
    7f38:	4790      	blx	r2
    7f3a:	b9f0      	cbnz	r0, 7f7a <CC_PalPowerSaveModeSelect+0x4e>
    7f3c:	b15c      	cbz	r4, 7f56 <CC_PalPowerSaveModeSelect+0x2a>
    7f3e:	4c18      	ldr	r4, [pc, #96]	; (7fa0 <CC_PalPowerSaveModeSelect+0x74>)
    7f40:	6823      	ldr	r3, [r4, #0]
    7f42:	b1ab      	cbz	r3, 7f70 <CC_PalPowerSaveModeSelect+0x44>
    7f44:	2b01      	cmp	r3, #1
    7f46:	d01a      	beq.n	7f7e <CC_PalPowerSaveModeSelect+0x52>
    7f48:	3b01      	subs	r3, #1
    7f4a:	6023      	str	r3, [r4, #0]
    7f4c:	6928      	ldr	r0, [r5, #16]
    7f4e:	68f3      	ldr	r3, [r6, #12]
    7f50:	4798      	blx	r3
    7f52:	2000      	movs	r0, #0
    7f54:	bd70      	pop	{r4, r5, r6, pc}
    7f56:	4c12      	ldr	r4, [pc, #72]	; (7fa0 <CC_PalPowerSaveModeSelect+0x74>)
    7f58:	6821      	ldr	r1, [r4, #0]
    7f5a:	b939      	cbnz	r1, 7f6c <CC_PalPowerSaveModeSelect+0x40>
    7f5c:	4b11      	ldr	r3, [pc, #68]	; (7fa4 <CC_PalPowerSaveModeSelect+0x78>)
    7f5e:	4a12      	ldr	r2, [pc, #72]	; (7fa8 <CC_PalPowerSaveModeSelect+0x7c>)
    7f60:	2001      	movs	r0, #1
    7f62:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7f66:	6813      	ldr	r3, [r2, #0]
    7f68:	2b00      	cmp	r3, #0
    7f6a:	d1fc      	bne.n	7f66 <CC_PalPowerSaveModeSelect+0x3a>
    7f6c:	3101      	adds	r1, #1
    7f6e:	6021      	str	r1, [r4, #0]
    7f70:	68f3      	ldr	r3, [r6, #12]
    7f72:	6928      	ldr	r0, [r5, #16]
    7f74:	4798      	blx	r3
    7f76:	2000      	movs	r0, #0
    7f78:	bd70      	pop	{r4, r5, r6, pc}
    7f7a:	480c      	ldr	r0, [pc, #48]	; (7fac <CC_PalPowerSaveModeSelect+0x80>)
    7f7c:	bd70      	pop	{r4, r5, r6, pc}
    7f7e:	4a0a      	ldr	r2, [pc, #40]	; (7fa8 <CC_PalPowerSaveModeSelect+0x7c>)
    7f80:	6813      	ldr	r3, [r2, #0]
    7f82:	2b00      	cmp	r3, #0
    7f84:	d1fc      	bne.n	7f80 <CC_PalPowerSaveModeSelect+0x54>
    7f86:	4a07      	ldr	r2, [pc, #28]	; (7fa4 <CC_PalPowerSaveModeSelect+0x78>)
    7f88:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7f8c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7f90:	f7ff ff48 	bl	7e24 <CC_HalMaskInterrupt>
    7f94:	6823      	ldr	r3, [r4, #0]
    7f96:	e7d7      	b.n	7f48 <CC_PalPowerSaveModeSelect+0x1c>
    7f98:	20000194 	.word	0x20000194
    7f9c:	20000184 	.word	0x20000184
    7fa0:	20000c24 	.word	0x20000c24
    7fa4:	5002a000 	.word	0x5002a000
    7fa8:	5002b910 	.word	0x5002b910
    7fac:	ffff8fe9 	.word	0xffff8fe9

00007fb0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7fb0:	4770      	bx	lr

00007fb2 <k_uptime_get>:
{
    7fb2:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    7fb4:	f000 fc71 	bl	889a <z_impl_k_uptime_ticks>
    7fb8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    7fbc:	fba0 2304 	umull	r2, r3, r0, r4
    7fc0:	fb04 3301 	mla	r3, r4, r1, r3
    7fc4:	0bd0      	lsrs	r0, r2, #15
}
    7fc6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    7fca:	0bd9      	lsrs	r1, r3, #15
    7fcc:	bd10      	pop	{r4, pc}

00007fce <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    7fce:	4040      	eors	r0, r0
    7fd0:	f380 8811 	msr	BASEPRI, r0
    7fd4:	f04f 0004 	mov.w	r0, #4
    7fd8:	df02      	svc	2
}
    7fda:	4770      	bx	lr

00007fdc <encode_uint>:
{
    7fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fe0:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    7fe2:	78d3      	ldrb	r3, [r2, #3]
{
    7fe4:	4614      	mov	r4, r2
	switch (specifier) {
    7fe6:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7fe8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    7fec:	4606      	mov	r6, r0
    7fee:	460f      	mov	r7, r1
    7ff0:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    7ff2:	d02d      	beq.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    7ff4:	d828      	bhi.n	8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
		return 16;
    7ff6:	2b58      	cmp	r3, #88	; 0x58
    7ff8:	bf14      	ite	ne
    7ffa:	250a      	movne	r5, #10
    7ffc:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    7ffe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8002:	46aa      	mov	sl, r5
    8004:	f04f 0b00 	mov.w	fp, #0
    8008:	4652      	mov	r2, sl
    800a:	465b      	mov	r3, fp
    800c:	4630      	mov	r0, r6
    800e:	4639      	mov	r1, r7
    8010:	f7f8 fc64 	bl	8dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8014:	2a09      	cmp	r2, #9
    8016:	b2d3      	uxtb	r3, r2
    8018:	d81f      	bhi.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    801a:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    801c:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    801e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8020:	bf08      	it	eq
    8022:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8024:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    8028:	d301      	bcc.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    802a:	45c8      	cmp	r8, r9
    802c:	d812      	bhi.n	8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
	if (conv->flag_hash) {
    802e:	7823      	ldrb	r3, [r4, #0]
    8030:	069b      	lsls	r3, r3, #26
    8032:	d505      	bpl.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
		if (radix == 8) {
    8034:	2d08      	cmp	r5, #8
    8036:	d116      	bne.n	8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
			conv->altform_0 = true;
    8038:	78a3      	ldrb	r3, [r4, #2]
    803a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    803e:	70a3      	strb	r3, [r4, #2]
}
    8040:	4640      	mov	r0, r8
    8042:	b003      	add	sp, #12
    8044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8048:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    804c:	2b70      	cmp	r3, #112	; 0x70
    804e:	e7d3      	b.n	7ff8 <encode_uint+0x1c>
	switch (specifier) {
    8050:	2508      	movs	r5, #8
    8052:	e7d4      	b.n	7ffe <encode_uint+0x22>
		value /= radix;
    8054:	4606      	mov	r6, r0
    8056:	460f      	mov	r7, r1
    8058:	e7d6      	b.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    805a:	9a01      	ldr	r2, [sp, #4]
    805c:	2a19      	cmp	r2, #25
    805e:	bf94      	ite	ls
    8060:	3337      	addls	r3, #55	; 0x37
    8062:	3357      	addhi	r3, #87	; 0x57
    8064:	e7da      	b.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
		} else if (radix == 16) {
    8066:	2d10      	cmp	r5, #16
    8068:	d1ea      	bne.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
			conv->altform_0c = true;
    806a:	78a3      	ldrb	r3, [r4, #2]
    806c:	f043 0310 	orr.w	r3, r3, #16
    8070:	e7e5      	b.n	803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>

00008072 <outs>:
{
    8072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8076:	4607      	mov	r7, r0
    8078:	4688      	mov	r8, r1
    807a:	4615      	mov	r5, r2
    807c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    807e:	4614      	mov	r4, r2
    8080:	42b4      	cmp	r4, r6
    8082:	eba4 0005 	sub.w	r0, r4, r5
    8086:	d302      	bcc.n	808e <outs+0x1c>
    8088:	b93e      	cbnz	r6, 809a <outs+0x28>
    808a:	7823      	ldrb	r3, [r4, #0]
    808c:	b12b      	cbz	r3, 809a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    808e:	f814 0b01 	ldrb.w	r0, [r4], #1
    8092:	4641      	mov	r1, r8
    8094:	47b8      	blx	r7
		if (rc < 0) {
    8096:	2800      	cmp	r0, #0
    8098:	daf2      	bge.n	8080 <outs+0xe>
}
    809a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000809e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    809e:	4770      	bx	lr

000080a0 <sys_notify_validate>:
	if (notify == NULL) {
    80a0:	4603      	mov	r3, r0
    80a2:	b158      	cbz	r0, 80bc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    80a4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    80a6:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    80aa:	2a01      	cmp	r2, #1
    80ac:	d003      	beq.n	80b6 <sys_notify_validate+0x16>
    80ae:	2a03      	cmp	r2, #3
    80b0:	d104      	bne.n	80bc <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    80b2:	6802      	ldr	r2, [r0, #0]
    80b4:	b112      	cbz	r2, 80bc <sys_notify_validate+0x1c>
		notify->result = 0;
    80b6:	2000      	movs	r0, #0
    80b8:	6098      	str	r0, [r3, #8]
    80ba:	4770      	bx	lr
		return -EINVAL;
    80bc:	f06f 0015 	mvn.w	r0, #21
}
    80c0:	4770      	bx	lr

000080c2 <abort_function>:
{
    80c2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    80c4:	2000      	movs	r0, #0
    80c6:	f7fa f85f 	bl	2188 <sys_reboot>

000080ca <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    80ca:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    80cc:	f013 0307 	ands.w	r3, r3, #7
    80d0:	d105      	bne.n	80de <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    80d2:	6803      	ldr	r3, [r0, #0]
    80d4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    80d6:	bf0c      	ite	eq
    80d8:	2000      	moveq	r0, #0
    80da:	2003      	movne	r0, #3
    80dc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    80de:	2b02      	cmp	r3, #2
    80e0:	d105      	bne.n	80ee <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    80e2:	8bc3      	ldrh	r3, [r0, #30]
    80e4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    80e6:	bf14      	ite	ne
    80e8:	2000      	movne	r0, #0
    80ea:	2004      	moveq	r0, #4
    80ec:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    80ee:	2b01      	cmp	r3, #1
    80f0:	d105      	bne.n	80fe <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    80f2:	6803      	ldr	r3, [r0, #0]
    80f4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    80f6:	bf0c      	ite	eq
    80f8:	2000      	moveq	r0, #0
    80fa:	2005      	movne	r0, #5
    80fc:	4770      	bx	lr
	int evt = EVT_NOP;
    80fe:	2000      	movs	r0, #0
}
    8100:	4770      	bx	lr

00008102 <notify_one>:
{
    8102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8106:	460d      	mov	r5, r1
    8108:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    810a:	4619      	mov	r1, r3
    810c:	1d28      	adds	r0, r5, #4
{
    810e:	4690      	mov	r8, r2
    8110:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8112:	f7f9 fb29 	bl	1768 <sys_notify_finalize>
	if (cb) {
    8116:	4604      	mov	r4, r0
    8118:	b138      	cbz	r0, 812a <notify_one+0x28>
		cb(mgr, cli, state, res);
    811a:	4633      	mov	r3, r6
    811c:	4642      	mov	r2, r8
    811e:	4629      	mov	r1, r5
    8120:	4638      	mov	r0, r7
    8122:	46a4      	mov	ip, r4
}
    8124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8128:	4760      	bx	ip
}
    812a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000812e <validate_args>:
{
    812e:	b510      	push	{r4, lr}
    8130:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8132:	b140      	cbz	r0, 8146 <validate_args+0x18>
    8134:	b139      	cbz	r1, 8146 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8136:	1d08      	adds	r0, r1, #4
    8138:	f7ff ffb2 	bl	80a0 <sys_notify_validate>
	if ((rv == 0)
    813c:	b928      	cbnz	r0, 814a <validate_args+0x1c>
	    && ((cli->notify.flags
    813e:	68a3      	ldr	r3, [r4, #8]
    8140:	f033 0303 	bics.w	r3, r3, #3
    8144:	d001      	beq.n	814a <validate_args+0x1c>
		rv = -EINVAL;
    8146:	f06f 0015 	mvn.w	r0, #21
}
    814a:	bd10      	pop	{r4, pc}

0000814c <onoff_manager_init>:
{
    814c:	b538      	push	{r3, r4, r5, lr}
    814e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8150:	4605      	mov	r5, r0
    8152:	b158      	cbz	r0, 816c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8154:	b151      	cbz	r1, 816c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8156:	680b      	ldr	r3, [r1, #0]
    8158:	b143      	cbz	r3, 816c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    815a:	684b      	ldr	r3, [r1, #4]
    815c:	b133      	cbz	r3, 816c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    815e:	2220      	movs	r2, #32
    8160:	2100      	movs	r1, #0
    8162:	f000 f869 	bl	8238 <memset>
    8166:	612c      	str	r4, [r5, #16]
	return 0;
    8168:	2000      	movs	r0, #0
}
    816a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    816c:	f06f 0015 	mvn.w	r0, #21
    8170:	e7fb      	b.n	816a <onoff_manager_init+0x1e>

00008172 <arch_printk_char_out>:
}
    8172:	2000      	movs	r0, #0
    8174:	4770      	bx	lr

00008176 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    8176:	b40f      	push	{r0, r1, r2, r3}
    8178:	b507      	push	{r0, r1, r2, lr}
    817a:	a904      	add	r1, sp, #16
    817c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8180:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    8182:	f7f9 fff3 	bl	216c <vprintk>
	}
	va_end(ap);
}
    8186:	b003      	add	sp, #12
    8188:	f85d eb04 	ldr.w	lr, [sp], #4
    818c:	b004      	add	sp, #16
    818e:	4770      	bx	lr

00008190 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8190:	2200      	movs	r2, #0
    8192:	e9c0 2200 	strd	r2, r2, [r0]
    8196:	6082      	str	r2, [r0, #8]
}
    8198:	4770      	bx	lr

0000819a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    819a:	4604      	mov	r4, r0
    819c:	b508      	push	{r3, lr}
    819e:	4608      	mov	r0, r1
    81a0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    81a2:	461a      	mov	r2, r3
    81a4:	47a0      	blx	r4
	return z_impl_z_current_get();
    81a6:	f7fe fdd9 	bl	6d5c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    81aa:	f7fa fb29 	bl	2800 <z_impl_k_thread_abort>

000081ae <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    81ae:	f7fd b933 	b.w	5418 <z_fatal_error>

000081b2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    81b2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    81b4:	6800      	ldr	r0, [r0, #0]
    81b6:	f7fd b92f 	b.w	5418 <z_fatal_error>

000081ba <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    81ba:	2100      	movs	r1, #0
    81bc:	2001      	movs	r0, #1
    81be:	f7ff bff6 	b.w	81ae <z_arm_fatal_error>

000081c2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    81c2:	b508      	push	{r3, lr}
	handler();
    81c4:	f7fa f832 	bl	222c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    81c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    81cc:	f7fa b940 	b.w	2450 <z_arm_exc_exit>

000081d0 <_stdout_hook_default>:
}
    81d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81d4:	4770      	bx	lr

000081d6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    81d6:	3901      	subs	r1, #1
    81d8:	4603      	mov	r3, r0
    81da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    81de:	b90a      	cbnz	r2, 81e4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    81e0:	701a      	strb	r2, [r3, #0]

	return dest;
}
    81e2:	4770      	bx	lr
		*d = *s;
    81e4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    81e8:	e7f7      	b.n	81da <strcpy+0x4>

000081ea <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    81ea:	4603      	mov	r3, r0
	size_t n = 0;
    81ec:	2000      	movs	r0, #0

	while (*s != '\0') {
    81ee:	5c1a      	ldrb	r2, [r3, r0]
    81f0:	b902      	cbnz	r2, 81f4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    81f2:	4770      	bx	lr
		n++;
    81f4:	3001      	adds	r0, #1
    81f6:	e7fa      	b.n	81ee <strlen+0x4>

000081f8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    81f8:	4603      	mov	r3, r0
	size_t n = 0;
    81fa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    81fc:	5c1a      	ldrb	r2, [r3, r0]
    81fe:	b10a      	cbz	r2, 8204 <strnlen+0xc>
    8200:	4288      	cmp	r0, r1
    8202:	d100      	bne.n	8206 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8204:	4770      	bx	lr
		n++;
    8206:	3001      	adds	r0, #1
    8208:	e7f8      	b.n	81fc <strnlen+0x4>

0000820a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    820a:	1e43      	subs	r3, r0, #1
    820c:	3901      	subs	r1, #1
    820e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8212:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8216:	4282      	cmp	r2, r0
    8218:	d101      	bne.n	821e <strcmp+0x14>
    821a:	2a00      	cmp	r2, #0
    821c:	d1f7      	bne.n	820e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    821e:	1a10      	subs	r0, r2, r0
    8220:	4770      	bx	lr

00008222 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8222:	b510      	push	{r4, lr}
    8224:	1e43      	subs	r3, r0, #1
    8226:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8228:	4291      	cmp	r1, r2
    822a:	d100      	bne.n	822e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    822c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    822e:	f811 4b01 	ldrb.w	r4, [r1], #1
    8232:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8236:	e7f7      	b.n	8228 <memcpy+0x6>

00008238 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8238:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    823a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    823c:	4603      	mov	r3, r0
	while (n > 0) {
    823e:	4293      	cmp	r3, r2
    8240:	d100      	bne.n	8244 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8242:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8244:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8248:	e7f9      	b.n	823e <memset+0x6>

0000824a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    824a:	b084      	sub	sp, #16
    824c:	ab04      	add	r3, sp, #16
    824e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    8252:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8256:	2b06      	cmp	r3, #6
    8258:	d108      	bne.n	826c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    825a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    825e:	2201      	movs	r2, #1
    8260:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8264:	f3bf 8f4f 	dsb	sy
        __WFE();
    8268:	bf20      	wfe
    while (true)
    826a:	e7fd      	b.n	8268 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    826c:	b004      	add	sp, #16
    826e:	4770      	bx	lr

00008270 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8270:	b084      	sub	sp, #16
    8272:	ab04      	add	r3, sp, #16
    8274:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8278:	2300      	movs	r3, #0
    827a:	f383 8811 	msr	BASEPRI, r3
    827e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8282:	b004      	add	sp, #16
    8284:	4770      	bx	lr

00008286 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    8286:	f1a0 0308 	sub.w	r3, r0, #8
    828a:	f3bf 8f5b 	dmb	ish
    828e:	e853 2f00 	ldrex	r2, [r3]
    8292:	1c51      	adds	r1, r2, #1
    8294:	e843 1c00 	strex	ip, r1, [r3]
    8298:	f1bc 0f00 	cmp.w	ip, #0
    829c:	d1f7      	bne.n	828e <adc_context_on_timer_expired+0x8>
    829e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    82a2:	b91a      	cbnz	r2, 82ac <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    82a4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    82a8:	f7fa bc3a 	b.w	2b20 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    82ac:	f06f 030f 	mvn.w	r3, #15
    82b0:	6583      	str	r3, [r0, #88]	; 0x58
}
    82b2:	4770      	bx	lr

000082b4 <set_starting_state>:
{
    82b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    82b6:	f04f 0320 	mov.w	r3, #32
    82ba:	f3ef 8211 	mrs	r2, BASEPRI
    82be:	f383 8812 	msr	BASEPRI_MAX, r3
    82c2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    82c6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    82c8:	f003 0407 	and.w	r4, r3, #7
    82cc:	2c01      	cmp	r4, #1
    82ce:	d106      	bne.n	82de <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    82d0:	6001      	str	r1, [r0, #0]
	int err = 0;
    82d2:	2000      	movs	r0, #0
	__asm__ volatile(
    82d4:	f382 8811 	msr	BASEPRI, r2
    82d8:	f3bf 8f6f 	isb	sy
}
    82dc:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    82de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    82e2:	428b      	cmp	r3, r1
		err = -EALREADY;
    82e4:	bf14      	ite	ne
    82e6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    82ea:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    82ee:	e7f1      	b.n	82d4 <set_starting_state+0x20>

000082f0 <set_on_state>:
	__asm__ volatile(
    82f0:	f04f 0320 	mov.w	r3, #32
    82f4:	f3ef 8211 	mrs	r2, BASEPRI
    82f8:	f383 8812 	msr	BASEPRI_MAX, r3
    82fc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8300:	6803      	ldr	r3, [r0, #0]
    8302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8306:	f043 0302 	orr.w	r3, r3, #2
    830a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    830c:	f382 8811 	msr	BASEPRI, r2
    8310:	f3bf 8f6f 	isb	sy
}
    8314:	4770      	bx	lr

00008316 <onoff_started_callback>:
	return &data->mgr[type];
    8316:	6900      	ldr	r0, [r0, #16]
    8318:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    831a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    831e:	2100      	movs	r1, #0
    8320:	4710      	bx	r2

00008322 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8322:	2000      	movs	r0, #0
    8324:	f7fb bf78 	b.w	4218 <nrfx_clock_start>

00008328 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8328:	2000      	movs	r0, #0
    832a:	f7fb bfc9 	b.w	42c0 <nrfx_clock_stop>

0000832e <api_stop>:
	return stop(dev, subsys, CTX_API);
    832e:	2280      	movs	r2, #128	; 0x80
    8330:	f7fa be10 	b.w	2f54 <stop>

00008334 <blocking_start_callback>:
{
    8334:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8336:	f7fe bdcb 	b.w	6ed0 <z_impl_k_sem_give>

0000833a <api_start>:
{
    833a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    833e:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    8340:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8342:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    8344:	436f      	muls	r7, r5
{
    8346:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8348:	f107 0048 	add.w	r0, r7, #72	; 0x48
    834c:	2180      	movs	r1, #128	; 0x80
    834e:	4420      	add	r0, r4
{
    8350:	4690      	mov	r8, r2
    8352:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    8354:	f7ff ffae 	bl	82b4 <set_starting_state>
	if (err < 0) {
    8358:	2800      	cmp	r0, #0
    835a:	db07      	blt.n	836c <api_start+0x32>
	subdata->cb = cb;
    835c:	443c      	add	r4, r7
	subdata->user_data = user_data;
    835e:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8362:	6873      	ldr	r3, [r6, #4]
    8364:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    8368:	4798      	blx	r3
	return 0;
    836a:	2000      	movs	r0, #0
}
    836c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008370 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8370:	6843      	ldr	r3, [r0, #4]
    8372:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8374:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8378:	600b      	str	r3, [r1, #0]
}
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr

0000837e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    837e:	6843      	ldr	r3, [r0, #4]
    8380:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8382:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8386:	4042      	eors	r2, r0
    8388:	400a      	ands	r2, r1
    838a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    838c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8390:	2000      	movs	r0, #0
    8392:	4770      	bx	lr

00008394 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8394:	6843      	ldr	r3, [r0, #4]
    8396:	685b      	ldr	r3, [r3, #4]
}
    8398:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    839a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    839e:	4770      	bx	lr

000083a0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    83a0:	6843      	ldr	r3, [r0, #4]
    83a2:	685b      	ldr	r3, [r3, #4]
}
    83a4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    83a6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    83aa:	4770      	bx	lr

000083ac <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    83ac:	6843      	ldr	r3, [r0, #4]
    83ae:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    83b0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    83b4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    83b6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr

000083be <any_other_channel_is_active>:
{
    83be:	b530      	push	{r4, r5, lr}
    83c0:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    83c2:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    83c4:	b2da      	uxtb	r2, r3
    83c6:	4282      	cmp	r2, r0
    83c8:	d007      	beq.n	83da <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    83ca:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    83ce:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    83d2:	b112      	cbz	r2, 83da <any_other_channel_is_active+0x1c>
    83d4:	898d      	ldrh	r5, [r1, #12]
    83d6:	4295      	cmp	r5, r2
    83d8:	d804      	bhi.n	83e4 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    83da:	3301      	adds	r3, #1
    83dc:	2b04      	cmp	r3, #4
    83de:	d1f1      	bne.n	83c4 <any_other_channel_is_active+0x6>
	return false;
    83e0:	2000      	movs	r0, #0
}
    83e2:	bd30      	pop	{r4, r5, pc}
			return true;
    83e4:	2001      	movs	r0, #1
    83e6:	e7fc      	b.n	83e2 <any_other_channel_is_active+0x24>

000083e8 <pwm_nrfx_pin_set>:
{
    83e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83ec:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    83f0:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    83f2:	6904      	ldr	r4, [r0, #16]
{
    83f4:	4688      	mov	r8, r1
    83f6:	4616      	mov	r6, r2
    83f8:	4699      	mov	r9, r3
	if (flags) {
    83fa:	2d00      	cmp	r5, #0
    83fc:	d140      	bne.n	8480 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    83fe:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    8400:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    8404:	2bff      	cmp	r3, #255	; 0xff
    8406:	d003      	beq.n	8410 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    8408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    840c:	4598      	cmp	r8, r3
    840e:	d03a      	beq.n	8486 <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    8410:	3501      	adds	r5, #1
    8412:	b2ed      	uxtb	r5, r5
    8414:	2d04      	cmp	r5, #4
    8416:	d1f3      	bne.n	8400 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    8418:	f06f 0015 	mvn.w	r0, #21
    841c:	e009      	b.n	8432 <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    841e:	2000      	movs	r0, #0
    8420:	e042      	b.n	84a8 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    8422:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8424:	2b08      	cmp	r3, #8
		countertop >>= 1;
    8426:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    842a:	d158      	bne.n	84de <pwm_nrfx_pin_set+0xf6>
    842c:	e7f4      	b.n	8418 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    842e:	b9d0      	cbnz	r0, 8466 <pwm_nrfx_pin_set+0x7e>
	return 0;
    8430:	2000      	movs	r0, #0
}
    8432:	b003      	add	sp, #12
    8434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    8438:	454e      	cmp	r6, r9
    843a:	d87f      	bhi.n	853c <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    843c:	a801      	add	r0, sp, #4
    843e:	f8cd 8004 	str.w	r8, [sp, #4]
    8442:	f7fb f9bb 	bl	37bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8446:	9a01      	ldr	r2, [sp, #4]
    8448:	2301      	movs	r3, #1
    844a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    844c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    8450:	4621      	mov	r1, r4
    8452:	4628      	mov	r0, r5
    8454:	f7ff ffb3 	bl	83be <any_other_channel_is_active>
    8458:	2800      	cmp	r0, #0
    845a:	d1e9      	bne.n	8430 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    845c:	4601      	mov	r1, r0
    845e:	4638      	mov	r0, r7
    8460:	f7fc fe18 	bl	5094 <nrfx_pwm_stop>
    8464:	e7e4      	b.n	8430 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    8466:	4638      	mov	r0, r7
    8468:	f7fc fde6 	bl	5038 <nrfx_pwm_is_stopped>
    846c:	2800      	cmp	r0, #0
    846e:	d0fa      	beq.n	8466 <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    8470:	2302      	movs	r3, #2
    8472:	2201      	movs	r2, #1
    8474:	f107 0118 	add.w	r1, r7, #24
    8478:	4638      	mov	r0, r7
    847a:	f7fc fd69 	bl	4f50 <nrfx_pwm_simple_playback>
    847e:	e7d7      	b.n	8430 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    8480:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8484:	e7d5      	b.n	8432 <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    8486:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    848a:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    848e:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8492:	b113      	cbz	r3, 849a <pwm_nrfx_pin_set+0xb2>
    8494:	89a2      	ldrh	r2, [r4, #12]
    8496:	429a      	cmp	r2, r3
    8498:	d8c1      	bhi.n	841e <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    849a:	4621      	mov	r1, r4
    849c:	4628      	mov	r0, r5
    849e:	f7ff ff8e 	bl	83be <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    84a2:	f080 0001 	eor.w	r0, r0, #1
    84a6:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    84a8:	7bb9      	ldrb	r1, [r7, #14]
    84aa:	2901      	cmp	r1, #1
		period_cycles /= 2;
    84ac:	bf04      	itt	eq
    84ae:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    84b0:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    84b4:	b326      	cbz	r6, 8500 <pwm_nrfx_pin_set+0x118>
    84b6:	6823      	ldr	r3, [r4, #0]
    84b8:	42b3      	cmp	r3, r6
    84ba:	d021      	beq.n	8500 <pwm_nrfx_pin_set+0x118>
    84bc:	2300      	movs	r3, #0
				data->current[i]
    84be:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    84c2:	b2da      	uxtb	r2, r3
    84c4:	42aa      	cmp	r2, r5
    84c6:	d005      	beq.n	84d4 <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    84c8:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    84cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
    84d0:	2a00      	cmp	r2, #0
    84d2:	d1a1      	bne.n	8418 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    84d4:	3301      	adds	r3, #1
    84d6:	2b04      	cmp	r3, #4
    84d8:	d1f3      	bne.n	84c2 <pwm_nrfx_pin_set+0xda>
    84da:	4632      	mov	r2, r6
    84dc:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    84de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    84e2:	fa5f fc83 	uxtb.w	ip, r3
    84e6:	d29c      	bcs.n	8422 <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    84e8:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    84ec:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    84f0:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    84f2:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    84f4:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    84f8:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    84fc:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    8500:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    8502:	454e      	cmp	r6, r9
    8504:	4633      	mov	r3, r6
    8506:	bf28      	it	cs
    8508:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    850a:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    850e:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    8512:	ea42 020b 	orr.w	r2, r2, fp
    8516:	b292      	uxth	r2, r2
	data->current[channel] = (
    8518:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    851c:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    8520:	b112      	cbz	r2, 8528 <pwm_nrfx_pin_set+0x140>
    8522:	89a1      	ldrh	r1, [r4, #12]
    8524:	4291      	cmp	r1, r2
    8526:	d882      	bhi.n	842e <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    8528:	197a      	adds	r2, r7, r5
    852a:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    852e:	2b00      	cmp	r3, #0
    8530:	d082      	beq.n	8438 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    8532:	454e      	cmp	r6, r9
    8534:	d805      	bhi.n	8542 <pwm_nrfx_pin_set+0x15a>
    8536:	2a00      	cmp	r2, #0
    8538:	db80      	blt.n	843c <pwm_nrfx_pin_set+0x54>
    853a:	e002      	b.n	8542 <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    853c:	2a00      	cmp	r2, #0
    853e:	f6bf af7d 	bge.w	843c <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8542:	a801      	add	r0, sp, #4
    8544:	f8cd 8004 	str.w	r8, [sp, #4]
    8548:	f7fb f938 	bl	37bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    854c:	9a01      	ldr	r2, [sp, #4]
    854e:	2301      	movs	r3, #1
    8550:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8552:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    8556:	e77b      	b.n	8450 <pwm_nrfx_pin_set+0x68>

00008558 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    8558:	6843      	ldr	r3, [r0, #4]
    855a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    855c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8560:	05d1      	lsls	r1, r2, #23
    8562:	d518      	bpl.n	8596 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8564:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    8568:	b1aa      	cbz	r2, 8596 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    856a:	f04f 0120 	mov.w	r1, #32
    856e:	f3ef 8211 	mrs	r2, BASEPRI
    8572:	f381 8812 	msr	BASEPRI_MAX, r1
    8576:	f3bf 8f6f 	isb	sy
    857a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    857e:	b131      	cbz	r1, 858e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8580:	2100      	movs	r1, #0
    8582:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8586:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    858a:	2101      	movs	r1, #1
    858c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    858e:	f382 8811 	msr	BASEPRI, r2
    8592:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8596:	6842      	ldr	r2, [r0, #4]
    8598:	6852      	ldr	r2, [r2, #4]
    859a:	06d2      	lsls	r2, r2, #27
    859c:	d515      	bpl.n	85ca <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    859e:	f04f 0120 	mov.w	r1, #32
    85a2:	f3ef 8211 	mrs	r2, BASEPRI
    85a6:	f381 8812 	msr	BASEPRI_MAX, r1
    85aa:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85ae:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    85b2:	b111      	cbz	r1, 85ba <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    85b4:	2100      	movs	r1, #0
    85b6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    85ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    85be:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    85c2:	f382 8811 	msr	BASEPRI, r2
    85c6:	f3bf 8f6f 	isb	sy
}
    85ca:	4770      	bx	lr

000085cc <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    85cc:	6902      	ldr	r2, [r0, #16]
{
    85ce:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    85d0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    85d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    85d8:	2000      	movs	r0, #0
    85da:	4770      	bx	lr

000085dc <uarte_nrfx_err_check>:
	return config->uarte_regs;
    85dc:	6843      	ldr	r3, [r0, #4]
    85de:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    85e0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    85e4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    85e8:	4770      	bx	lr

000085ea <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    85ea:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    85ec:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85ee:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    85f2:	b940      	cbnz	r0, 8606 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    85f4:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    85f6:	0792      	lsls	r2, r2, #30
    85f8:	d406      	bmi.n	8608 <is_tx_ready+0x1e>
    85fa:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    85fe:	3800      	subs	r0, #0
    8600:	bf18      	it	ne
    8602:	2001      	movne	r0, #1
    8604:	4770      	bx	lr
    8606:	2001      	movs	r0, #1
}
    8608:	4770      	bx	lr

0000860a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    860a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    860c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    860e:	681b      	ldr	r3, [r3, #0]
    8610:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8614:	b148      	cbz	r0, 862a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    8616:	7c52      	ldrb	r2, [r2, #17]
    8618:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    861a:	2000      	movs	r0, #0
    861c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8620:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8624:	2201      	movs	r2, #1
    8626:	601a      	str	r2, [r3, #0]
	return 0;
    8628:	4770      	bx	lr
		return -1;
    862a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    862e:	4770      	bx	lr

00008630 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    8630:	b510      	push	{r4, lr}
    8632:	2200      	movs	r2, #0
    8634:	4604      	mov	r4, r0
    8636:	2101      	movs	r1, #1
    8638:	2002      	movs	r0, #2
    863a:	f7f9 fe53 	bl	22e4 <z_arm_irq_priority_set>
    863e:	2002      	movs	r0, #2
    8640:	f7f9 fe32 	bl	22a8 <arch_irq_enable>
    8644:	4620      	mov	r0, r4
    8646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    864a:	f7fb ba4f 	b.w	3aec <uarte_instance_init.isra.0>

0000864e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    864e:	b510      	push	{r4, lr}
    8650:	2200      	movs	r2, #0
    8652:	4604      	mov	r4, r0
    8654:	2101      	movs	r1, #1
    8656:	2028      	movs	r0, #40	; 0x28
    8658:	f7f9 fe44 	bl	22e4 <z_arm_irq_priority_set>
    865c:	2028      	movs	r0, #40	; 0x28
    865e:	f7f9 fe23 	bl	22a8 <arch_irq_enable>
    8662:	4620      	mov	r0, r4
    8664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8668:	f7fb ba40 	b.w	3aec <uarte_instance_init.isra.0>

0000866c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    866c:	4770      	bx	lr

0000866e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    866e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    8670:	2000      	movs	r0, #0
    8672:	f7fa fa35 	bl	2ae0 <sys_arch_reboot>

00008676 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8676:	f7ff babb 	b.w	7bf0 <nrf_cc3xx_platform_init_no_rng>

0000867a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    867a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    867c:	f7f9 f894 	bl	17a8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8680:	f7f9 f946 	bl	1910 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8688:	f7ff bab2 	b.w	7bf0 <nrf_cc3xx_platform_init_no_rng>

0000868c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    868c:	4700      	bx	r0

0000868e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    868e:	f000 b906 	b.w	889e <z_impl_k_busy_wait>

00008692 <nrf_gpio_pin_present_check>:
    switch (port)
    8692:	0943      	lsrs	r3, r0, #5
    8694:	d00b      	beq.n	86ae <nrf_gpio_pin_present_check+0x1c>
    8696:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    8698:	f64f 73ff 	movw	r3, #65535	; 0xffff
    869c:	bf18      	it	ne
    869e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    86a0:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    86a4:	fa23 f000 	lsr.w	r0, r3, r0
}
    86a8:	f000 0001 	and.w	r0, r0, #1
    86ac:	4770      	bx	lr
    switch (port)
    86ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    86b2:	e7f5      	b.n	86a0 <nrf_gpio_pin_present_check+0xe>

000086b4 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    86b4:	0080      	lsls	r0, r0, #2
}
    86b6:	f500 7080 	add.w	r0, r0, #256	; 0x100
    86ba:	4770      	bx	lr

000086bc <nrf_gpio_reconfigure>:
{
    86bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    86c0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86c2:	a801      	add	r0, sp, #4
{
    86c4:	460e      	mov	r6, r1
    86c6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    86ca:	4690      	mov	r8, r2
    86cc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86ce:	f7fb ff65 	bl	459c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    86d2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    86d4:	f1b8 0f00 	cmp.w	r8, #0
    86d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    86dc:	bf14      	ite	ne
    86de:	2302      	movne	r3, #2
    86e0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    86e2:	2e00      	cmp	r6, #0
    86e4:	bf18      	it	ne
    86e6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    86ea:	2d00      	cmp	r5, #0
    86ec:	bf14      	ite	ne
    86ee:	210c      	movne	r1, #12
    86f0:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    86f2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    86f4:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    86f8:	bf14      	ite	ne
    86fa:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    86fe:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8700:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8702:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8706:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    870a:	bf14      	ite	ne
    870c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    8710:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8712:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    8714:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8718:	b106      	cbz	r6, 871c <nrf_gpio_reconfigure+0x60>
    871a:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    871c:	f1b8 0f00 	cmp.w	r8, #0
    8720:	d003      	beq.n	872a <nrf_gpio_reconfigure+0x6e>
    8722:	f898 8000 	ldrb.w	r8, [r8]
    8726:	ea4f 0848 	mov.w	r8, r8, lsl #1
    872a:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    872c:	b10d      	cbz	r5, 8732 <nrf_gpio_reconfigure+0x76>
    872e:	782d      	ldrb	r5, [r5, #0]
    8730:	00ad      	lsls	r5, r5, #2
    8732:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8736:	b10c      	cbz	r4, 873c <nrf_gpio_reconfigure+0x80>
    8738:	7822      	ldrb	r2, [r4, #0]
    873a:	0214      	lsls	r4, r2, #8
    873c:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    873e:	b10f      	cbz	r7, 8744 <nrf_gpio_reconfigure+0x88>
    8740:	783f      	ldrb	r7, [r7, #0]
    8742:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8744:	432c      	orrs	r4, r5
    8746:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    8748:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    874c:	b002      	add	sp, #8
    874e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008752 <nrf_gpio_cfg_sense_set>:
{
    8752:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8754:	f10d 030f 	add.w	r3, sp, #15
    8758:	9301      	str	r3, [sp, #4]
    875a:	2300      	movs	r3, #0
{
    875c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8760:	9300      	str	r3, [sp, #0]
    8762:	461a      	mov	r2, r3
    8764:	4619      	mov	r1, r3
    8766:	f7ff ffa9 	bl	86bc <nrf_gpio_reconfigure>
}
    876a:	b005      	add	sp, #20
    876c:	f85d fb04 	ldr.w	pc, [sp], #4

00008770 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    8770:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    8772:	2402      	movs	r4, #2
    8774:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    8776:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    8778:	6809      	ldr	r1, [r1, #0]
    877a:	b171      	cbz	r1, 879a <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    877c:	f012 0f04 	tst.w	r2, #4
    8780:	bf0c      	ite	eq
    8782:	2182      	moveq	r1, #130	; 0x82
    8784:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    8786:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    8788:	bf48      	it	mi
    878a:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    878e:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    8790:	bf48      	it	mi
    8792:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    8796:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    879a:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    879c:	f04f 0100 	mov.w	r1, #0
    87a0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    87a4:	bf58      	it	pl
    87a6:	2201      	movpl	r2, #1
    87a8:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    87ac:	bf56      	itet	pl
    87ae:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    87b0:	18c0      	addmi	r0, r0, r3
    return 0;
    87b2:	4608      	movpl	r0, r1
}
    87b4:	bd10      	pop	{r4, pc}

000087b6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    87b6:	f7fc bdad 	b.w	5314 <_DoInit>

000087ba <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    87ba:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    87bc:	f7ff fffb 	bl	87b6 <SEGGER_RTT_Init>

	return 0;
}
    87c0:	2000      	movs	r0, #0
    87c2:	bd08      	pop	{r3, pc}

000087c4 <z_device_state_init>:
}
    87c4:	4770      	bx	lr

000087c6 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    87c6:	b138      	cbz	r0, 87d8 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    87c8:	68c3      	ldr	r3, [r0, #12]
    87ca:	8818      	ldrh	r0, [r3, #0]
    87cc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    87d0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    87d4:	4258      	negs	r0, r3
    87d6:	4158      	adcs	r0, r3
}
    87d8:	4770      	bx	lr

000087da <z_pm_save_idle_exit>:
{
    87da:	b508      	push	{r3, lr}
	pm_system_resume();
    87dc:	f7f9 fbf4 	bl	1fc8 <pm_system_resume>
}
    87e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    87e4:	f7ff bf42 	b.w	866c <sys_clock_idle_exit>

000087e8 <k_mem_slab_init>:
{
    87e8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    87ea:	2400      	movs	r4, #0
    87ec:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    87ee:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    87f0:	ea41 0402 	orr.w	r4, r1, r2
    87f4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    87f8:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    87fc:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    87fe:	d10c      	bne.n	881a <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8800:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8802:	42a3      	cmp	r3, r4
    8804:	d103      	bne.n	880e <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    8806:	e9c0 0000 	strd	r0, r0, [r0]
}
    880a:	2000      	movs	r0, #0
}
    880c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    880e:	6985      	ldr	r5, [r0, #24]
    8810:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8812:	3401      	adds	r4, #1
		slab->free_list = p;
    8814:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8816:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8818:	e7f3      	b.n	8802 <k_mem_slab_init+0x1a>
		return -EINVAL;
    881a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    881e:	e7f5      	b.n	880c <k_mem_slab_init+0x24>

00008820 <z_impl_k_mutex_init>:
{
    8820:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8822:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    8824:	e9c3 0002 	strd	r0, r0, [r3, #8]
    8828:	e9c3 3300 	strd	r3, r3, [r3]
}
    882c:	4770      	bx	lr

0000882e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    882e:	4603      	mov	r3, r0
    8830:	b920      	cbnz	r0, 883c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8832:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8836:	b90a      	cbnz	r2, 883c <z_reschedule_irqlock+0xe>
    8838:	f7f9 bda4 	b.w	2384 <arch_swap>
    883c:	f383 8811 	msr	BASEPRI, r3
    8840:	f3bf 8f6f 	isb	sy
}
    8844:	4770      	bx	lr

00008846 <z_reschedule_unlocked>:
	__asm__ volatile(
    8846:	f04f 0320 	mov.w	r3, #32
    884a:	f3ef 8011 	mrs	r0, BASEPRI
    884e:	f383 8812 	msr	BASEPRI_MAX, r3
    8852:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8856:	f7ff bfea 	b.w	882e <z_reschedule_irqlock>

0000885a <z_priq_dumb_best>:
{
    885a:	4603      	mov	r3, r0
	return list->head == list;
    885c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    885e:	4283      	cmp	r3, r0
    8860:	d003      	beq.n	886a <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8862:	2800      	cmp	r0, #0
    8864:	bf38      	it	cc
    8866:	2000      	movcc	r0, #0
    8868:	4770      	bx	lr
	struct k_thread *thread = NULL;
    886a:	2000      	movs	r0, #0
}
    886c:	4770      	bx	lr

0000886e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    886e:	b13a      	cbz	r2, 8880 <z_impl_k_sem_init+0x12>
    8870:	428a      	cmp	r2, r1
    8872:	d305      	bcc.n	8880 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    8874:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    8878:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    887c:	2000      	movs	r0, #0
    887e:	4770      	bx	lr
		return -EINVAL;
    8880:	f06f 0015 	mvn.w	r0, #21
}
    8884:	4770      	bx	lr

00008886 <k_is_in_isr>:
    8886:	f3ef 8005 	mrs	r0, IPSR
}
    888a:	3800      	subs	r0, #0
    888c:	bf18      	it	ne
    888e:	2001      	movne	r0, #1
    8890:	4770      	bx	lr

00008892 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8892:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8894:	f7ff f822 	bl	78dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8898:	bd08      	pop	{r3, pc}

0000889a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    889a:	f7ff b81f 	b.w	78dc <sys_clock_tick_get>

0000889e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    889e:	b108      	cbz	r0, 88a4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    88a0:	f7fa b934 	b.w	2b0c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    88a4:	4770      	bx	lr

000088a6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    88a6:	b510      	push	{r4, lr}
    88a8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    88aa:	f7fe fe65 	bl	7578 <z_abort_timeout>

	if (inactive) {
    88ae:	b9b0      	cbnz	r0, 88de <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    88b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88b2:	b10b      	cbz	r3, 88b8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    88b4:	4620      	mov	r0, r4
    88b6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    88b8:	f104 0018 	add.w	r0, r4, #24
    88bc:	f7fe f81c 	bl	68f8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    88c0:	b168      	cbz	r0, 88de <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    88c2:	f7fd fcb5 	bl	6230 <z_ready_thread>
    88c6:	f04f 0320 	mov.w	r3, #32
    88ca:	f3ef 8011 	mrs	r0, BASEPRI
    88ce:	f383 8812 	msr	BASEPRI_MAX, r3
    88d2:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    88d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    88da:	f7ff bfa8 	b.w	882e <z_reschedule_irqlock>
    88de:	bd10      	pop	{r4, pc}

000088e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    88e0:	f7fc bc30 	b.w	5144 <SystemInit>
